// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "gettext.h"
#include "confdialog.h"
#include <config.h>
#include <FL/Fl_Tooltip.H>
#include <FL/Fl_Box.H>
#include <FL/filename.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/fl_show_colormap.H>
#include "main.h"
#include "fl_digi.h"
#include "Viewer.h"
#include "soundconf.h"
#include "waterfall.h"
#include "rigxml.h"
#include "lookupcall.h"
#include "icons.h"
#include "Viewer.h"
#include "pskrep.h"
#include "logsupport.h"
#include "notify.h"
#include "debug.h"
#include "status.h"
#include "rx_extract.h"
#include "kmlserver.h"
extern void WefaxDestDirSet(Fl_File_Chooser *w, void *userdata);
#if USE_HAMLIB
  #include "hamlib.h"
#endif
Fl_Double_Window *dlgConfig; 
Mode_Browser* mode_browser; 

static void choose_color(Fl_Color & c) {
  unsigned char r, g, b;
  Fl::get_color(c, r, g, b);
  if (fl_color_chooser("Font color", r, g, b))
      c = fl_rgb_color(r, g, b);
}

static void adjust_label(Fl_Widget* w) {
  w->labelcolor(fl_contrast(w->labelcolor(), w->color()));
}

static void cbRxFontBrowser(Fl_Widget*, void*) {
  Fl_Font font = font_browser->fontNumber();
      int size = font_browser->fontSize();
      Fl_Color color = font_browser->fontColor();
  
      RxText->textfont(font);
      RxText->textsize(size);
      RxText->textcolor(color);
      RxText->redraw();
  
      progdefaults.RxFontnbr = font;
      progdefaults.RxFontsize = size;
      progdefaults.RxFontcolor = color;
  
      ReceiveText->setFont(font);
      ReceiveText->setFontSize(size);
      ReceiveText->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);
  
      font_browser->hide();
  
      progdefaults.changed = true;
}

static void cbTxFontBrowser(Fl_Widget*, void*) {
  Fl_Font font = font_browser->fontNumber();
      int size = font_browser->fontSize();
      Fl_Color color = font_browser->fontColor();
  
      TxText->textfont(font);
      TxText->textsize(size);
      TxText->textcolor(color);
      TxText->redraw();
  
      progdefaults.TxFontnbr = font;
      progdefaults.TxFontsize = size;
      progdefaults.TxFontcolor = color;
  
      TransmitText->setFont(font);
      TransmitText->setFontSize(size);
      TransmitText->setFontColor(progdefaults.TxFontcolor, FTextBase::RECV);
  
      font_browser->hide();
  
      progdefaults.changed = true;
}

void cbWaterfallFontBrowser(Fl_Widget*, void*) {
  Fl_Font fnt = font_browser->fontNumber();
      int size = font_browser->fontSize();
  
      progdefaults.WaterfallFontnbr = fnt;
      progdefaults.WaterfallFontsize = size;
      progdefaults.changed = true;
  
      font_browser->hide();
}

void cbViewerFontBrowser(Fl_Widget*, void*) {
  progdefaults.ViewerFontnbr = font_browser->fontNumber();
      progdefaults.ViewerFontsize = font_browser->fontSize();
      initViewer();
      progdefaults.changed = true;
  
      font_browser->hide();
}

void cbFreqControlFontBrowser(Fl_Widget*, void*) {
  Fl_Font fnt = font_browser->fontNumber();
      progdefaults.FreqControlFontnbr = fnt;
      progdefaults.changed = true;
  
      FDdisplay->labelfont(progdefaults.FreqControlFontnbr);
      FDdisplay->redraw();
      qsoFreqDisp1->font(progdefaults.FreqControlFontnbr);
      qsoFreqDisp2->font(progdefaults.FreqControlFontnbr);
      qsoFreqDisp3->font(progdefaults.FreqControlFontnbr);
      qsoFreqDisp1->redraw();
      qsoFreqDisp2->redraw();
      qsoFreqDisp3->redraw();
      
      font_browser->hide();
}

static void cbLOGGINGFontBrowser(Fl_Widget*, void*) {
  Fl_Font font = font_browser->fontNumber();
      int size = font_browser->fontSize();
      Fl_Color color = font_browser->fontColor();
  
      progdefaults.LOGGINGtextfont = font;
      progdefaults.LOGGINGtextsize = size;
      progdefaults.LOGGINGtextcolor = color;
  
      LOGGINGdisplay->textsize(size);
      LOGGINGdisplay->textcolor(color);
      LOGGINGdisplay->textfont(font);
      LOGGINGdisplay->redraw();
      
      LOGGING_colors_font();
  
      font_browser->hide();
  
      progdefaults.changed = true;
}

static void cbLOGBOOKFontBrowser(Fl_Widget*, void*) {
  Fl_Font font = font_browser->fontNumber();
      int size = font_browser->fontSize();
      Fl_Color color = font_browser->fontColor();
  
      progdefaults.LOGBOOKtextfont = font;
      progdefaults.LOGBOOKtextsize = size;
      progdefaults.LOGBOOKtextcolor = color;
  
      LOGBOOKdisplay->textsize(size);
      LOGBOOKdisplay->textcolor(color);
      LOGBOOKdisplay->textfont(font);
      LOGBOOKdisplay->redraw();
      
      LOGBOOK_colors_font();
  
      font_browser->hide();
  
      progdefaults.changed = true;
}

void set_qrzxml_buttons(Fl_Button* b) {
  Fl_Button* qrzbxml[] = { btnQRZXMLnotavailable, btnQRZcdrom, btnQRZsub,
                           btnHamcall,
                           btnCALLOOK, btnHamQTH};
  
  for (size_t i = 0; i < sizeof(qrzbxml)/sizeof(*qrzbxml); i++)
  	qrzbxml[i]->value(b == qrzbxml[i]);
}

void set_qrzweb_buttons(Fl_Button* b) {
  Fl_Button* qrzbweb[] = { btnQRZWEBnotavailable, btnQRZonline,
                                btnHAMCALLonline,
                                btnHamQTHonline };
  
  for (size_t i = 0; i < sizeof(qrzbweb)/sizeof(*qrzbweb); i++)
  	qrzbweb[i]->value(b == qrzbweb[i]);
}

Fl_Tabs *tabsConfigure=(Fl_Tabs *)0;

Fl_Group *tabOperator=(Fl_Group *)0;

static void cb_tabOperator(Fl_Group*, void*) {
  progdefaults.changed = true;
}

Fl_Input2 *inpMyCallsign=(Fl_Input2 *)0;

static void cb_inpMyCallsign(Fl_Input2* o, void*) {
  if (progdefaults.THORsecText.empty()) {
progdefaults.THORsecText = o->value();
progdefaults.THORsecText.append(" ");
txtTHORSecondary->value(progdefaults.THORsecText.c_str());
}
if (progdefaults.secText.empty()) {
progdefaults.secText = o->value();
progdefaults.secText.append(" ");
txtSecondary->value(progdefaults.secText.c_str());
}
progdefaults.myCall = o->value();
update_main_title();
notify_change_callsign();
progdefaults.changed = true;
}

Fl_Input2 *inpMyName=(Fl_Input2 *)0;

static void cb_inpMyName(Fl_Input2* o, void*) {
  progdefaults.myName = o->value();
progdefaults.changed = true;
}

Fl_Input2 *inpMyQth=(Fl_Input2 *)0;

static void cb_inpMyQth(Fl_Input2* o, void*) {
  progdefaults.myQth = o->value();
progdefaults.changed = true;
}

Fl_Input2 *inpMyLocator=(Fl_Input2 *)0;

static void cb_inpMyLocator(Fl_Input2* o, void*) {
  progdefaults.myLocator = o->value();
progdefaults.changed = true;
}

Fl_Input2 *inpMyAntenna=(Fl_Input2 *)0;

static void cb_inpMyAntenna(Fl_Input2* o, void*) {
  progdefaults.myAntenna = o->value();
progdefaults.changed = true;
}

Fl_Group *grpNoise=(Fl_Group *)0;

Fl_Check_Button *btnNoiseOn=(Fl_Check_Button *)0;

static void cb_btnNoiseOn(Fl_Check_Button* o, void*) {
  progdefaults.noise = o->value();
}

Fl_Counter2 *noiseDB=(Fl_Counter2 *)0;

static void cb_noiseDB(Fl_Counter2* o, void*) {
  progdefaults.s2n = o->value();
}

Fl_Group *tabUI=(Fl_Group *)0;

Fl_Tabs *tabsUI=(Fl_Tabs *)0;

Fl_Group *tabBrowser=(Fl_Group *)0;

Fl_Spinner2 *cntChannels=(Fl_Spinner2 *)0;

static void cb_cntChannels(Fl_Spinner2* o, void*) {
  progdefaults.VIEWERchannels = (int)(o->value());
initViewer();
}

Fl_Spinner2 *cntTimeout=(Fl_Spinner2 *)0;

static void cb_cntTimeout(Fl_Spinner2* o, void*) {
  progdefaults.VIEWERtimeout = (int)(o->value());
progdefaults.changed = true;
}

Fl_Choice *mnuViewerLabel=(Fl_Choice *)0;

static void cb_mnuViewerLabel(Fl_Choice* o, void*) {
  progdefaults.VIEWERlabeltype = o->value();
initViewer();
progdefaults.changed = true;
}

Fl_Button *btnViewerFont=(Fl_Button *)0;

static void cb_btnViewerFont(Fl_Button*, void*) {
  font_browser->fontNumber(progdefaults.ViewerFontnbr);
font_browser->fontSize(progdefaults.ViewerFontsize);
font_browser->fontColor(FL_FOREGROUND_COLOR);
font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
font_browser->callback(cbViewerFontBrowser);
font_browser->show();
}

Fl_Check_Button *btnFixedIntervals=(Fl_Check_Button *)0;

static void cb_btnFixedIntervals(Fl_Check_Button* o, void*) {
  progdefaults.VIEWERfixed = o->value();
progdefaults.changed = true;
initViewer();
}

Fl_Check_Button *btnMarquee=(Fl_Check_Button *)0;

static void cb_btnMarquee(Fl_Check_Button* o, void*) {
  progdefaults.VIEWERmarquee = o->value();
progdefaults.changed = true;
initViewer();
}

Fl_Check_Button *btnAscend=(Fl_Check_Button *)0;

static void cb_btnAscend(Fl_Check_Button* o, void*) {
  progdefaults.VIEWERascend = o->value();
progdefaults.changed = true;
initViewer();
}

Fl_Check_Button *btnBrowserHistory=(Fl_Check_Button *)0;

static void cb_btnBrowserHistory(Fl_Check_Button* o, void*) {
  progdefaults.VIEWERhistory = o->value();
progdefaults.changed = true;
}

Fl_Button *bwsrSliderColor=(Fl_Button *)0;

static void cb_bwsrSliderColor(Fl_Button* o, void*) {
  uchar r, g, b;
    r = progdefaults.bwsrSliderColor.R;
    g = progdefaults.bwsrSliderColor.G;
    b = progdefaults.bwsrSliderColor.B;

    if (fl_color_chooser("Slider Color", r, g, b) == 0)
        return;
    progdefaults.bwsrSliderColor.R = r;
    progdefaults.bwsrSliderColor.G = g;
    progdefaults.bwsrSliderColor.B = b;
    o->color(fl_rgb_color(r,g,b));
    o->redraw();
    sldrViewerSquelch->color(fl_rgb_color(r,g,b));
    sldrViewerSquelch->redraw();
    mvsquelch->color(fl_rgb_color(r,g,b));
    mvsquelch->redraw();
    
    progdefaults.changed = true;
}

Fl_Button *bwsrSldrSelColor=(Fl_Button *)0;

static void cb_bwsrSldrSelColor(Fl_Button* o, void*) {
  uchar r, g, b;
    r = progdefaults.bwsrSldrSelColor.R;
    g = progdefaults.bwsrSldrSelColor.G;
    b = progdefaults.bwsrSldrSelColor.B;

    if (fl_color_chooser("Button Color", r, g, b) == 0)
        return;
    progdefaults.bwsrSldrSelColor.R = r;
    progdefaults.bwsrSldrSelColor.G = g;
    progdefaults.bwsrSldrSelColor.B = b;
    o->color(fl_rgb_color(r,g,b));
    o->redraw();
    sldrViewerSquelch->selection_color(fl_rgb_color(r,g,b));
    sldrViewerSquelch->redraw();
    mvsquelch->selection_color(fl_rgb_color(r,g,b));
    mvsquelch->redraw();
    
    progdefaults.changed = true;
}

Fl_Button *bwsrHiLite_1_color=(Fl_Button *)0;

static void cb_bwsrHiLite_1_color(Fl_Button*, void*) {
  progdefaults.bwsrHiLight1 = fl_show_colormap((Fl_Color)progdefaults.bwsrHiLight1);
bwsrHiLite_1_color->color((Fl_Color)progdefaults.bwsrHiLight1);
viewer_redraw();
progdefaults.changed = true;
}

Fl_Button *bwsrHiLite_2_color=(Fl_Button *)0;

static void cb_bwsrHiLite_2_color(Fl_Button*, void*) {
  progdefaults.bwsrHiLight2 = fl_show_colormap((Fl_Color)progdefaults.bwsrHiLight2);
bwsrHiLite_2_color->color((Fl_Color)progdefaults.bwsrHiLight2);
viewer_redraw();
progdefaults.changed = true;
}

Fl_Button *bwsrHiLite_even_lines=(Fl_Button *)0;

static void cb_bwsrHiLite_even_lines(Fl_Button*, void*) {
  progdefaults.bwsrBackgnd2 = fl_show_colormap((Fl_Color)progdefaults.bwsrBackgnd2);
bwsrHiLite_even_lines->color((Fl_Color)progdefaults.bwsrBackgnd2);
viewer_redraw();
progdefaults.changed = true;;
}

Fl_Button *bwsrHiLite_odd_lines=(Fl_Button *)0;

static void cb_bwsrHiLite_odd_lines(Fl_Button*, void*) {
  progdefaults.bwsrBackgnd1 = fl_show_colormap((Fl_Color)progdefaults.bwsrBackgnd1);
bwsrHiLite_odd_lines->color((Fl_Color)progdefaults.bwsrBackgnd1);
viewer_redraw();
progdefaults.changed = true;
}

Fl_Button *bwsrHiLite_select=(Fl_Button *)0;

static void cb_bwsrHiLite_select(Fl_Button*, void*) {
  progdefaults.bwsrSelect = fl_show_colormap((Fl_Color)progdefaults.bwsrSelect);
bwsrHiLite_select->color((Fl_Color)progdefaults.bwsrSelect);
viewer_redraw();
progdefaults.changed = true;
}

Fl_Group *tabContest=(Fl_Group *)0;

Fl_Box *lblSend=(Fl_Box *)0;

Fl_Input2 *inpSend1=(Fl_Input2 *)0;

static void cb_inpSend1(Fl_Input2* o, void*) {
  progdefaults.myXchg=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn599=(Fl_Check_Button *)0;

static void cb_btn599(Fl_Check_Button* o, void*) {
  progdefaults.fixed599 = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnCutNbrs=(Fl_Check_Button *)0;

static void cb_btnCutNbrs(Fl_Check_Button* o, void*) {
  progdefaults.cutnbrs=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnUseLeadingZeros=(Fl_Check_Button *)0;

static void cb_btnUseLeadingZeros(Fl_Check_Button* o, void*) {
  progdefaults.UseLeadingZeros = o->value();
progdefaults.changed = true;
}

Fl_Value_Input2 *nbrContestStart=(Fl_Value_Input2 *)0;

static void cb_nbrContestStart(Fl_Value_Input2* o, void*) {
  progdefaults.ContestStart = (int)o->value();
progdefaults.changed = true;
}

Fl_Value_Input2 *nbrContestDigits=(Fl_Value_Input2 *)0;

static void cb_nbrContestDigits(Fl_Value_Input2* o, void*) {
  progdefaults.ContestDigits = (int)o->value();
progdefaults.changed = true;
}

Fl_Button *btnResetSerNbr=(Fl_Button *)0;

static void cb_btnResetSerNbr(Fl_Button*, void*) {
  cb_ResetSerNbr();
}

Fl_Light_Button *btnDupCheckOn=(Fl_Light_Button *)0;

static void cb_btnDupCheckOn(Fl_Light_Button* o, void*) {
  progdefaults.EnableDupCheck = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnDupBand=(Fl_Check_Button *)0;

static void cb_btnDupBand(Fl_Check_Button* o, void*) {
  progdefaults.dupband = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnDupMode=(Fl_Check_Button *)0;

static void cb_btnDupMode(Fl_Check_Button* o, void*) {
  progdefaults.dupmode = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnDupState=(Fl_Check_Button *)0;

static void cb_btnDupState(Fl_Check_Button* o, void*) {
  progdefaults.dupstate = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnDupXchg1=(Fl_Check_Button *)0;

static void cb_btnDupXchg1(Fl_Check_Button* o, void*) {
  progdefaults.dupxchg1 = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnDupTimeSpan=(Fl_Check_Button *)0;

static void cb_btnDupTimeSpan(Fl_Check_Button* o, void*) {
  progdefaults.duptimespan=(int)o->value();
progdefaults.changed = true;
}

Fl_Value_Input2 *nbrTimeSpan=(Fl_Value_Input2 *)0;

static void cb_nbrTimeSpan(Fl_Value_Input2* o, void*) {
  progdefaults.timespan = (int)o->value();
progdefaults.changed = true;
}

Fl_Button *btnDupColor=(Fl_Button *)0;

static void cb_btnDupColor(Fl_Button* o, void*) {
  fl_color_chooser("Dup Check", 
  progdefaults.dup_color.R, 
  progdefaults.dup_color.G, 
  progdefaults.dup_color.B);
o->color(
  fl_rgb_color(
    progdefaults.dup_color.R,
    progdefaults.dup_color.G,
    progdefaults.dup_color.B));
o->redraw();
progdefaults.changed = true;
}

Fl_Group *tabUserInterface=(Fl_Group *)0;

Fl_Check_Button *btnShowTooltips=(Fl_Check_Button *)0;

static void cb_btnShowTooltips(Fl_Check_Button* o, void*) {
  progdefaults.tooltips = o->value();
Fl_Tooltip::enable(progdefaults.tooltips);
progdefaults.changed = true;
}

Fl_Check_Button *chkMenuIcons=(Fl_Check_Button *)0;

static void cb_chkMenuIcons(Fl_Check_Button* o, void*) {
  progdefaults.menuicons = o->value();
toggle_icon_labels();
progdefaults.changed = true;
}

Fl_Choice *mnuScheme=(Fl_Choice *)0;

static void cb_mnuScheme(Fl_Choice* o, void*) {
  progdefaults.ui_scheme = o->text();
    Fl::scheme(progdefaults.ui_scheme.c_str());

    progdefaults.changed = true;
}

Fl_Button *bVisibleModes=(Fl_Button *)0;

static void cb_bVisibleModes(Fl_Button* o, void*) {
  mode_browser->label(o->label());
mode_browser->callback(toggle_visible_modes);
mode_browser->show(&progdefaults.visible_modes);
progdefaults.changed = true;
}

Fl_Choice *mnuLang=(Fl_Choice *)0;

static void cb_mnuLang(Fl_Choice* o, void*) {
  progdefaults.ui_language = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_rx_lowercase=(Fl_Check_Button *)0;

static void cb_btn_rx_lowercase(Fl_Check_Button* o, void*) {
  progdefaults.rx_lowercase = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_tx_lowercase=(Fl_Check_Button *)0;

static void cb_btn_tx_lowercase(Fl_Check_Button* o, void*) {
  progdefaults.tx_lowercase = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_save_config_on_exit=(Fl_Check_Button *)0;

static void cb_btn_save_config_on_exit(Fl_Check_Button* o, void*) {
  progdefaults.SaveConfig = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn2_save_macros_on_exit=(Fl_Check_Button *)0;

static void cb_btn2_save_macros_on_exit(Fl_Check_Button* o, void*) {
  btn_save_macros_on_exit->value(o->value());
progdefaults.SaveMacros = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn2NagMe=(Fl_Check_Button *)0;

static void cb_btn2NagMe(Fl_Check_Button* o, void*) {
  btnNagMe->value(o->value());
progdefaults.NagMe=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn2_confirm_exit=(Fl_Check_Button *)0;

static void cb_btn2_confirm_exit(Fl_Check_Button* o, void*) {
  btn2_confirm_exit->value(o->value());
progdefaults.confirmExit=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_check_for_updates=(Fl_Check_Button *)0;

static void cb_btn_check_for_updates(Fl_Check_Button* o, void*) {
  progdefaults.check_for_updates = o->value();
progdefaults.changed = true;
}

Fl_Group *tabLogServer=(Fl_Group *)0;

Fl_Input *xmllogServerAddress=(Fl_Input *)0;

static void cb_xmllogServerAddress(Fl_Input* o, void*) {
  progdefaults.xmllog_address = o->value();
}

Fl_Input *xmllogServerPort=(Fl_Input *)0;

static void cb_xmllogServerPort(Fl_Input* o, void*) {
  progdefaults.xmllog_port = o->value();
}

Fl_Button *btn_reconnect_log_server=(Fl_Button *)0;

static void cb_btn_reconnect_log_server(Fl_Button*, void*) {
  progdefaults.xml_logbook = true;
connect_to_log_server();
}

Fl_Check_Button *btnNagMe=(Fl_Check_Button *)0;

static void cb_btnNagMe(Fl_Check_Button* o, void*) {
  btn2NagMe->value(o->value());
progdefaults.NagMe=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnClearOnSave=(Fl_Check_Button *)0;

static void cb_btnClearOnSave(Fl_Check_Button* o, void*) {
  progdefaults.ClearOnSave=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnCallUpperCase=(Fl_Check_Button *)0;

static void cb_btnCallUpperCase(Fl_Check_Button* o, void*) {
  progdefaults.calluppercase = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnAutoFillQSO=(Fl_Check_Button *)0;

static void cb_btnAutoFillQSO(Fl_Check_Button* o, void*) {
  progdefaults.autofill_qso_fields = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnDateTimeSort=(Fl_Check_Button *)0;

static void cb_btnDateTimeSort(Fl_Check_Button* o, void*) {
  progdefaults.sort_date_time_off = o->value();
progdefaults.changed = true;
reload_browser();
}

Fl_Check_Button *btndate_time_force=(Fl_Check_Button *)0;

static void cb_btndate_time_force(Fl_Check_Button* o, void*) {
  progdefaults.force_date_time = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnRSTindefault=(Fl_Check_Button *)0;

static void cb_btnRSTindefault(Fl_Check_Button* o, void*) {
  progdefaults.RSTin_default = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnRSTdefault=(Fl_Check_Button *)0;

static void cb_btnRSTdefault(Fl_Check_Button* o, void*) {
  progdefaults.RSTdefault = o->value();
progdefaults.changed = true;
}

Fl_Input2 *txt_cty_dat_pathname=(Fl_Input2 *)0;

static void cb_txt_cty_dat_pathname(Fl_Input2* o, void*) {
  progdefaults.cty_dat_pathname = o->value();
progdefaults.changed = true;
}

Fl_Button *btn_select_cty_dat=(Fl_Button *)0;

static void cb_btn_select_cty_dat(Fl_Button*, void*) {
  select_cty_dat_pathname();
}

Fl_Button *btn_default_cty_dat=(Fl_Button *)0;

static void cb_btn_default_cty_dat(Fl_Button*, void*) {
  default_cty_dat_pathname();
}

Fl_Button *btn_reload_cty_dat=(Fl_Button *)0;

static void cb_btn_reload_cty_dat(Fl_Button*, void*) {
  reload_cty_dat();
}

Fl_Input2 *inpMyPower=(Fl_Input2 *)0;

static void cb_inpMyPower(Fl_Input2* o, void*) {
  progdefaults.mytxpower = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnRXClicks=(Fl_Check_Button *)0;

static void cb_btnRXClicks(Fl_Check_Button* o, void*) {
  progdefaults.rxtext_clicks_qso_data = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnRXTooltips=(Fl_Check_Button *)0;

static void cb_btnRXTooltips(Fl_Check_Button* o, void*) {
  progdefaults.rxtext_tooltips = o->value();
progdefaults.changed = true;
}

Fl_Input2 *inpNonword=(Fl_Input2 *)0;

static void cb_inpNonword(Fl_Input2* o, void*) {
  progdefaults.nonwordchars = o->value();
progdefaults.changed = true;
}

Fl_Group *tabMBars=(Fl_Group *)0;

Fl_Check_Button *btnMacroMouseWheel=(Fl_Check_Button *)0;

static void cb_btnMacroMouseWheel(Fl_Check_Button* o, void*) {
  progdefaults.macro_wheel = o->value();
progdefaults.changed = true;
}

Fl_Round_Button *btn_oneA=(Fl_Round_Button *)0;

static void cb_btn_oneA(Fl_Round_Button*, void*) {
  progdefaults.mbar2_pos = 0;
progdefaults.mbar1_pos = true;
progdefaults.changed = true;
set_macroLabels();
UI_select();
}

Fl_Round_Button *btn_oneB=(Fl_Round_Button *)0;

static void cb_btn_oneB(Fl_Round_Button*, void*) {
  progdefaults.mbar2_pos = 0;
progdefaults.mbar1_pos = false;
progdefaults.changed = true;
set_macroLabels();
UI_select();
}

Fl_Round_Button *btn_twoA=(Fl_Round_Button *)0;

static void cb_btn_twoA(Fl_Round_Button*, void*) {
  progdefaults.mbar2_pos = 1;
progdefaults.mbar1_pos = true;
progdefaults.changed = true;
set_macroLabels();
UI_select();
}

Fl_Round_Button *btn_twoB=(Fl_Round_Button *)0;

static void cb_btn_twoB(Fl_Round_Button*, void*) {
  progdefaults.mbar2_pos = 2;
progdefaults.mbar1_pos = true;
progdefaults.changed = true;
set_macroLabels();
UI_select();
}

Fl_Round_Button *btn_twoC=(Fl_Round_Button *)0;

static void cb_btn_twoC(Fl_Round_Button*, void*) {
  progdefaults.mbar2_pos = 3;
progdefaults.mbar1_pos = true;
progdefaults.changed = true;
set_macroLabels();
UI_select();
}

Fl_Round_Button *btn_twoD=(Fl_Round_Button *)0;

static void cb_btn_twoD(Fl_Round_Button*, void*) {
  progdefaults.mbar2_pos = 1;
progdefaults.mbar1_pos = false;
progdefaults.changed = true;
set_macroLabels();
UI_select();
}

Fl_Round_Button *btn_twoE=(Fl_Round_Button *)0;

static void cb_btn_twoE(Fl_Round_Button*, void*) {
  progdefaults.mbar2_pos = 2;
progdefaults.mbar1_pos = false;
progdefaults.changed = true;
set_macroLabels();
UI_select();
}

Fl_Round_Button *btn_twoF=(Fl_Round_Button *)0;

static void cb_btn_twoF(Fl_Round_Button*, void*) {
  progdefaults.mbar2_pos = 3;
progdefaults.mbar1_pos = false;
progdefaults.changed = true;
set_macroLabels();
UI_select();
}

Fl_Check_Button *btnUseLastMacro=(Fl_Check_Button *)0;

static void cb_btnUseLastMacro(Fl_Check_Button* o, void*) {
  progdefaults.UseLastMacro = o->value();
update_main_title();
progdefaults.changed = true;
}

Fl_Check_Button *btnDisplayMacroFilename=(Fl_Check_Button *)0;

static void cb_btnDisplayMacroFilename(Fl_Check_Button* o, void*) {
  progdefaults.DisplayMacroFilename = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_save_macros_on_exit=(Fl_Check_Button *)0;

static void cb_btn_save_macros_on_exit(Fl_Check_Button* o, void*) {
  btn2_save_macros_on_exit->value(o->value());
progdefaults.SaveMacros = o->value();
progdefaults.changed = true;
}

Fl_Group *tabWF_UI=(Fl_Group *)0;

Fl_Check_Button *btnWF_UIrev=(Fl_Check_Button *)0;

static void cb_btnWF_UIrev(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIrev = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Check_Button *btnWF_UIx1=(Fl_Check_Button *)0;

static void cb_btnWF_UIx1(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIx1 = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Check_Button *btnWF_UIwfcarrier=(Fl_Check_Button *)0;

static void cb_btnWF_UIwfcarrier(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIwfcarrier = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Check_Button *btnWF_UIwfshift=(Fl_Check_Button *)0;

static void cb_btnWF_UIwfshift(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIwfshift = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Check_Button *btnWF_UIwfreflevel=(Fl_Check_Button *)0;

static void cb_btnWF_UIwfreflevel(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIwfreflevel = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Check_Button *btnWF_UIwfdrop=(Fl_Check_Button *)0;

static void cb_btnWF_UIwfdrop(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIwfdrop = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Check_Button *btnWF_UIwfampspan=(Fl_Check_Button *)0;

static void cb_btnWF_UIwfampspan(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIwfampspan = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Check_Button *btnWF_UIwfstore=(Fl_Check_Button *)0;

static void cb_btnWF_UIwfstore(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIwfstore = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Check_Button *btnWF_UIwfmode=(Fl_Check_Button *)0;

static void cb_btnWF_UIwfmode(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIwfmode = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Check_Button *btnWF_UIqsy=(Fl_Check_Button *)0;

static void cb_btnWF_UIqsy(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIqsy = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Check_Button *btnWF_UIxmtlock=(Fl_Check_Button *)0;

static void cb_btnWF_UIxmtlock(Fl_Check_Button* o, void*) {
  progdefaults.WF_UIxmtlock = o->value();
progdefaults.changed = true;
WF_UI();
}

Fl_Button *btn_wf_enable_all=(Fl_Button *)0;

static void cb_btn_wf_enable_all(Fl_Button*, void*) {
  btnWF_UIrev->value(progdefaults.WF_UIrev = 1);
btnWF_UIwfcarrier->value(progdefaults.WF_UIwfcarrier = 1);
btnWF_UIwfreflevel->value(progdefaults.WF_UIwfreflevel = 1);
btnWF_UIwfampspan->value(progdefaults.WF_UIwfampspan = 1);
btnWF_UIwfmode->value(progdefaults.WF_UIwfmode = 1);

btnWF_UIx1->value(progdefaults.WF_UIx1 = 1);
btnWF_UIwfshift->value(progdefaults.WF_UIwfshift = 1);
btnWF_UIwfdrop->value(progdefaults.WF_UIwfdrop = 1);
btnWF_UIwfstore->value(progdefaults.WF_UIwfstore = 1);
btnWF_UIqsy->value(progdefaults.WF_UIqsy = 1);
btnWF_UIxmtlock->value(progdefaults.WF_UIxmtlock = 1);

progdefaults.changed = true;
WF_UI();
}

Fl_Button *btn_wf_disable_all=(Fl_Button *)0;

static void cb_btn_wf_disable_all(Fl_Button*, void*) {
  btnWF_UIrev->value(progdefaults.WF_UIrev = 0);
btnWF_UIwfcarrier->value(progdefaults.WF_UIwfcarrier = 0);
btnWF_UIwfreflevel->value(progdefaults.WF_UIwfreflevel = 0);
btnWF_UIwfampspan->value(progdefaults.WF_UIwfampspan = 0);
btnWF_UIwfmode->value(progdefaults.WF_UIwfmode = 0);

btnWF_UIx1->value(progdefaults.WF_UIx1 = 0);
btnWF_UIwfshift->value(progdefaults.WF_UIwfshift = 0);
btnWF_UIwfdrop->value(progdefaults.WF_UIwfdrop = 0);
btnWF_UIwfstore->value(progdefaults.WF_UIwfstore = 0);
btnWF_UIqsy->value(progdefaults.WF_UIqsy = 0);
btnWF_UIxmtlock->value(progdefaults.WF_UIxmtlock = 0);

progdefaults.changed = true;
WF_UI();
}

Fl_Group *tabColorsFonts=(Fl_Group *)0;

Fl_Tabs *tabsColors=(Fl_Tabs *)0;

Fl_Menu_Button *CHARSETstatus=(Fl_Menu_Button *)0;

Fl_Input *RxText=(Fl_Input *)0;

Fl_Button *btnRxColor=(Fl_Button *)0;

static void cb_btnRxColor(Fl_Button*, void*) {
  uchar r, g, b;
    r = progdefaults.RxColor.R;
    g = progdefaults.RxColor.G;
    b = progdefaults.RxColor.B;

    if (!fl_color_chooser("Rx Color", r, g, b))
        return;

    progdefaults.RxColor.R = r;
    progdefaults.RxColor.G = g;
    progdefaults.RxColor.B = b;
    RxText->color(fl_rgb_color(r,g,b));
    ReceiveText->color(RxText->color());
    RxText->redraw();
    ReceiveText->redraw();

    progdefaults.changed = true;
}

Fl_Button *btnTxColor=(Fl_Button *)0;

static void cb_btnTxColor(Fl_Button*, void*) {
  uchar r, g, b;
    r = progdefaults.TxColor.R;
    g = progdefaults.TxColor.G;
    b = progdefaults.TxColor.B;

    if (!fl_color_chooser("Tx Color", r, g, b))
        return;

    progdefaults.TxColor.R = r;
    progdefaults.TxColor.G = g;
    progdefaults.TxColor.B = b;
    TxText->color(fl_rgb_color(r,g,b));
    TransmitText->color(TxText->color());
    TxText->redraw();
    TransmitText->redraw();

progdefaults.changed = true;
}

Fl_Input *TxText=(Fl_Input *)0;

Fl_Button *btnRxFont=(Fl_Button *)0;

static void cb_btnRxFont(Fl_Button*, void*) {
  font_browser->fontNumber(progdefaults.RxFontnbr);
    font_browser->fontSize(progdefaults.RxFontsize);
    font_browser->fontColor(progdefaults.RxFontcolor);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbRxFontBrowser);
font_browser->show();
}

Fl_Button *btnTxFont=(Fl_Button *)0;

static void cb_btnTxFont(Fl_Button*, void*) {
  font_browser->fontNumber(progdefaults.TxFontnbr);
    font_browser->fontSize(progdefaults.TxFontsize);
    font_browser->fontColor(progdefaults.TxFontcolor);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbTxFontBrowser);
    font_browser->show();
}

Fl_Button *btnXMIT=(Fl_Button *)0;

static void cb_btnXMIT(Fl_Button*, void*) {
  choose_color(progdefaults.XMITcolor);
    btnXMIT->color( progdefaults.XMITcolor );
    btnXMIT->redraw();
    TransmitText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    ReceiveText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);

    progdefaults.changed = true;
}

Fl_Button *btnCTRL=(Fl_Button *)0;

static void cb_btnCTRL(Fl_Button*, void*) {
  choose_color(progdefaults.CTRLcolor);
    btnCTRL->color( progdefaults.CTRLcolor );
    btnCTRL->redraw();
    TransmitText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    ReceiveText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);

    progdefaults.changed = true;
}

Fl_Button *btnSKIP=(Fl_Button *)0;

static void cb_btnSKIP(Fl_Button*, void*) {
  choose_color(progdefaults.SKIPcolor);
    btnSKIP->color( progdefaults.SKIPcolor );
    btnSKIP->redraw();
    TransmitText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    ReceiveText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);

    progdefaults.changed = true;
}

Fl_Button *btnALTR=(Fl_Button *)0;

static void cb_btnALTR(Fl_Button*, void*) {
  choose_color(progdefaults.ALTRcolor);
    btnALTR->color( progdefaults.ALTRcolor );
    btnALTR->redraw();
    TransmitText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    ReceiveText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);

    progdefaults.changed = true;
}

Fl_Button *btnSEL=(Fl_Button *)0;

static void cb_btnSEL(Fl_Button*, void*) {
  choose_color(progdefaults.RxTxSelectcolor);
btnSEL->color( progdefaults.RxTxSelectcolor );
btnSEL->redraw();
ReceiveText->color(
  fl_rgb_color(
    progdefaults.RxColor.R,
    progdefaults.RxColor.G,
    progdefaults.RxColor.B),
    progdefaults.RxTxSelectcolor);
TransmitText->color(
  fl_rgb_color(
    progdefaults.TxColor.R,
    progdefaults.TxColor.G,
    progdefaults.TxColor.B),
    progdefaults.RxTxSelectcolor);
    
progdefaults.changed = true;
}

Fl_Button *btnNoTextColor=(Fl_Button *)0;

static void cb_btnNoTextColor(Fl_Button*, void*) {
  uchar r, g, b;
    Fl_Color clr = FL_BACKGROUND2_COLOR;

    Fl::get_color(clr, r, g, b);

    progdefaults.TxFontcolor = FL_BLACK;
    progdefaults.RxFontcolor = FL_BLACK;
    progdefaults.XMITcolor = FL_RED;
    progdefaults.CTRLcolor = FL_DARK_GREEN;
    progdefaults.SKIPcolor = FL_BLUE;
    progdefaults.ALTRcolor = FL_DARK_MAGENTA;
    btnXMIT->color(progdefaults.XMITcolor);
    btnCTRL->color(progdefaults.CTRLcolor);
    btnSKIP->color(progdefaults.SKIPcolor);
    btnALTR->color(progdefaults.ALTRcolor);
    btnXMIT->redraw();
    btnCTRL->redraw();
    btnSKIP->redraw();
    btnALTR->redraw();

    progdefaults.RxColor.R = r;
    progdefaults.RxColor.G = g;
    progdefaults.RxColor.B = b;

    clr = fl_rgb_color(r,g,b);
    RxText->color(clr);
    RxText->textcolor(progdefaults.RxFontcolor);
    RxText->redraw();

    ReceiveText->color(clr);
    ReceiveText->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);
    ReceiveText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    ReceiveText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    ReceiveText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    ReceiveText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    ReceiveText->redraw();

    progdefaults.TxColor.R = r;
    progdefaults.TxColor.G = g;
    progdefaults.TxColor.B = b;

    TxText->color(clr);
    TxText->textcolor(progdefaults.TxFontcolor);
    TxText->redraw();

    TransmitText->color(clr);
    TransmitText->setFontColor(progdefaults.TxFontcolor, FTextBase::RECV);
    TransmitText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    TransmitText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    TransmitText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    TransmitText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    TransmitText->redraw();

    progdefaults.changed = true;
}

Fl_Button *btnTextDefaults=(Fl_Button *)0;

static void cb_btnTextDefaults(Fl_Button*, void*) {
  uchar r, g, b;
    Fl_Color clr;

    progdefaults.TxFontcolor = FL_BLACK;
    progdefaults.RxFontcolor = FL_BLACK;
    progdefaults.XMITcolor = FL_RED;
    progdefaults.CTRLcolor = FL_DARK_GREEN;
    progdefaults.SKIPcolor = FL_BLUE;
    progdefaults.ALTRcolor = FL_DARK_MAGENTA;
    btnXMIT->color(progdefaults.XMITcolor);
    btnCTRL->color(progdefaults.CTRLcolor);
    btnSKIP->color(progdefaults.SKIPcolor);
    btnALTR->color(progdefaults.ALTRcolor);
    btnXMIT->redraw();
    btnCTRL->redraw();
    btnSKIP->redraw();
    btnALTR->redraw();

    r = 255; g = 242; b = 190;
    progdefaults.RxColor.R = r;
    progdefaults.RxColor.G = g;
    progdefaults.RxColor.B = b;

    clr = fl_rgb_color(r,g,b);
    RxText->color(clr);
    RxText->textcolor(progdefaults.RxFontcolor);
    RxText->redraw();

    ReceiveText->color(clr);
    ReceiveText->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);
    ReceiveText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    ReceiveText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    ReceiveText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    ReceiveText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    ReceiveText->redraw();

    r = 200; g = 235; b = 255;
    progdefaults.TxColor.R = r;
    progdefaults.TxColor.G = g;
    progdefaults.TxColor.B = b;

    clr = fl_rgb_color(r,g,b);
    TxText->color(clr);
    TxText->textcolor(progdefaults.TxFontcolor);
    TxText->redraw();

    TransmitText->color(clr);
    TransmitText->setFontColor(progdefaults.TxFontcolor, FTextBase::RECV);
    TransmitText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    TransmitText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    TransmitText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    TransmitText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    TransmitText->redraw();

    progdefaults.changed = true;
}

Fl_Box *FDdisplay=(Fl_Box *)0;

Fl_Button *btn_freq_control_font=(Fl_Button *)0;

static void cb_btn_freq_control_font(Fl_Button*, void*) {
  font_browser->fontNumber(progdefaults.FreqControlFontnbr);
    font_browser->fontSize(14);
    font_browser->fontColor(FL_FOREGROUND_COLOR);
    font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbFreqControlFontBrowser);
font_browser->show();
}

Fl_Button *btnBackgroundColor=(Fl_Button *)0;

static void cb_btnBackgroundColor(Fl_Button*, void*) {
  uchar r, g, b;
    r = progdefaults.FDbackground.R;
    g = progdefaults.FDbackground.G;
    b = progdefaults.FDbackground.B;

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.FDbackground.R = r;
    progdefaults.FDbackground.G = g;
    progdefaults.FDbackground.B = b;
    
    FDdisplay->color(fl_rgb_color(r,g,b));
    FDdisplay->redraw();
    
    if (qsoFreqDisp) {
        qsoFreqDisp->SetONOFFCOLOR(
          fl_rgb_color(	progdefaults.FDforeground.R,
                        progdefaults.FDforeground.G,
                        progdefaults.FDforeground.B),
          fl_rgb_color(	progdefaults.FDbackground.R,
                        progdefaults.FDbackground.G,
                        progdefaults.FDbackground.B));
        qsoFreqDisp->redraw();
    }

    progdefaults.changed = true;
}

Fl_Button *btnForegroundColor=(Fl_Button *)0;

static void cb_btnForegroundColor(Fl_Button*, void*) {
  uchar r, g, b;
    r = progdefaults.FDforeground.R;
    g = progdefaults.FDforeground.G;
    b = progdefaults.FDforeground.B;

    if (!fl_color_chooser("Foreground", r, g, b))
        return;

    progdefaults.FDforeground.R = r;
    progdefaults.FDforeground.G = g;
    progdefaults.FDforeground.B = b;
    
    FDdisplay->labelcolor(fl_rgb_color(r,g,b));
    FDdisplay->redraw();
    
    if (qsoFreqDisp) {
        qsoFreqDisp->SetONOFFCOLOR(
          fl_rgb_color(	progdefaults.FDforeground.R,
                        progdefaults.FDforeground.G,
                        progdefaults.FDforeground.B),
          fl_rgb_color(	progdefaults.FDbackground.R,
                        progdefaults.FDbackground.G,
                        progdefaults.FDbackground.B));
        qsoFreqDisp->redraw();
    }

    progdefaults.changed = true;
}

Fl_Button *btnFD_SystemColor=(Fl_Button *)0;

static void cb_btnFD_SystemColor(Fl_Button*, void*) {
  uchar r, g, b;
    Fl_Color clr = FL_BACKGROUND2_COLOR;

    Fl::get_color(clr, r, g, b);

    progdefaults.FDbackground.R = r;
    progdefaults.FDbackground.G = g;
    progdefaults.FDbackground.B = b;
   
    FDdisplay->color(clr);
    
    clr = FL_FOREGROUND_COLOR;
    Fl::get_color(clr, r, g, b);
    
    FDdisplay->labelcolor(clr);
    FDdisplay->redraw();
    
    progdefaults.FDforeground.R = r;
    progdefaults.FDforeground.G = g;
    progdefaults.FDforeground.B = b;

    if (qsoFreqDisp) {
        qsoFreqDisp->SetONOFFCOLOR(
          fl_rgb_color(	progdefaults.FDforeground.R,
                        progdefaults.FDforeground.G,
                        progdefaults.FDforeground.B),
          fl_rgb_color(	progdefaults.FDbackground.R,
                        progdefaults.FDbackground.G,
                        progdefaults.FDbackground.B));
        qsoFreqDisp->redraw();
    }
         
    progdefaults.changed = true;
}

Fl_Output *LOGGINGdisplay=(Fl_Output *)0;

Fl_Button *btnLOGGING_color=(Fl_Button *)0;

static void cb_btnLOGGING_color(Fl_Button*, void*) {
  uchar r, g, b;
    Fl::get_color(progdefaults.LOGGINGcolor, r, g, b);

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.LOGGINGcolor = fl_rgb_color(r, g, b);
    
    LOGGINGdisplay->color(progdefaults.LOGGINGcolor);
    LOGGINGdisplay->redraw();

    LOGGING_colors_font();
    
    progdefaults.changed = true;
}

Fl_Button *btn_LOGGING_font=(Fl_Button *)0;

static void cb_btn_LOGGING_font(Fl_Button*, void*) {
  font_browser->fontNumber(progdefaults.LOGGINGtextfont);
font_browser->fontSize(progdefaults.LOGGINGtextsize);
font_browser->fontColor(progdefaults.LOGGINGtextcolor);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback(cbLOGGINGFontBrowser);
font_browser->show();
}

Fl_Button *btnLOGGINGdefault_colors_font=(Fl_Button *)0;

static void cb_btnLOGGINGdefault_colors_font(Fl_Button*, void*) {
  progdefaults.LOGGINGcolor = FL_BACKGROUND2_COLOR;
progdefaults.LOGGINGtextfont = (Fl_Font)0;
progdefaults.LOGGINGtextsize = 12;
progdefaults.LOGGINGtextcolor = FL_BLACK;

LOGGINGdisplay->color(progdefaults.LOGGINGcolor);
LOGGINGdisplay->textsize(progdefaults.LOGGINGtextsize);
LOGGINGdisplay->textcolor(progdefaults.LOGGINGtextcolor);
LOGGINGdisplay->textfont(progdefaults.LOGGINGtextfont);
LOGGINGdisplay->redraw();
    
LOGGING_colors_font();
    
progdefaults.changed = true;
}

Fl_Output *LOGBOOKdisplay=(Fl_Output *)0;

Fl_Button *btnLOGBOOK_color=(Fl_Button *)0;

static void cb_btnLOGBOOK_color(Fl_Button*, void*) {
  uchar r, g, b;
    Fl::get_color(progdefaults.LOGBOOKcolor, r, g, b);

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.LOGBOOKcolor = fl_rgb_color(r, g, b);
    
    LOGBOOKdisplay->color(progdefaults.LOGBOOKcolor);
    LOGBOOKdisplay->redraw();

    LOGBOOK_colors_font();
    
    progdefaults.changed = true;
}

Fl_Button *btn_LOGBOOK_font=(Fl_Button *)0;

static void cb_btn_LOGBOOK_font(Fl_Button*, void*) {
  font_browser->fontNumber(progdefaults.LOGBOOKtextfont);
font_browser->fontSize(progdefaults.LOGBOOKtextsize);
font_browser->fontColor(progdefaults.LOGBOOKtextcolor);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback(cbLOGBOOKFontBrowser);
font_browser->show();
}

Fl_Button *btnLOGBOOKdefault_colors_font=(Fl_Button *)0;

static void cb_btnLOGBOOKdefault_colors_font(Fl_Button*, void*) {
  progdefaults.LOGBOOKcolor = FL_BACKGROUND2_COLOR;
progdefaults.LOGBOOKtextfont = (Fl_Font)0;
progdefaults.LOGBOOKtextsize = 12;
progdefaults.LOGBOOKtextcolor = FL_BLACK;

LOGBOOKdisplay->color(progdefaults.LOGBOOKcolor);
LOGBOOKdisplay->textsize(progdefaults.LOGBOOKtextsize);
LOGBOOKdisplay->textcolor(progdefaults.LOGBOOKtextcolor);
LOGBOOKdisplay->textfont(progdefaults.LOGBOOKtextfont);
LOGBOOKdisplay->redraw();
    
LOGBOOK_colors_font();
    
progdefaults.changed = true;
}

Fl_Check_Button *btnUseGroupColors=(Fl_Check_Button *)0;

static void cb_btnUseGroupColors(Fl_Check_Button* o, void*) {
  progdefaults.useGroupColors = o->value();
    colorize_macros();
    progdefaults.changed = true;
}

Fl_Button *btnGroup1=(Fl_Button *)0;

static void cb_btnGroup1(Fl_Button* o, void*) {
  uchar r, g, b;
    r = progdefaults.btnGroup1.R;
    g = progdefaults.btnGroup1.G;
    b = progdefaults.btnGroup1.B;

    if (fl_color_chooser("Group 1", r, g, b) == 0)
        return;
    progdefaults.btnGroup1.R = r;
    progdefaults.btnGroup1.G = g;
    progdefaults.btnGroup1.B = b;
    o->color(fl_rgb_color(r,g,b));
    colorize_macros();
    
    progdefaults.changed = true;
}

Fl_Button *btnGroup2=(Fl_Button *)0;

static void cb_btnGroup2(Fl_Button* o, void*) {
  uchar r, g, b;
    r = progdefaults.btnGroup2.R;
    g = progdefaults.btnGroup2.G;
    b = progdefaults.btnGroup2.B;

    if (fl_color_chooser("Group 2", r, g, b) == 0)
        return;
    progdefaults.btnGroup2.R = r;
    progdefaults.btnGroup2.G = g;
    progdefaults.btnGroup2.B = b;
    o->color(fl_rgb_color(r,g,b));
    colorize_macros();

    progdefaults.changed = true;
}

Fl_Button *btnGroup3=(Fl_Button *)0;

static void cb_btnGroup3(Fl_Button* o, void*) {
  uchar r, g, b;
    r = progdefaults.btnGroup3.R;
    g = progdefaults.btnGroup3.G;
    b = progdefaults.btnGroup3.B;

    if (fl_color_chooser("Group 3", r, g, b) == 0)
        return;
    progdefaults.btnGroup3.R = r;
    progdefaults.btnGroup3.G = g;
    progdefaults.btnGroup3.B = b;
    o->color(fl_rgb_color(r,g,b));

    colorize_macros();
    progdefaults.changed = true;
}

Fl_Button *btnFkeyTextColor=(Fl_Button *)0;

static void cb_btnFkeyTextColor(Fl_Button* o, void*) {
  uchar r, g, b;
    r = progdefaults.btnFkeyTextColor.R;
    g = progdefaults.btnFkeyTextColor.G;
    b = progdefaults.btnFkeyTextColor.B;

    if (fl_color_chooser("Fkey Text", r, g, b) == 0)
        return;

    progdefaults.btnFkeyTextColor.R = r;
    progdefaults.btnFkeyTextColor.G = g;
    progdefaults.btnFkeyTextColor.B = b;
    o->color(fl_rgb_color(r,g,b));
    adjust_label(o);
    btnGroup1->labelcolor(fl_rgb_color(r,g,b));
    btnGroup2->labelcolor(fl_rgb_color(r,g,b));
    btnGroup3->labelcolor(fl_rgb_color(r,g,b));
    btnGroup1->redraw_label();
    btnGroup2->redraw_label();
    btnGroup3->redraw_label();
    progdefaults.changed = true;
    colorize_macros();
}

Fl_Button *btnFkeyDEfaults=(Fl_Button *)0;

static void cb_btnFkeyDEfaults(Fl_Button*, void*) {
  uchar r, g, b;
    Fl_Color clr;

    r = 80; g = 144; b = 144;
    clr = fl_rgb_color(r,g,b);
    btnGroup1->color(clr);
    progdefaults.btnGroup1.R = r;
    progdefaults.btnGroup1.G = g;
    progdefaults.btnGroup1.B = b;

    r = 144; g = 80; b = 80;
    clr = fl_rgb_color(r,g,b);
    btnGroup2->color(clr);
    progdefaults.btnGroup2.R = r;
    progdefaults.btnGroup2.G = g;
    progdefaults.btnGroup2.B = b;

    r = 80; g = 80; b = 144;
    clr = fl_rgb_color(r,g,b);
    btnGroup3->color(clr);
    progdefaults.btnGroup3.R = r;
    progdefaults.btnGroup3.G = g;
    progdefaults.btnGroup3.B = b;

    r = 255; g = 255; b = 255;
    clr = fl_rgb_color(r,g,b);
    btnFkeyTextColor->color(clr);
    btnFkeyTextColor->redraw_label();
    progdefaults.btnFkeyTextColor.R = r;
    progdefaults.btnFkeyTextColor.G = g;
    progdefaults.btnFkeyTextColor.B = b;

    btnGroup1->labelcolor(clr);
    btnGroup1->redraw_label();

    btnGroup2->labelcolor(clr);
    btnGroup2->redraw_label();

    btnGroup3->labelcolor(clr);
    btnGroup3->redraw_label();

    colorize_macros();

progdefaults.changed = true;
}

Fl_Button *btnTabColor=(Fl_Button *)0;

static void cb_btnTabColor(Fl_Button*, void*) {
  progdefaults.TabsColor = fl_show_colormap(progdefaults.TabsColor);
setTabColors();
progdefaults.changed = true;
}

Fl_Button *btnTabDefaultColor=(Fl_Button *)0;

static void cb_btnTabDefaultColor(Fl_Button*, void*) {
  progdefaults.TabsColor = FL_BACKGROUND2_COLOR;
setTabColors();    
progdefaults.changed = true;
}

Fl_Button *btnSpotColor=(Fl_Button *)0;

static void cb_btnSpotColor(Fl_Button*, void*) {
  progdefaults.SpotColor = fl_show_colormap(progdefaults.SpotColor);
spotcolor->color(progdefaults.SpotColor);
spotcolor->redraw();
spot_selection_color();
progdefaults.changed = true;
}

Fl_Button *btnRxIDColor=(Fl_Button *)0;

static void cb_btnRxIDColor(Fl_Button*, void*) {
  progdefaults.RxIDColor = fl_show_colormap(progdefaults.RxIDColor);
rxidcolor->color(progdefaults.RxIDColor);
rxidcolor->redraw();
rxid_selection_color();
progdefaults.changed = true;
}

Fl_Button *btnTxIDColor=(Fl_Button *)0;

static void cb_btnTxIDColor(Fl_Button*, void*) {
  progdefaults.TxIDColor = fl_show_colormap(progdefaults.TxIDColor);
txidcolor->color(progdefaults.TxIDColor);
txidcolor->redraw();
txid_selection_color();
progdefaults.changed = true;
}

Fl_Button *btnTuneColor=(Fl_Button *)0;

static void cb_btnTuneColor(Fl_Button*, void*) {
  progdefaults.TuneColor = fl_show_colormap(progdefaults.TuneColor);
tunecolor->color(progdefaults.TuneColor);
tunecolor->redraw();
tune_selection_color();
progdefaults.changed = true;
}

Fl_Button *btnLkColor=(Fl_Button *)0;

static void cb_btnLkColor(Fl_Button*, void*) {
  progdefaults.LkColor = fl_show_colormap(progdefaults.LkColor);
lockcolor->color(progdefaults.LkColor);
lockcolor->redraw();
xmtlock_selection_color();
progdefaults.changed = true;
}

Fl_Button *btnRevColor=(Fl_Button *)0;

static void cb_btnRevColor(Fl_Button*, void*) {
  progdefaults.RevColor = fl_show_colormap(progdefaults.RevColor);
revcolor->color(progdefaults.RevColor);
revcolor->redraw();
rev_selection_color();
progdefaults.changed = true;
}

Fl_Button *btnXmtColor=(Fl_Button *)0;

static void cb_btnXmtColor(Fl_Button*, void*) {
  progdefaults.XmtColor = fl_show_colormap(progdefaults.XmtColor);
xmtcolor->color(progdefaults.XmtColor);
xmtcolor->redraw();
xmtrcv_selection_color();
progdefaults.changed = true;
}

Fl_Button *btnAfcColor=(Fl_Button *)0;

static void cb_btnAfcColor(Fl_Button*, void*) {
  progdefaults.AfcColor = fl_show_colormap(progdefaults.AfcColor);
afccolor->color(progdefaults.AfcColor);
afccolor->redraw();
afc_selection_color();
progdefaults.changed = true;
}

Fl_Button *btnSql1Color=(Fl_Button *)0;

static void cb_btnSql1Color(Fl_Button*, void*) {
  progdefaults.Sql1Color = fl_show_colormap(progdefaults.Sql1Color);
sql1color->color(progdefaults.Sql1Color);
sql1color->redraw();
sql_selection_color();
progdefaults.changed = true;
}

Fl_Button *btnSql2Color=(Fl_Button *)0;

static void cb_btnSql2Color(Fl_Button*, void*) {
  progdefaults.Sql2Color = fl_show_colormap(progdefaults.Sql2Color);
sql2color->color(progdefaults.Sql2Color);
sql2color->redraw();
sql_selection_color();
progdefaults.changed = true;
}

Fl_Box *spotcolor=(Fl_Box *)0;

Fl_Box *rxidcolor=(Fl_Box *)0;

Fl_Box *txidcolor=(Fl_Box *)0;

Fl_Box *tunecolor=(Fl_Box *)0;

Fl_Box *lockcolor=(Fl_Box *)0;

Fl_Box *revcolor=(Fl_Box *)0;

Fl_Box *xmtcolor=(Fl_Box *)0;

Fl_Box *afccolor=(Fl_Box *)0;

Fl_Box *sql1color=(Fl_Box *)0;

Fl_Box *sql2color=(Fl_Box *)0;

Fl_Button *btnLowSignal=(Fl_Button *)0;

static void cb_btnLowSignal(Fl_Button*, void*) {
  progdefaults.LowSignal = fl_show_colormap(progdefaults.LowSignal);
lowcolor->color(progdefaults.LowSignal);
lowcolor->redraw();
progdefaults.changed = true;
}

Fl_Box *lowcolor=(Fl_Box *)0;

Fl_Button *btnHighSignal=(Fl_Button *)0;

static void cb_btnHighSignal(Fl_Button*, void*) {
  progdefaults.HighSignal = fl_show_colormap(progdefaults.HighSignal);
highcolor->color(progdefaults.HighSignal);
highcolor->redraw();
progdefaults.changed = true;
}

Fl_Box *highcolor=(Fl_Box *)0;

Fl_Button *btnNormalSignal=(Fl_Button *)0;

static void cb_btnNormalSignal(Fl_Button*, void*) {
  progdefaults.NormSignal = fl_show_colormap(progdefaults.NormSignal);
normalcolor->color(progdefaults.NormSignal);
normalcolor->redraw();
progdefaults.changed = true;
}

Fl_Box *normalcolor=(Fl_Box *)0;

Fl_Button *btnOverSignal=(Fl_Button *)0;

static void cb_btnOverSignal(Fl_Button*, void*) {
  progdefaults.OverSignal = fl_show_colormap(progdefaults.OverSignal);
overcolor->color(progdefaults.OverSignal);
overcolor->redraw();
progdefaults.changed = true;
}

Fl_Box *overcolor=(Fl_Box *)0;

Fl_Group *tabWaterfall=(Fl_Group *)0;

Fl_Tabs *tabsWaterfall=(Fl_Tabs *)0;

colorbox *WF_Palette=(colorbox *)0;

static void cb_WF_Palette(colorbox*, void*) {
  progdefaults.changed = true;
}

static void cb_btnColor(Fl_Button*, void*) {
  selectColor(0);
progdefaults.changed = true;
}

static void cb_btnColor1(Fl_Button*, void*) {
  selectColor(1);
progdefaults.changed = true;
}

static void cb_btnColor2(Fl_Button*, void*) {
  selectColor(2);
progdefaults.changed = true;
}

static void cb_btnColor3(Fl_Button*, void*) {
  selectColor(3);
progdefaults.changed = true;
}

static void cb_btnColor4(Fl_Button*, void*) {
  selectColor(4);
progdefaults.changed = true;
}

static void cb_btnColor5(Fl_Button*, void*) {
  selectColor(5);
progdefaults.changed = true;
}

static void cb_btnColor6(Fl_Button*, void*) {
  selectColor(6);
progdefaults.changed = true;
}

static void cb_btnColor7(Fl_Button*, void*) {
  selectColor(7);
progdefaults.changed = true;
}

Fl_Button *btnColor[9]={(Fl_Button *)0};

static void cb_btnColor8(Fl_Button*, void*) {
  selectColor(8);
progdefaults.changed = true;
}

Fl_Button *btnLoadPalette=(Fl_Button *)0;

static void cb_btnLoadPalette(Fl_Button*, void*) {
  loadPalette();
progdefaults.changed = true;
}

Fl_Button *btnSavePalette=(Fl_Button *)0;

static void cb_btnSavePalette(Fl_Button*, void*) {
  savePalette();
}

Fl_Check_Button *btnUseCursorLines=(Fl_Check_Button *)0;

static void cb_btnUseCursorLines(Fl_Check_Button* o, void*) {
  progdefaults.UseCursorLines = o->value();
if (o->value())
    btnCursorBWcolor->activate();
else
    btnCursorBWcolor->deactivate();
progdefaults.changed = true;
}

Fl_Button *btnCursorBWcolor=(Fl_Button *)0;

static void cb_btnCursorBWcolor(Fl_Button* o, void*) {
  if (fl_color_chooser("Cursor BW Lines",
  progdefaults.cursorLineRGBI.R, 
  progdefaults.cursorLineRGBI.G, 
  progdefaults.cursorLineRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.cursorLineRGBI.R,progdefaults.cursorLineRGBI.G,progdefaults.cursorLineRGBI.B));
o->redraw();
progdefaults.changed = true;
};
}

Fl_Check_Button *btnUseWideCursor=(Fl_Check_Button *)0;

static void cb_btnUseWideCursor(Fl_Check_Button* o, void*) {
  progdefaults.UseWideCursor = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnUseCursorCenterLine=(Fl_Check_Button *)0;

static void cb_btnUseCursorCenterLine(Fl_Check_Button* o, void*) {
  progdefaults.UseCursorCenterLine = o->value();
progdefaults.changed = true;
}

Fl_Button *btnCursorCenterLineColor=(Fl_Button *)0;

static void cb_btnCursorCenterLineColor(Fl_Button* o, void*) {
  if (fl_color_chooser("Cursor Center Line",
  progdefaults.cursorCenterRGBI.R, 
  progdefaults.cursorCenterRGBI.G, 
  progdefaults.cursorCenterRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.cursorCenterRGBI.R,progdefaults.cursorCenterRGBI.G,progdefaults.cursorCenterRGBI.B));
o->redraw();
progdefaults.changed = true;
};
}

Fl_Check_Button *btnUseWideCenter=(Fl_Check_Button *)0;

static void cb_btnUseWideCenter(Fl_Check_Button* o, void*) {
  progdefaults.UseWideCenter = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnUseBWTracks=(Fl_Check_Button *)0;

static void cb_btnUseBWTracks(Fl_Check_Button* o, void*) {
  progdefaults.UseBWTracks = o->value();
progdefaults.changed = true;
}

Fl_Button *btnBwTracksColor=(Fl_Button *)0;

static void cb_btnBwTracksColor(Fl_Button* o, void*) {
  if (fl_color_chooser("Track Lines",
  progdefaults.bwTrackRGBI.R, 
  progdefaults.bwTrackRGBI.G, 
  progdefaults.bwTrackRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.bwTrackRGBI.R,progdefaults.bwTrackRGBI.G,progdefaults.bwTrackRGBI.B));
o->redraw();
wf->redraw_marker();
progdefaults.changed = true;
};
}

Fl_Check_Button *btnUseWideTracks=(Fl_Check_Button *)0;

static void cb_btnUseWideTracks(Fl_Check_Button* o, void*) {
  progdefaults.UseWideTracks = o->value();
progdefaults.changed = true;
}

Fl_Button *btnNotchColor=(Fl_Button *)0;

static void cb_btnNotchColor(Fl_Button* o, void*) {
  if (fl_color_chooser("Notch Indicator",
  progdefaults.notchRGBI.R, 
  progdefaults.notchRGBI.G, 
  progdefaults.notchRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.notchRGBI.R,progdefaults.notchRGBI.G,progdefaults.notchRGBI.B));
o->redraw();
wf->redraw_marker();
progdefaults.changed = true;
};
}

Fl_Check_Button *chkShowAudioScale=(Fl_Check_Button *)0;

static void cb_chkShowAudioScale(Fl_Check_Button* o, void*) {
  progdefaults.wf_audioscale = o->value();
progdefaults.changed = true;
}

Fl_Button *btnWaterfallFont=(Fl_Button *)0;

static void cb_btnWaterfallFont(Fl_Button*, void*) {
  font_browser->fontNumber(progdefaults.WaterfallFontnbr);
font_browser->fontSize(progdefaults.WaterfallFontsize);
font_browser->fontColor(FL_FOREGROUND_COLOR);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback((Fl_Callback*)cbWaterfallFontBrowser);
font_browser->show();
}

Fl_Check_Button *btnViewXmtSignal=(Fl_Check_Button *)0;

static void cb_btnViewXmtSignal(Fl_Check_Button* o, void*) {
  progdefaults.viewXmtSignal=o->value();
progdefaults.changed = true;
}

Fl_Value_Slider2 *valTxMonitorLevel=(Fl_Value_Slider2 *)0;

static void cb_valTxMonitorLevel(Fl_Value_Slider2* o, void*) {
  progdefaults.TxMonitorLevel = o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntLowFreqCutoff=(Fl_Counter2 *)0;

static void cb_cntLowFreqCutoff(Fl_Counter2* o, void*) {
  progdefaults.LowFreqCutoff=(int)(o->value());
progdefaults.changed = true;
setwfrange();
}

Fl_Counter2 *valLatency=(Fl_Counter2 *)0;

static void cb_valLatency(Fl_Counter2* o, void*) {
  progdefaults.latency = (int)o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnWFaveraging=(Fl_Check_Button *)0;

static void cb_btnWFaveraging(Fl_Check_Button* o, void*) {
  progdefaults.WFaveraging = o->value();
progdefaults.changed = true;
}

Fl_Choice *mnuFFTPrefilter=(Fl_Choice *)0;

static void cb_mnuFFTPrefilter(Fl_Choice* o, void*) {
  progdefaults.wfPreFilter = o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntrWfwidth=(Fl_Counter2 *)0;

static void cb_cntrWfwidth(Fl_Counter2* o, void*) {
  progdefaults.HighFreqCutoff = (int)o->value();
progdefaults.changed = true;
setwfrange();
}

Fl_Counter2 *cntrWfheight=(Fl_Counter2 *)0;

static void cb_cntrWfheight(Fl_Counter2* o, void*) {
  progdefaults.wfheight = (int)o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnWaterfallHistoryDefault=(Fl_Check_Button *)0;

static void cb_btnWaterfallHistoryDefault(Fl_Check_Button* o, void*) {
  progdefaults.WaterfallHistoryDefault = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnWaterfallQSY=(Fl_Check_Button *)0;

static void cb_btnWaterfallQSY(Fl_Check_Button* o, void*) {
  progdefaults.WaterfallQSY = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnWaterfallClickInsert=(Fl_Check_Button *)0;

static void cb_btnWaterfallClickInsert(Fl_Check_Button* o, void*) {
  progdefaults.WaterfallClickInsert = o->value();
if (progdefaults.WaterfallClickInsert)
    inpWaterfallClickText->activate();
else
    inpWaterfallClickText->deactivate();
progdefaults.changed = true;
}

Fl_Input2 *inpWaterfallClickText=(Fl_Input2 *)0;

static void cb_inpWaterfallClickText(Fl_Input2* o, void*) {
  progdefaults.WaterfallClickText = o->value();
progdefaults.changed = true;
}

Fl_Choice *mnuWaterfallWheelAction=(Fl_Choice *)0;

static void cb_mnuWaterfallWheelAction(Fl_Choice* o, void*) {
  progdefaults.WaterfallWheelAction = o->value();
progdefaults.changed = true;
}

Fl_Group *tabModems=(Fl_Group *)0;

Fl_Tabs *tabsModems=(Fl_Tabs *)0;

Fl_Group *tabCW=(Fl_Group *)0;

Fl_Tabs *tabsCW=(Fl_Tabs *)0;

Fl_Value_Slider2 *sldrCWbandwidth=(Fl_Value_Slider2 *)0;

static void cb_sldrCWbandwidth(Fl_Value_Slider2* o, void*) {
  progdefaults.CWbandwidth = (int)o->value();
progdefaults.changed = true;
}

Fl_Value_Output *valCWrcvWPM=(Fl_Value_Output *)0;

static void cb_valCWrcvWPM(Fl_Value_Output*, void*) {
  progdefaults.changed = true;
}

Fl_Progress *prgsCWrcvWPM=(Fl_Progress *)0;

Fl_Check_Button *btnCWuseSOMdecoding=(Fl_Check_Button *)0;

static void cb_btnCWuseSOMdecoding(Fl_Check_Button* o, void*) {
  progdefaults.CWuseSOMdecoding = o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntLower=(Fl_Counter2 *)0;

static void cb_cntLower(Fl_Counter2* o, void*) {
  progdefaults.CWlower = o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntUpper=(Fl_Counter2 *)0;

static void cb_cntUpper(Fl_Counter2* o, void*) {
  progdefaults.CWupper = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnCWmfilt=(Fl_Check_Button *)0;

static void cb_btnCWmfilt(Fl_Check_Button* o, void*) {
  progdefaults.CWmfilt = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnCWuseFFTfilter=(Fl_Check_Button *)0;

static void cb_btnCWuseFFTfilter(Fl_Check_Button* o, void*) {
  progdefaults.CWuse_fft_filter = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnCWrcvTrack=(Fl_Check_Button *)0;

static void cb_btnCWrcvTrack(Fl_Check_Button* o, void*) {
  progdefaults.CWtrack = o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntCWrange=(Fl_Counter2 *)0;

static void cb_cntCWrange(Fl_Counter2* o, void*) {
  progdefaults.CWrange = (int)o->value();
progdefaults.changed = true;
}

Fl_Value_Slider2 *sldrCWxmtWPM=(Fl_Value_Slider2 *)0;

static void cb_sldrCWxmtWPM(Fl_Value_Slider2* o, void*) {
  progdefaults.CWspeed = (int)o->value();
cntCW_WPM->value(progdefaults.CWspeed);
progdefaults.changed = true;
sync_cw_parameters();
}

Fl_Counter2 *cntCWdefWPM=(Fl_Counter2 *)0;

static void cb_cntCWdefWPM(Fl_Counter2* o, void*) {
  progdefaults.defCWspeed = (int)o->value();
progdefaults.changed = true;
}

Fl_Counter *cntCWlowerlimit=(Fl_Counter *)0;

static void cb_cntCWlowerlimit(Fl_Counter* o, void*) {
  progdefaults.CWlowerlimit = (int)o->value();
progdefaults.changed = true;
sldrCWxmtWPM->minimum(progdefaults.CWlowerlimit);
sldrCWxmtWPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->redraw();
cntCWupperlimit->minimum(progdefaults.CWlowerlimit+20);
cntCW_WPM->minimum(progdefaults.CWlowerlimit);
}

Fl_Counter *cntCWupperlimit=(Fl_Counter *)0;

static void cb_cntCWupperlimit(Fl_Counter* o, void*) {
  progdefaults.CWupperlimit = (int)o->value();
progdefaults.changed = true;
sldrCWxmtWPM->maximum(progdefaults.CWupperlimit);
sldrCWxmtWPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->redraw();
cntCWlowerlimit->maximum(progdefaults.CWupperlimit-20);
cntCW_WPM->maximum(progdefaults.CWupperlimit);
}

Fl_Value_Slider2 *sldrCWfarnsworth=(Fl_Value_Slider2 *)0;

static void cb_sldrCWfarnsworth(Fl_Value_Slider2* o, void*) {
  progdefaults.CWfarnsworth = (int)o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnCWusefarnsworth=(Fl_Check_Button *)0;

static void cb_btnCWusefarnsworth(Fl_Check_Button* o, void*) {
  progdefaults.CWusefarnsworth=o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntCWweight=(Fl_Counter2 *)0;

static void cb_cntCWweight(Fl_Counter2* o, void*) {
  progdefaults.CWweight=(int)o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntCWdash2dot=(Fl_Counter2 *)0;

static void cb_cntCWdash2dot(Fl_Counter2* o, void*) {
  progdefaults.CWdash2dot=o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntCWrisetime=(Fl_Counter2 *)0;

static void cb_cntCWrisetime(Fl_Counter2* o, void*) {
  progdefaults.CWrisetime=o->value();
progdefaults.changed = true;
}

Fl_Choice *mnuQSKshape=(Fl_Choice *)0;

static void cb_mnuQSKshape(Fl_Choice* o, void*) {
  progdefaults.QSKshape = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnCWnarrow=(Fl_Check_Button *)0;

static void cb_btnCWnarrow(Fl_Check_Button* o, void*) {
  progdefaults.CWnarrow = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnQSK=(Fl_Check_Button *)0;

static void cb_btnQSK(Fl_Check_Button* o, void*) {
  progdefaults.QSK = o->value();
btnQSK2->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  if (progdefaults.mono_audio) {
    progdefaults.mono_audio = false;
    chkForceMono->value(0);
    resetSoundCard();
  }
};
}

Fl_Counter2 *cntPreTiming=(Fl_Counter2 *)0;

static void cb_cntPreTiming(Fl_Counter2* o, void*) {
  progdefaults.CWpre=o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntPostTiming=(Fl_Counter2 *)0;

static void cb_cntPostTiming(Fl_Counter2* o, void*) {
  progdefaults.CWpost=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnQSKadjust=(Fl_Check_Button *)0;

static void cb_btnQSKadjust(Fl_Check_Button* o, void*) {
  progdefaults.QSKadjust = o->value();
}

Fl_Choice *mnuTestChar=(Fl_Choice *)0;

static void cb_mnuTestChar(Fl_Choice* o, void*) {
  progdefaults.TestChar = o->value();
}

Fl_Check_Button *btnCW_use_paren=(Fl_Check_Button *)0;

static void cb_btnCW_use_paren(Fl_Check_Button* o, void*) {
  progdefaults.CW_use_paren=o->value();
progdefaults.changed = true;
}

static void cb_mnu_prosign(Fl_Choice* o, void*) {
  int c = o->value();
for (int i = 0; i < 9; i++)
  if (mnu_prosign[i]->value() == c) {
    mnu_prosign[i]->value(11);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->value(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[0] = ps[c];
progdefaults.changed = true;
}

static void cb_mnu_prosign1(Fl_Choice* o, void*) {
  int c = o->value();
for (int i = 0; i < 9; i++)
  if (mnu_prosign[i]->value() == c) {
    mnu_prosign[i]->value(11);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->value(c); 
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[1] = ps[c];
progdefaults.changed = true;
}

static void cb_mnu_prosign2(Fl_Choice* o, void*) {
  int c = o->value();
for (int i = 0; i < 9; i++)
  if (mnu_prosign[i]->value() == c) {
    mnu_prosign[i]->value(11);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->value(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[2] = ps[c];
progdefaults.changed = true;
}

static void cb_mnu_prosign3(Fl_Choice* o, void*) {
  int c = o->value();
for (int i = 0; i < 9; i++)
  if (mnu_prosign[i]->value() == c) {
    mnu_prosign[i]->value(11);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->value(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[3] = ps[c];
progdefaults.changed = true;
}

static void cb_mnu_prosign4(Fl_Choice* o, void*) {
  int c = o->value();
for (int i = 0; i < 9; i++)
  if (mnu_prosign[i]->value() == c) {
    mnu_prosign[i]->value(11);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->value(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[4] = ps[c];
progdefaults.changed = true;
}

static void cb_mnu_prosign5(Fl_Choice* o, void*) {
  int c = o->value();
for (int i = 0; i < 9; i++)
  if (mnu_prosign[i]->value() == c) {
    mnu_prosign[i]->value(11);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->value(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[5] = ps[c];
progdefaults.changed = true;
}

static void cb_mnu_prosign6(Fl_Choice* o, void*) {
  int c = o->value();
for (int i = 0; i < 9; i++)
  if (mnu_prosign[i]->value() == c) {
    mnu_prosign[i]->value(11);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->value(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[6] = ps[c];
progdefaults.changed = true;
}

static void cb_mnu_prosign7(Fl_Choice* o, void*) {
  int c = o->value();
for (int i = 0; i < 9; i++)
  if (mnu_prosign[i]->value() == c) {
    mnu_prosign[i]->value(11);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->value(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[7] = ps[c];
progdefaults.changed = true;
}

Fl_Choice *mnu_prosign[9]={(Fl_Choice *)0};

static void cb_mnu_prosign8(Fl_Choice* o, void*) {
  int c = o->value();
for (int i = 0; i < 9; i++)
  if (mnu_prosign[i]->value() == c) {
    mnu_prosign[i]->value(11);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->value(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[8] = ps[c];
progdefaults.changed = true;
}

Fl_Group *tabDomEX=(Fl_Group *)0;

Fl_Input2 *txtSecondary=(Fl_Input2 *)0;

static void cb_txtSecondary(Fl_Input2* o, void*) {
  progdefaults.secText = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *valDominoEX_FILTER=(Fl_Check_Button *)0;

static void cb_valDominoEX_FILTER(Fl_Check_Button* o, void*) {
  progdefaults.DOMINOEX_FILTER = o->value();
resetDOMEX();
progdefaults.changed = true;
}

Fl_Counter2 *valDominoEX_BW=(Fl_Counter2 *)0;

static void cb_valDominoEX_BW(Fl_Counter2* o, void*) {
  progdefaults.DOMINOEX_BW = o->value();
resetDOMEX();
progdefaults.changed = true;
}

Fl_Check_Button *chkDominoEX_FEC=(Fl_Check_Button *)0;

static void cb_chkDominoEX_FEC(Fl_Check_Button* o, void*) {
  progdefaults.DOMINOEX_FEC = o->value();
progdefaults.changed = true;
}

Fl_Value_Slider2 *valDomCWI=(Fl_Value_Slider2 *)0;

static void cb_valDomCWI(Fl_Value_Slider2* o, void*) {
  progdefaults.DomCWI = o->value();
progdefaults.changed = true;
}

Fl_Counter2 *valDominoEX_PATHS=(Fl_Counter2 *)0;

static void cb_valDominoEX_PATHS(Fl_Counter2* o, void*) {
  progdefaults.DOMINOEX_PATHS = (int)o->value();
progdefaults.changed = true;
}

Fl_Group *tabFeld=(Fl_Group *)0;

Fl_Choice *selHellFont=(Fl_Choice *)0;

static void cb_selHellFont(Fl_Choice* o, void*) {
  progdefaults.feldfontnbr=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnBlackboard=(Fl_Check_Button *)0;

static void cb_btnBlackboard(Fl_Check_Button* o, void*) {
  progdefaults.HellBlackboard=o->value();
progdefaults.changed = true;
}

Fl_Spinner2 *valHellXmtWidth=(Fl_Spinner2 *)0;

static void cb_valHellXmtWidth(Fl_Spinner2* o, void*) {
  progdefaults.HellXmtWidth=(int)o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnHellRcvWidth=(Fl_Check_Button *)0;

static void cb_btnHellRcvWidth(Fl_Check_Button* o, void*) {
  progdefaults.HellRcvWidth=o->value();
progdefaults.changed = true;
}

Fl_Choice *mnuHellPulse=(Fl_Choice *)0;

static void cb_mnuHellPulse(Fl_Choice* o, void*) {
  progdefaults.HellPulseFast = o->value();
progdefaults.changed = true;
}

Fl_Value_Slider2 *sldrHellBW=(Fl_Value_Slider2 *)0;

static void cb_sldrHellBW(Fl_Value_Slider2*, void*) {
  progdefaults.HELL_BW = sldrHellBW->value();
}

Fl_Check_Button *btnFeldHellIdle=(Fl_Check_Button *)0;

static void cb_btnFeldHellIdle(Fl_Check_Button* o, void*) {
  progdefaults.HellXmtIdle=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnHellXmtWidth=(Fl_Check_Button *)0;

static void cb_btnHellXmtWidth(Fl_Check_Button* o, void*) {
  progdefaults.HellXmtWidth=o->value();
progdefaults.changed = true;
}

Fl_Group *tabMT63=(Fl_Group *)0;

Fl_Check_Button *btnMT63_8bit=(Fl_Check_Button *)0;

static void cb_btnMT63_8bit(Fl_Check_Button* o, void*) {
  progdefaults.mt63_8bit = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnMT63_rx_integration=(Fl_Check_Button *)0;

static void cb_btnMT63_rx_integration(Fl_Check_Button* o, void*) {
  progdefaults.mt63_rx_integration = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnMT63_usetones=(Fl_Check_Button *)0;

static void cb_btnMT63_usetones(Fl_Check_Button* o, void*) {
  progdefaults.mt63_usetones = o->value();
if (!o->value()) {
    btnMT63_upper_lower->value(0);
    btnMT63_upper_lower->do_callback();
    btnMT63_upper_lower->deactivate();
}
else
    btnMT63_upper_lower->activate();
progdefaults.changed = true;
}

Fl_Check_Button *btnMT63_upper_lower=(Fl_Check_Button *)0;

static void cb_btnMT63_upper_lower(Fl_Check_Button* o, void*) {
  progdefaults.mt63_twotones = o->value();
progdefaults.changed = true;
}

Fl_Spinner2 *MT63_tone_duration=(Fl_Spinner2 *)0;

static void cb_MT63_tone_duration(Fl_Spinner2* o, void*) {
  progdefaults.mt63_tone_duration=(int)o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnMT63_at500=(Fl_Check_Button *)0;

static void cb_btnMT63_at500(Fl_Check_Button* o, void*) {
  progdefaults.mt63_at500 = !o->value();
progdefaults.changed = true;
}

Fl_Group *tabOlivia=(Fl_Group *)0;

Fl_Choice *mnuOlivia_Bandwidth=(Fl_Choice *)0;

static void cb_mnuOlivia_Bandwidth(Fl_Choice* o, void*) {
  progdefaults.oliviabw = o->value();
set_olivia_default_integ();
resetOLIVIA();
progdefaults.changed = true;
}

Fl_Choice *mnuOlivia_Tones=(Fl_Choice *)0;

static void cb_mnuOlivia_Tones(Fl_Choice* o, void*) {
  progdefaults.oliviatones = o->value();
set_olivia_default_integ();
resetOLIVIA();
progdefaults.changed = true;
}

Fl_Counter2 *cntOlivia_smargin=(Fl_Counter2 *)0;

static void cb_cntOlivia_smargin(Fl_Counter2* o, void*) {
  progdefaults.oliviasmargin = (int)(o->value());
resetOLIVIA();
progdefaults.changed = true;
}

Fl_Counter2 *cntOlivia_sinteg=(Fl_Counter2 *)0;

static void cb_cntOlivia_sinteg(Fl_Counter2* o, void*) {
  progdefaults.oliviasinteg = (int)(o->value());
resetOLIVIA();
progdefaults.changed = true;
}

Fl_Check_Button *btn_olivia_reset_fec=(Fl_Check_Button *)0;

static void cb_btn_olivia_reset_fec(Fl_Check_Button* o, void*) {
  progdefaults.olivia_reset_fec = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnOlivia_8bit=(Fl_Check_Button *)0;

static void cb_btnOlivia_8bit(Fl_Check_Button* o, void*) {
  progdefaults.olivia8bit = o->value();
progdefaults.changed = true;
}

Fl_Group *tabContestia=(Fl_Group *)0;

Fl_Choice *mnuContestia_Bandwidth=(Fl_Choice *)0;

static void cb_mnuContestia_Bandwidth(Fl_Choice* o, void*) {
  progdefaults.contestiabw = o->value();
set_contestia_default_integ();
resetCONTESTIA();
progdefaults.changed = true;
}

Fl_Choice *mnuContestia_Tones=(Fl_Choice *)0;

static void cb_mnuContestia_Tones(Fl_Choice* o, void*) {
  progdefaults.contestiatones = o->value();
set_contestia_default_integ();
resetCONTESTIA();
progdefaults.changed = true;
}

Fl_Counter2 *cntContestia_smargin=(Fl_Counter2 *)0;

static void cb_cntContestia_smargin(Fl_Counter2* o, void*) {
  progdefaults.contestiasmargin = (int)(o->value());
resetCONTESTIA();
progdefaults.changed = true;
}

Fl_Counter2 *cntContestia_sinteg=(Fl_Counter2 *)0;

static void cb_cntContestia_sinteg(Fl_Counter2* o, void*) {
  progdefaults.contestiasinteg = (int)(o->value());
resetCONTESTIA();
progdefaults.changed = true;
}

Fl_Check_Button *btn_contestia_reset_fec=(Fl_Check_Button *)0;

static void cb_btn_contestia_reset_fec(Fl_Check_Button* o, void*) {
  progdefaults.contestia_reset_fec = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnContestia_8bit=(Fl_Check_Button *)0;

static void cb_btnContestia_8bit(Fl_Check_Button* o, void*) {
  progdefaults.contestia8bit = o->value();
progdefaults.changed = true;
}

Fl_Group *tabPSK=(Fl_Group *)0;

Fl_Tabs *tabsPSK=(Fl_Tabs *)0;

Fl_Counter2 *cntSearchRange=(Fl_Counter2 *)0;

static void cb_cntSearchRange(Fl_Counter2* o, void*) {
  progdefaults.SearchRange = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;
}

Fl_Counter2 *cntACQsn=(Fl_Counter2 *)0;

static void cb_cntACQsn(Fl_Counter2* o, void*) {
  progdefaults.ACQsn = o->value();
progdefaults.changed = true;
}

Fl_Choice *mnuPSKStatusTimeout=(Fl_Choice *)0;

static void cb_mnuPSKStatusTimeout(Fl_Choice* o, void*) {
  progdefaults.StatusDim = o->value();
progdefaults.changed = true;
}

static void cb_seconds(Fl_Counter2* o, void*) {
  progdefaults.StatusTimeout = (int)(o->value());
progdefaults.changed = true;
}

Fl_Check_Button *btnEnablePSKbrowsing=(Fl_Check_Button *)0;

static void cb_btnEnablePSKbrowsing(Fl_Check_Button* o, void*) {
  progdefaults.pskbrowser_on = o->value();
progdefaults.changed = true;
}

Fl_Group *tabRTTY=(Fl_Group *)0;

Fl_Tabs *tabsRTTY=(Fl_Tabs *)0;

Fl_Choice *mnuRTTYAFCSpeed=(Fl_Choice *)0;

static void cb_mnuRTTYAFCSpeed(Fl_Choice* o, void*) {
  progdefaults.rtty_afcspeed = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chkUOSrx=(Fl_Check_Button *)0;

static void cb_chkUOSrx(Fl_Check_Button* o, void*) {
  progdefaults.UOSrx=o->value();
progdefaults.changed = true;
}

Fl_Value_Input *rtty_rx_shape=(Fl_Value_Input *)0;

static void cb_rtty_rx_shape(Fl_Value_Input* o, void*) {
  progdefaults.rtty_filter = o->value();
progStatus.rtty_filter_changed = true;
progdefaults.changed = true;
}

static void cb_btnRxTones(Fl_Check_Button* o, void*) {
  if (o->value()) {
  btnRxTones[1]->value(0);
  btnRxTones[2]->value(0);
  progdefaults.rtty_cwi = 0;
};
}

static void cb_btnRxTones1(Fl_Check_Button* o, void*) {
  if (o->value()) {
  btnRxTones[0]->value(0);
  btnRxTones[2]->value(0);
  progdefaults.rtty_cwi = 1;
};
}

Fl_Check_Button *btnRxTones[3]={(Fl_Check_Button *)0};

static void cb_btnRxTones2(Fl_Check_Button* o, void*) {
  if (o->value()) {
  btnRxTones[1]->value(0);
  btnRxTones[0]->value(0);
  progdefaults.rtty_cwi = 2;
};
}

Fl_Check_Button *btnPreferXhairScope=(Fl_Check_Button *)0;

static void cb_btnPreferXhairScope(Fl_Check_Button* o, void*) {
  progdefaults.PreferXhairScope=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chk_true_scope=(Fl_Check_Button *)0;

static void cb_chk_true_scope(Fl_Check_Button* o, void*) {
  progdefaults.true_scope=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chk_useMARKfreq=(Fl_Check_Button *)0;

static void cb_chk_useMARKfreq(Fl_Check_Button* o, void*) {
  progdefaults.useMARKfreq=o->value();
progdefaults.changed = true;
}

Fl_Button *btnRTTY_mark_color=(Fl_Button *)0;

static void cb_btnRTTY_mark_color(Fl_Button* o, void*) {
  if (fl_color_chooser("MARK freq track",
  progdefaults.rttymarkRGBI.R, 
  progdefaults.rttymarkRGBI.G, 
  progdefaults.rttymarkRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.rttymarkRGBI.R,progdefaults.rttymarkRGBI.G,progdefaults.rttymarkRGBI.B));
o->redraw();
wf->redraw_marker();
progdefaults.changed = true;
};
}

Fl_Choice *selShift=(Fl_Choice *)0;

static void cb_selShift(Fl_Choice* o, void*) {
  progdefaults.rtty_shift = o->value();
if (progdefaults.rtty_shift == o->size() - 2) {
    progdefaults.rtty_shift = -1;
    selCustomShift->activate();
}
else
    selCustomShift->deactivate();
resetRTTY();
progdefaults.changed = true;
}

Fl_Counter2 *selCustomShift=(Fl_Counter2 *)0;

static void cb_selCustomShift(Fl_Counter2* o, void*) {
  progdefaults.rtty_custom_shift = o->value();
resetRTTY();
progdefaults.changed = true;
}

Fl_Choice *selBaud=(Fl_Choice *)0;

static void cb_selBaud(Fl_Choice* o, void*) {
  progdefaults.rtty_baud = o->value();
resetRTTY();
progdefaults.changed = true;
}

Fl_Choice *selBits=(Fl_Choice *)0;

static void cb_selBits(Fl_Choice* o, void*) {
  progdefaults.rtty_bits = o->value();
selParity->do_callback();
}

Fl_Choice *selParity=(Fl_Choice *)0;

static void cb_selParity(Fl_Choice* o, void*) {
  if (progdefaults.rtty_bits == 0)
  o->value(progdefaults.rtty_parity = RTTY_PARITY_NONE);
else
  progdefaults.rtty_parity = o->value();
resetRTTY();
progdefaults.changed = true;
}

Fl_Choice *selStopBits=(Fl_Choice *)0;

static void cb_selStopBits(Fl_Choice* o, void*) {
  progdefaults.rtty_stop = o->value();
resetRTTY();
progdefaults.changed = true;
}

Fl_Check_Button *btnAUTOCRLF=(Fl_Check_Button *)0;

static void cb_btnAUTOCRLF(Fl_Check_Button* o, void*) {
  progdefaults.rtty_autocrlf = o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntrAUTOCRLF=(Fl_Counter2 *)0;

static void cb_cntrAUTOCRLF(Fl_Counter2* o, void*) {
  progdefaults.rtty_autocount = (int)o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnCRCRLF=(Fl_Check_Button *)0;

static void cb_btnCRCRLF(Fl_Check_Button* o, void*) {
  progdefaults.rtty_crcrlf = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chkUOStx=(Fl_Check_Button *)0;

static void cb_chkUOStx(Fl_Check_Button* o, void*) {
  progdefaults.UOStx=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chkPseudoFSK=(Fl_Check_Button *)0;

static void cb_chkPseudoFSK(Fl_Check_Button* o, void*) {
  progdefaults.PseudoFSK = o->value();
chkPseudoFSK2->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  if (progdefaults.mono_audio) {
    progdefaults.mono_audio = false;
    chkForceMono->value(0);
    resetSoundCard();
  }
};
}

Fl_Check_Button *btnSynopAdifDecoding=(Fl_Check_Button *)0;

static void cb_btnSynopAdifDecoding(Fl_Check_Button* o, void*) {
  progdefaults.SynopAdifDecoding=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnSynopKmlDecoding=(Fl_Check_Button *)0;

static void cb_btnSynopKmlDecoding(Fl_Check_Button* o, void*) {
  progdefaults.SynopKmlDecoding=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnSynopInterleaved=(Fl_Check_Button *)0;

static void cb_btnSynopInterleaved(Fl_Check_Button* o, void*) {
  progdefaults.SynopInterleaved=o->value();
progdefaults.changed = true;
}

Fl_Group *tabTHOR=(Fl_Group *)0;

Fl_Input2 *txtTHORSecondary=(Fl_Input2 *)0;

static void cb_txtTHORSecondary(Fl_Input2* o, void*) {
  progdefaults.THORsecText = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *valTHOR_FILTER=(Fl_Check_Button *)0;

static void cb_valTHOR_FILTER(Fl_Check_Button* o, void*) {
  progdefaults.THOR_FILTER = o->value();
resetTHOR();
progdefaults.changed = true;
}

Fl_Counter2 *valTHOR_BW=(Fl_Counter2 *)0;

static void cb_valTHOR_BW(Fl_Counter2* o, void*) {
  progdefaults.THOR_BW = o->value();
resetTHOR();
progdefaults.changed = true;
}

Fl_Value_Slider2 *valThorCWI=(Fl_Value_Slider2 *)0;

static void cb_valThorCWI(Fl_Value_Slider2* o, void*) {
  progdefaults.ThorCWI = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *valTHOR_PREAMBLE=(Fl_Check_Button *)0;

static void cb_valTHOR_PREAMBLE(Fl_Check_Button* o, void*) {
  progdefaults.THOR_PREAMBLE = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *valTHOR_SOFTSYMBOLS=(Fl_Check_Button *)0;

static void cb_valTHOR_SOFTSYMBOLS(Fl_Check_Button* o, void*) {
  progdefaults.THOR_SOFTSYMBOLS = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *valTHOR_SOFTBITS=(Fl_Check_Button *)0;

static void cb_valTHOR_SOFTBITS(Fl_Check_Button* o, void*) {
  progdefaults.THOR_SOFTBITS = o->value();
progdefaults.changed = true;
}

Fl_Counter2 *valTHOR_PATHS=(Fl_Counter2 *)0;

static void cb_valTHOR_PATHS(Fl_Counter2* o, void*) {
  progdefaults.THOR_PATHS = (int)o->value();
progdefaults.changed = true;
}

Fl_Group *tabNavtex=(Fl_Group *)0;

Fl_Check_Button *btnNvtxAdifLog=(Fl_Check_Button *)0;

static void cb_btnNvtxAdifLog(Fl_Check_Button* o, void*) {
  progdefaults.NVTX_AdifLog=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnNvtxKmlLog=(Fl_Check_Button *)0;

static void cb_btnNvtxKmlLog(Fl_Check_Button* o, void*) {
  progdefaults.NVTX_KmlLog=o->value();
progdefaults.changed = true;
}

Fl_Group *tabWefax=(Fl_Group *)0;

Fl_Check_Button *btnWefaxAdifLog=(Fl_Check_Button *)0;

static void cb_btnWefaxAdifLog(Fl_Check_Button* o, void*) {
  progdefaults.WEFAX_AdifLog=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnWefaxEmbeddedGui=(Fl_Check_Button *)0;

static void cb_btnWefaxEmbeddedGui(Fl_Check_Button* o, void*) {
  progdefaults.WEFAX_EmbeddedGui=o->value();
progdefaults.changed = true;
}

Fl_Value_Input2 *btnWefaxShift=(Fl_Value_Input2 *)0;

static void cb_btnWefaxShift(Fl_Value_Input2* o, void*) {
  if( o->value() > 900 ) { o->value(900); return; }
if( o->value() < 750 ) { o->value(750); return; }
progdefaults.WEFAX_Shift=o->value();
progdefaults.changed = true;
}

Fl_Value_Input2 *btnWefaxMaxRows=(Fl_Value_Input2 *)0;

static void cb_btnWefaxMaxRows(Fl_Value_Input2* o, void*) {
  if(o->value() > 10000 ) { o->value(10000); return ; }
if(o->value() < 1000 ) { o->value(1000); return ; }
progdefaults.WEFAX_MaxRows=o->value();
progdefaults.changed = true;
}

Fl_Input *btnWefaxSaveDir=(Fl_Input *)0;

static void cb_btnWefaxSaveDir(Fl_Input* o, void*) {
  progdefaults.wefax_save_dir=o->value();
progdefaults.changed = true;
}

Fl_Button *btnSelectFaxDestDir=(Fl_Button *)0;

static void cb_btnSelectFaxDestDir(Fl_Button*, void*) {
  Fl_File_Chooser *fc = new Fl_File_Chooser(".",NULL,Fl_File_Chooser::DIRECTORY,"Input File");
fc->callback(WefaxDestDirSet);
fc->show();
}

Fl_Check_Button *btnWefaxHideTx=(Fl_Check_Button *)0;

static void cb_btnWefaxHideTx(Fl_Check_Button* o, void*) {
  progdefaults.WEFAX_HideTx=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnWefaxSaveMonochrome=(Fl_Check_Button *)0;

static void cb_btnWefaxSaveMonochrome(Fl_Check_Button* o, void*) {
  progdefaults.WEFAX_SaveMonochrome=o->value();
progdefaults.changed = true;
}

Fl_Group *tabRig=(Fl_Group *)0;

Fl_Tabs *tabsRig=(Fl_Tabs *)0;

Fl_Check_Button *btnPTTrightchannel=(Fl_Check_Button *)0;

static void cb_btnPTTrightchannel(Fl_Check_Button* o, void*) {
  progdefaults.PTTrightchannel = o->value();
btnPTTrightchannel2->value(o->value());
if (o->value()) {
  progdefaults.QSK = false;
  btnQSK->value(0);
  progdefaults.PseudoFSK = false;
  chkPseudoFSK->value(0);
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  if (progdefaults.mono_audio) {
    progdefaults.mono_audio = false;
    chkForceMono->value(0);
    resetSoundCard();
  }
}
progdefaults.changed = true;
}

Fl_Group *grpHWPTT=(Fl_Group *)0;

Fl_Input_Choice *inpTTYdev=(Fl_Input_Choice *)0;

static void cb_inpTTYdev(Fl_Input_Choice*, void*) {
  btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;
}

Fl_Round_Button *btnRTSptt=(Fl_Round_Button *)0;

static void cb_btnRTSptt(Fl_Round_Button*, void*) {
  btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;
}

Fl_Round_Button *btnRTSplusV=(Fl_Round_Button *)0;

static void cb_btnRTSplusV(Fl_Round_Button*, void*) {
  btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;
}

Fl_Round_Button *btnDTRptt=(Fl_Round_Button *)0;

static void cb_btnDTRptt(Fl_Round_Button*, void*) {
  btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;
}

Fl_Round_Button *btnDTRplusV=(Fl_Round_Button *)0;

static void cb_btnDTRplusV(Fl_Round_Button*, void*) {
  btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;
}

Fl_Button *btnInitHWPTT=(Fl_Button *)0;

static void cb_btnInitHWPTT(Fl_Button* o, void*) {
  progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
progdefaults.changed = true;
}

Fl_Round_Button *btnTTYptt=(Fl_Round_Button *)0;

static void cb_btnTTYptt(Fl_Round_Button* o, void*) {
  btnUsePPortPTT->value(false);
btnUseUHrouterPTT->value(false);

progdefaults.TTYptt = o->value();
progdefaults.UsePPortPTT = false;
progdefaults.UseUHrouterPTT = false;
btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;
}

Fl_Round_Button *btnUsePPortPTT=(Fl_Round_Button *)0;

static void cb_btnUsePPortPTT(Fl_Round_Button* o, void*) {
  btnTTYptt->value(false);
btnUseUHrouterPTT->value(false);

progdefaults.TTYptt = false;
progdefaults.UsePPortPTT = o->value();
progdefaults.UseUHrouterPTT = false;
btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;
}

Fl_Round_Button *btnUseUHrouterPTT=(Fl_Round_Button *)0;

static void cb_btnUseUHrouterPTT(Fl_Round_Button* o, void*) {
  btnTTYptt->value(false);
btnUsePPortPTT->value(false);

progdefaults.TTYptt = false;
progdefaults.UsePPortPTT = false;
progdefaults.UseUHrouterPTT = o->value();
btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;
}

Fl_Group *grpPTTdelays=(Fl_Group *)0;

Fl_Counter *cntPTT_on_delay=(Fl_Counter *)0;

static void cb_cntPTT_on_delay(Fl_Counter* o, void*) {
  progdefaults.PTT_on_delay = o->value();
progdefaults.changed = true;
}

Fl_Counter *cntPTT_off_delay=(Fl_Counter *)0;

static void cb_cntPTT_off_delay(Fl_Counter* o, void*) {
  progdefaults.PTT_off_delay = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chkUSERIGCAT=(Fl_Check_Button *)0;

static void cb_chkUSERIGCAT(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
  chkUSEHAMLIB->value(0);
  chkUSEXMLRPC->value(0);
  progdefaults.chkUSEHAMLIBis = false;
  progdefaults.chkUSERIGCATis = true;
  progdefaults.chkUSEXMLRPCis = false;
  } else {
  progdefaults.chkUSERIGCATis = false;
  }
btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw();
}

Fl_Group *grpRigCAT=(Fl_Group *)0;

Fl_Output *txtXmlRigFilename=(Fl_Output *)0;

Fl_Button *btnSelectRigXmlFile=(Fl_Button *)0;

static void cb_btnSelectRigXmlFile(Fl_Button*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
selectRigXmlFilename();
}

Fl_Input_Choice *inpXmlRigDevice=(Fl_Input_Choice *)0;

static void cb_inpXmlRigDevice(Fl_Input_Choice*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Value_Input2 *cntRigCatRetries=(Fl_Value_Input2 *)0;

static void cb_cntRigCatRetries(Fl_Value_Input2*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Value_Input2 *cntRigCatTimeout=(Fl_Value_Input2 *)0;

static void cb_cntRigCatTimeout(Fl_Value_Input2*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Value_Input2 *cntRigCatWait=(Fl_Value_Input2 *)0;

static void cb_cntRigCatWait(Fl_Value_Input2*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Choice *mnuXmlRigBaudrate=(Fl_Choice *)0;

static void cb_mnuXmlRigBaudrate(Fl_Choice*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Counter2 *valRigCatStopbits=(Fl_Counter2 *)0;

static void cb_valRigCatStopbits(Fl_Counter2*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw();
btnRevertRIGCAT->activate();
}

Fl_Button *btnInitRIGCAT=(Fl_Button *)0;

static void cb_btnInitRIGCAT(Fl_Button* o, void*) {
  progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
progdefaults.changed = true;
}

Fl_Check_Button *btnRigCatEcho=(Fl_Check_Button *)0;

static void cb_btnRigCatEcho(Fl_Check_Button*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
progdefaults.changed = true;
btnRevertRIGCAT->activate();
}

Fl_Round_Button *btnRigCatCMDptt=(Fl_Round_Button *)0;

static void cb_btnRigCatCMDptt(Fl_Round_Button* o, void*) {
  if (o->value()== 1) {
  btnRigCatRTSptt->value(0);
  btnRigCatDTRptt->value(0);
}
  
btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw();
btnRevertRIGCAT->activate();
}

Fl_Round_Button *btnRigCatRTSptt=(Fl_Round_Button *)0;

static void cb_btnRigCatRTSptt(Fl_Round_Button* o, void*) {
  if (o->value() == 1) {
//  btnRigCatDTRptt->value(0);
  btnRigCatCMDptt->value(0);
}

btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Round_Button *btnRigCatDTRptt=(Fl_Round_Button *)0;

static void cb_btnRigCatDTRptt(Fl_Round_Button* o, void*) {
  if (o->value() == 1) {
//  btnRigCatRTSptt->value(0);
  btnRigCatCMDptt->value(0);
}

btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Check_Button *btnRigCatRTSplus=(Fl_Check_Button *)0;

static void cb_btnRigCatRTSplus(Fl_Check_Button*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Check_Button *btnRigCatDTRplus=(Fl_Check_Button *)0;

static void cb_btnRigCatDTRplus(Fl_Check_Button*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Check_Button *chkRigCatRTSCTSflow=(Fl_Check_Button *)0;

static void cb_chkRigCatRTSCTSflow(Fl_Check_Button*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Check_Button *chk_restore_tio=(Fl_Check_Button *)0;

static void cb_chk_restore_tio(Fl_Check_Button*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Button *btnRevertRIGCAT=(Fl_Button *)0;

static void cb_btnRevertRIGCAT(Fl_Button*, void*) {
  btnInitRIGCAT->labelcolor(FL_FOREGROUND_COLOR);
btnInitRIGCAT->redraw_label();
rigCAT_restore_defaults();
}

Fl_Check_Button *chkRigCatVSP=(Fl_Check_Button *)0;

static void cb_chkRigCatVSP(Fl_Check_Button*, void*) {
  btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
btnRevertRIGCAT->activate();
}

Fl_Group *tabHamlib=(Fl_Group *)0;

Fl_Check_Button *chkUSEHAMLIB=(Fl_Check_Button *)0;

static void cb_chkUSEHAMLIB(Fl_Check_Button* o, void*) {
  progdefaults.chkUSEHAMLIBis = o->value();
if (o->value() == 1) {
  chkUSERIGCAT->value(0);
  chkUSEXMLRPC->value(0);
  progdefaults.chkUSERIGCATis = false;
  progdefaults.chkUSEXMLRPCis = false;
}
  
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw();
progdefaults.changed = true;
}

Fl_Group *grpHamlib=(Fl_Group *)0;

Fl_ComboBox *cboHamlibRig=(Fl_ComboBox *)0;

static void cb_cboHamlibRig(Fl_ComboBox*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
#if USE_HAMLIB
hamlib_get_defaults();
#endif
}

Fl_Input_Choice *inpRIGdev=(Fl_Input_Choice *)0;

static void cb_inpRIGdev(Fl_Input_Choice*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Value_Input2 *cntHamlibRetries=(Fl_Value_Input2 *)0;

static void cb_cntHamlibRetries(Fl_Value_Input2*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Value_Input2 *cntHamlibTimeout=(Fl_Value_Input2 *)0;

static void cb_cntHamlibTimeout(Fl_Value_Input2*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Value_Input2 *cntHamlibWriteDelay=(Fl_Value_Input2 *)0;

static void cb_cntHamlibWriteDelay(Fl_Value_Input2*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Value_Input2 *cntHamlibWait=(Fl_Value_Input2 *)0;

static void cb_cntHamlibWait(Fl_Value_Input2*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Choice *mnuBaudRate=(Fl_Choice *)0;

static void cb_mnuBaudRate(Fl_Choice*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Counter2 *valHamRigStopbits=(Fl_Counter2 *)0;

static void cb_valHamRigStopbits(Fl_Counter2* o, void*) {
  progdefaults.HamRigStopbits = (int)o->value();
btnRevertHAMLIB->activate();
progdefaults.changed = true;
}

Fl_Counter2 *cntHamlibTimeout0=(Fl_Counter2 *)0;

static void cb_cntHamlibTimeout0(Fl_Counter2* o, void*) {
  progdefaults.HamlibTimeout = (int)o->value();
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
}

Fl_Input2 *inpHamlibConfig=(Fl_Input2 *)0;

static void cb_inpHamlibConfig(Fl_Input2*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Button *btnInitHAMLIB=(Fl_Button *)0;

static void cb_btnInitHAMLIB(Fl_Button* o, void*) {
  progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
//btnRevertHAMLIB->activate();
progdefaults.changed = true;
}

Fl_Choice *mnuSideband=(Fl_Choice *)0;

static void cb_mnuSideband(Fl_Choice*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Round_Button *btnHamlibCMDptt=(Fl_Round_Button *)0;

static void cb_btnHamlibCMDptt(Fl_Round_Button*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Check_Button *btnHamlibDTRplus=(Fl_Check_Button *)0;

static void cb_btnHamlibDTRplus(Fl_Check_Button*, void*) {
  btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Check_Button *chkHamlibRTSplus=(Fl_Check_Button *)0;

static void cb_chkHamlibRTSplus(Fl_Check_Button* o, void*) {
  if (o->value() == 1)
  chkHamlibRTSCTSflow->value(0);
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Check_Button *chkHamlibRTSCTSflow=(Fl_Check_Button *)0;

static void cb_chkHamlibRTSCTSflow(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
  chkHamlibXONXOFFflow->value(0);
  chkHamlibRTSplus->deactivate();
} else
  chkHamlibRTSplus->activate();
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Check_Button *chkHamlibXONXOFFflow=(Fl_Check_Button *)0;

static void cb_chkHamlibXONXOFFflow(Fl_Check_Button* o, void*) {
  if (o->value() == 1)
  chkHamlibRTSCTSflow->value(0);
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
btnRevertHAMLIB->activate();
}

Fl_Button *btnRevertHAMLIB=(Fl_Button *)0;

static void cb_btnRevertHAMLIB(Fl_Button*, void*) {
  btnInitHAMLIB->labelcolor(FL_FOREGROUND_COLOR);
btnInitHAMLIB->redraw_label();
#if USE_HAMLIB
hamlib_restore_defaults();
#endif
}

Fl_Group *tabXMLRPC=(Fl_Group *)0;

Fl_Group *grpXMLRPC=(Fl_Group *)0;

Fl_Check_Button *chkUSEXMLRPC=(Fl_Check_Button *)0;

static void cb_chkUSEXMLRPC(Fl_Check_Button* o, void*) {
  progdefaults.chkUSEXMLRPCis = o->value();
if(o->value() == 1){
  chkUSEHAMLIB->value(0);
  chkUSERIGCAT->value(0);
  progdefaults.chkUSEHAMLIBis = false;
  progdefaults.chkUSERIGCATis = false;
}
  
btnInitXMLRPC->labelcolor(FL_RED);
btnInitXMLRPC->redraw_label();
progdefaults.changed = true;
}

Fl_Button *btnInitXMLRPC=(Fl_Button *)0;

static void cb_btnInitXMLRPC(Fl_Button* o, void*) {
  progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
progdefaults.changed = true;
}

Fl_Group *tabSoundCard=(Fl_Group *)0;

Fl_Tabs *tabsSoundCard=(Fl_Tabs *)0;

Fl_Group *tabAudio=(Fl_Group *)0;

Fl_Group *AudioOSS=(Fl_Group *)0;

static void cb_btnAudioIO(Fl_Round_Button*, void*) {
  sound_update(SND_IDX_OSS);
progdefaults.changed = true;
resetSoundCard();
}

Fl_Input_Choice *menuOSSDev=(Fl_Input_Choice *)0;

static void cb_menuOSSDev(Fl_Input_Choice* o, void*) {
  scDevice[0] = scDevice[1] = progdefaults.OSSdevice = o->value();
resetSoundCard();
progdefaults.changed = true;
}

Fl_Group *AudioPort=(Fl_Group *)0;

static void cb_btnAudioIO1(Fl_Round_Button*, void*) {
  sound_update(SND_IDX_PORT);
progdefaults.changed = true;
resetSoundCard();
}

Fl_Choice *menuPortInDev=(Fl_Choice *)0;

static void cb_menuPortInDev(Fl_Choice* o, void*) {
  scDevice[0] = progdefaults.PortInDevice = o->text();
progdefaults.PortInIndex = reinterpret_cast<intptr_t>(o->mvalue()->user_data());
resetSoundCard();
progdefaults.changed = true;
}

Fl_Choice *menuPortOutDev=(Fl_Choice *)0;

static void cb_menuPortOutDev(Fl_Choice* o, void*) {
  scDevice[1] = progdefaults.PortOutDevice = o->text();
progdefaults.PortOutIndex = reinterpret_cast<intptr_t>(o->mvalue()->user_data());
resetSoundCard();
progdefaults.changed = true;
}

Fl_Group *AudioPulse=(Fl_Group *)0;

static void cb_btnAudioIO2(Fl_Round_Button*, void*) {
  sound_update(SND_IDX_PULSE);
progdefaults.changed = true;
resetSoundCard();
}

Fl_Input2 *inpPulseServer=(Fl_Input2 *)0;

static void cb_inpPulseServer(Fl_Input2* o, void*) {
  scDevice[0] = scDevice[1] = progdefaults.PulseServer = o->value();
resetSoundCard();
progdefaults.changed = true;
}

Fl_Group *AudioNull=(Fl_Group *)0;

Fl_Round_Button *btnAudioIO[4]={(Fl_Round_Button *)0};

static void cb_btnAudioIO3(Fl_Round_Button*, void*) {
  sound_update(SND_IDX_NULL);
progdefaults.changed = true;
resetSoundCard();
}

Fl_Group *tabAudioOpt=(Fl_Group *)0;

Fl_Group *grpAudioSampleRate=(Fl_Group *)0;

Fl_Choice *menuInSampleRate=(Fl_Choice *)0;

static void cb_menuInSampleRate(Fl_Choice* o, void*) {
  progdefaults.in_sample_rate = o->value() > 1 ? strtol(o->mvalue()->text, 0, 10) : o->value();
resetSoundCard();
progdefaults.changed = true;
}

Fl_Choice *menuOutSampleRate=(Fl_Choice *)0;

static void cb_menuOutSampleRate(Fl_Choice* o, void*) {
  progdefaults.out_sample_rate = o->value() > 1 ? strtol(o->mvalue()->text, 0, 10) : o->value();
resetSoundCard();
progdefaults.changed = true;
}

Fl_Choice *menuSampleConverter=(Fl_Choice *)0;

static void cb_menuSampleConverter(Fl_Choice* o, void*) {
  if (o->value() == FLDIGI_SRC_BEST)
    fl_alert2("The best quality SINC interpolator has very high CPU overhead");
progdefaults.sample_converter = sample_rate_converters[o->value()];
resetSoundCard();
progdefaults.changed = true;
o->tooltip(src_get_description(sample_rate_converters[o->value()]));
}

Fl_Spinner2 *cntRxRateCorr=(Fl_Spinner2 *)0;

static void cb_cntRxRateCorr(Fl_Spinner2* o, void*) {
  progdefaults.RX_corr = (int)o->value();
progdefaults.changed = true;
}

Fl_Spinner2 *cntTxRateCorr=(Fl_Spinner2 *)0;

static void cb_cntTxRateCorr(Fl_Spinner2* o, void*) {
  progdefaults.TX_corr = (int)o->value();
progdefaults.changed = true;
}

Fl_Spinner2 *cntTxOffset=(Fl_Spinner2 *)0;

static void cb_cntTxOffset(Fl_Spinner2* o, void*) {
  progdefaults.TxOffset = (int)o->value();
progdefaults.changed = true;
}

Fl_Group *tabMixer=(Fl_Group *)0;

Fl_Check_Button *btnMixer=(Fl_Check_Button *)0;

static void cb_btnMixer(Fl_Check_Button* o, void*) {
  enableMixer(o->value());
progdefaults.changed = true;
}

Fl_Input_Choice *menuMix=(Fl_Input_Choice *)0;

static void cb_menuMix(Fl_Input_Choice* o, void*) {
  progdefaults.MXdevice = o->value();
enableMixer(false);
enableMixer(true);
progdefaults.changed = true;
}

Fl_Light_Button *btnMicIn=(Fl_Light_Button *)0;

static void cb_btnMicIn(Fl_Light_Button* o, void*) {
  if (o->value() == 1) {
    btnLineIn->value(0);
    progdefaults.LineIn = false;
    progdefaults.MicIn = true;
    setMixerInput(2);
} else {
    setMixerInput(0);
    progdefaults.MicIn = false;
}
progdefaults.changed = true;
}

Fl_Light_Button *btnLineIn=(Fl_Light_Button *)0;

static void cb_btnLineIn(Fl_Light_Button* o, void*) {
  if (o->value() == 1) {
    btnMicIn->value(0);
    progdefaults.LineIn = true;
    progdefaults.MicIn = false;
    setMixerInput(1);
} else {
    setMixerInput(0);
    progdefaults.LineIn = false;
}
progdefaults.changed = true;
}

Fl_Value_Slider2 *valPCMvolume=(Fl_Value_Slider2 *)0;

static void cb_valPCMvolume(Fl_Value_Slider2* o, void*) {
  setPCMvolume(o->value());
progdefaults.changed = true;
}

Fl_Group *tabAudioRightChannel=(Fl_Group *)0;

Fl_Check_Button *chkForceMono=(Fl_Check_Button *)0;

static void cb_chkForceMono(Fl_Check_Button* o, void*) {
  progdefaults.mono_audio = o->value();
progdefaults.changed = true;
if (o->value()) {
  progdefaults.QSK = false;
  btnQSK->value(0);
  btnQSK2->value(0);
  progdefaults.PseudoFSK = false;
  chkPseudoFSK->value(0);
  chkPseudoFSK2->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  btnPTTrightchannel2->value(0);  
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.ReverseAudio = false;
  chkReverseAudio->value(0);
}
resetSoundCard();
}

Fl_Check_Button *chkAudioStereoOut=(Fl_Check_Button *)0;

static void cb_chkAudioStereoOut(Fl_Check_Button* o, void*) {
  progdefaults.sig_on_right_channel = o->value();
progdefaults.changed = true;
if (o->value()) {
  progdefaults.QSK = false;
  btnQSK->value(0);
  btnQSK2->value(0);
  progdefaults.PseudoFSK = false;
  chkPseudoFSK->value(0);
  chkPseudoFSK2->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  btnPTTrightchannel2->value(0);  
  if (progdefaults.mono_audio) {
    progdefaults.mono_audio = false;
    chkForceMono->value(0);
    resetSoundCard();
  }
};
}

Fl_Check_Button *chkReverseAudio=(Fl_Check_Button *)0;

static void cb_chkReverseAudio(Fl_Check_Button* o, void*) {
  progdefaults.ReverseAudio = o->value();
progdefaults.changed = true;
  if (progdefaults.mono_audio) {
    progdefaults.mono_audio = false;
    chkForceMono->value(0);
    resetSoundCard();
  };
}

Fl_Check_Button *btnPTTrightchannel2=(Fl_Check_Button *)0;

static void cb_btnPTTrightchannel2(Fl_Check_Button* o, void*) {
  progdefaults.PTTrightchannel = o->value();
btnPTTrightchannel->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.QSK = false;
  btnQSK->value(0);
  btnQSK2->value(0);
  progdefaults.PseudoFSK = false;
  chkPseudoFSK->value(0);
  chkPseudoFSK2->value(0);
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  if (progdefaults.mono_audio) {
    progdefaults.mono_audio = false;
    chkForceMono->value(0);
    resetSoundCard();
  }
};
}

Fl_Check_Button *btnQSK2=(Fl_Check_Button *)0;

static void cb_btnQSK2(Fl_Check_Button* o, void*) {
  progdefaults.QSK = o->value();
btnQSK->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  btnPTTrightchannel2->value(0);
  if (progdefaults.mono_audio) {
    progdefaults.mono_audio = false;
    chkForceMono->value(0);
    resetSoundCard();
  }
};
}

Fl_Check_Button *chkPseudoFSK2=(Fl_Check_Button *)0;

static void cb_chkPseudoFSK2(Fl_Check_Button* o, void*) {
  progdefaults.PseudoFSK = o->value();
chkPseudoFSK->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  btnPTTrightchannel2->value(0);
  if (progdefaults.mono_audio) {
    progdefaults.mono_audio = false;
    chkForceMono->value(0);
    resetSoundCard();
  }
};
}

Fl_Group *tabWavFile=(Fl_Group *)0;

Fl_Choice *mnuWavSampleRate=(Fl_Choice *)0;

static void cb_mnuWavSampleRate(Fl_Choice* o, void*) {
  progdefaults.wavSampleRate = o->value();
progdefaults.changed = true;
}

Fl_Group *tabID=(Fl_Group *)0;

Fl_Tabs *tabsID=(Fl_Tabs *)0;

Fl_Group *tabRsID=(Fl_Group *)0;

Fl_Check_Button *chkRSidNotifyOnly=(Fl_Check_Button *)0;

static void cb_chkRSidNotifyOnly(Fl_Check_Button* o, void*) {
  progdefaults.rsid_notify_only = o->value();
notify_create_rsid_event(progdefaults.rsid_notify_only);
if (progdefaults.rsid_notify_only) {
    chkRetainFreqLock->deactivate();
    chkDisableFreqChange->deactivate();
}
else {
    chkRetainFreqLock->activate();
    chkDisableFreqChange->activate();
}
progdefaults.changed = true;
}

Fl_Button *bRSIDRxModes=(Fl_Button *)0;

static void cb_bRSIDRxModes(Fl_Button* o, void*) {
  mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show(&progdefaults.rsid_rx_modes);
progdefaults.changed = true;
}

Fl_Check_Button *chkRSidWideSearch=(Fl_Check_Button *)0;

static void cb_chkRSidWideSearch(Fl_Check_Button* o, void*) {
  progdefaults.rsidWideSearch=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chkRSidMark=(Fl_Check_Button *)0;

static void cb_chkRSidMark(Fl_Check_Button* o, void*) {
  progdefaults.rsid_mark = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chkRSidAutoDisable=(Fl_Check_Button *)0;

static void cb_chkRSidAutoDisable(Fl_Check_Button* o, void*) {
  progdefaults.rsid_auto_disable = o->value();
progdefaults.changed = true;
}

Fl_Value_Slider2 *sldrRSIDresolution=(Fl_Value_Slider2 *)0;

static void cb_sldrRSIDresolution(Fl_Value_Slider2* o, void*) {
  progdefaults.rsid_resolution = (int)o->value();
progdefaults.changed = true;
}

Fl_Value_Slider2 *sldrRSIDsquelch=(Fl_Value_Slider2 *)0;

static void cb_sldrRSIDsquelch(Fl_Value_Slider2* o, void*) {
  progdefaults.rsid_squelch = (int)o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chkRSidShowAlert=(Fl_Check_Button *)0;

static void cb_chkRSidShowAlert(Fl_Check_Button* o, void*) {
  progdefaults.disable_rsid_warning_dialog_box = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chkRetainFreqLock=(Fl_Check_Button *)0;

static void cb_chkRetainFreqLock(Fl_Check_Button* o, void*) {
  progdefaults.retain_freq_lock = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chkDisableFreqChange=(Fl_Check_Button *)0;

static void cb_chkDisableFreqChange(Fl_Check_Button* o, void*) {
  progdefaults.disable_rsid_freq_change = o->value();
progdefaults.changed = true;
}

Fl_Counter *val_pretone=(Fl_Counter *)0;

static void cb_val_pretone(Fl_Counter* o, void*) {
  progdefaults.pretone = o->value();
progdefaults.changed = true;
}

Fl_Button *bRSIDTxModes=(Fl_Button *)0;

static void cb_bRSIDTxModes(Fl_Button* o, void*) {
  mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show(&progdefaults.rsid_tx_modes);
progdefaults.changed = true;
}

Fl_Check_Button *btn_post_rsid=(Fl_Check_Button *)0;

static void cb_btn_post_rsid(Fl_Check_Button* o, void*) {
  progdefaults.rsid_post=o->value();
progdefaults.changed = true;
}

Fl_Group *tabVideoID=(Fl_Group *)0;

Fl_Check_Button *btnsendid=(Fl_Check_Button *)0;

static void cb_btnsendid(Fl_Check_Button* o, void*) {
  progdefaults.sendid=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnsendvideotext=(Fl_Check_Button *)0;

static void cb_btnsendvideotext(Fl_Check_Button* o, void*) {
  progdefaults.sendtextid=o->value();
progdefaults.changed = true;
}

Fl_Input2 *valVideotext=(Fl_Input2 *)0;

static void cb_valVideotext(Fl_Input2* o, void*) {
  progdefaults.strTextid = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chkID_SMALL=(Fl_Check_Button *)0;

static void cb_chkID_SMALL(Fl_Check_Button* o, void*) {
  progdefaults.ID_SMALL=o->value();
progdefaults.changed = true;
}

Fl_Value_Slider2 *sldrVideowidth=(Fl_Value_Slider2 *)0;

static void cb_sldrVideowidth(Fl_Value_Slider2* o, void*) {
  progdefaults.videowidth = (int)o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_vidlimit=(Fl_Check_Button *)0;

static void cb_btn_vidlimit(Fl_Check_Button* o, void*) {
  progdefaults.vidlimit=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_vidmodelimit=(Fl_Check_Button *)0;

static void cb_btn_vidmodelimit(Fl_Check_Button* o, void*) {
  progdefaults.vidmodelimit=o->value();
progdefaults.changed=true;
}

Fl_Button *bVideoIDModes=(Fl_Button *)0;

static void cb_bVideoIDModes(Fl_Button* o, void*) {
  mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show(&progdefaults.videoid_modes);
progdefaults.changed = true;
}

Fl_Group *tabCwID=(Fl_Group *)0;

Fl_Group *sld=(Fl_Group *)0;

Fl_Check_Button *btnCWID=(Fl_Check_Button *)0;

static void cb_btnCWID(Fl_Check_Button* o, void*) {
  progdefaults.CWid = o->value();
progdefaults.changed = true;
}

Fl_Value_Slider2 *sldrCWIDwpm=(Fl_Value_Slider2 *)0;

static void cb_sldrCWIDwpm(Fl_Value_Slider2* o, void*) {
  progdefaults.CWIDwpm = (int)o->value();
progdefaults.changed = true;
}

Fl_Button *bCWIDModes=(Fl_Button *)0;

static void cb_bCWIDModes(Fl_Button* o, void*) {
  mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show(&progdefaults.cwid_modes);
progdefaults.changed = true;
}

Fl_Group *tabMisc=(Fl_Group *)0;

Fl_Tabs *tabsMisc=(Fl_Tabs *)0;

Fl_Group *tabCPUspeed=(Fl_Group *)0;

Fl_Check_Button *chkSlowCpu=(Fl_Check_Button *)0;

static void cb_chkSlowCpu(Fl_Check_Button* o, void*) {
  progdefaults.slowcpu = o->value();
progdefaults.changed = true;
}

Fl_Group *tabNBEMS=(Fl_Group *)0;

Fl_Check_Button *chkAutoExtract=(Fl_Check_Button *)0;

static void cb_chkAutoExtract(Fl_Check_Button* o, void*) {
  progdefaults.autoextract = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chk_open_wrap_folder=(Fl_Check_Button *)0;

static void cb_chk_open_wrap_folder(Fl_Check_Button* o, void*) {
  progdefaults.open_nbems_folder = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chk_open_flmsg=(Fl_Check_Button *)0;

static void cb_chk_open_flmsg(Fl_Check_Button* o, void*) {
  progdefaults.open_flmsg = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *chk_open_flmsg_print=(Fl_Check_Button *)0;

static void cb_chk_open_flmsg_print(Fl_Check_Button* o, void*) {
  progdefaults.open_flmsg_print = o->value();
progdefaults.changed = true;
}

Fl_Input2 *txt_flmsg_pathname=(Fl_Input2 *)0;

static void cb_txt_flmsg_pathname(Fl_Input2* o, void*) {
  progdefaults.flmsg_pathname = o->value();
progdefaults.changed = true;
}

Fl_Button *btn_select_flmsg=(Fl_Button *)0;

static void cb_btn_select_flmsg(Fl_Button*, void*) {
  select_flmsg_pathname();
}

Fl_Value_Slider *sldr_extract_timeout=(Fl_Value_Slider *)0;

static void cb_sldr_extract_timeout(Fl_Value_Slider* o, void*) {
  progdefaults.extract_timeout=o->value();
progdefaults.changed=true;
}

Fl_Group *tabPskmail=(Fl_Group *)0;

Fl_Counter2 *cntServerCarrier=(Fl_Counter2 *)0;

static void cb_cntServerCarrier(Fl_Counter2* o, void*) {
  progdefaults.ServerCarrier = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;
}

Fl_Counter2 *cntServerOffset=(Fl_Counter2 *)0;

static void cb_cntServerOffset(Fl_Counter2* o, void*) {
  progdefaults.ServerOffset = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;
}

Fl_Counter2 *cntServerACQsn=(Fl_Counter2 *)0;

static void cb_cntServerACQsn(Fl_Counter2* o, void*) {
  progdefaults.ServerACQsn = o->value();
progdefaults.changed = true;
}

Fl_Counter2 *cntServerAFCrange=(Fl_Counter2 *)0;

static void cb_cntServerAFCrange(Fl_Counter2* o, void*) {
  progdefaults.ServerAFCrange = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;
}

Fl_Check_Button *btnPSKmailSweetSpot=(Fl_Check_Button *)0;

static void cb_btnPSKmailSweetSpot(Fl_Check_Button* o, void*) {
  progdefaults.PSKmailSweetSpot = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_arq_s2n_report=(Fl_Check_Button *)0;

static void cb_btn_arq_s2n_report(Fl_Check_Button* o, void*) {
  progdefaults.Pskmails2nreport=o->value();
}

Fl_Group *tabSpot=(Fl_Group *)0;

Fl_Check_Button *btnPSKRepAuto=(Fl_Check_Button *)0;

static void cb_btnPSKRepAuto(Fl_Check_Button* o, void*) {
  progdefaults.pskrep_auto = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;
}

Fl_Check_Button *btnPSKRepLog=(Fl_Check_Button *)0;

static void cb_btnPSKRepLog(Fl_Check_Button* o, void*) {
  progdefaults.pskrep_log = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;
}

Fl_Check_Button *btnPSKRepQRG=(Fl_Check_Button *)0;

static void cb_btnPSKRepQRG(Fl_Check_Button* o, void*) {
  progdefaults.pskrep_qrg = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_report_when_visible=(Fl_Check_Button *)0;

static void cb_btn_report_when_visible(Fl_Check_Button* o, void*) {
  progdefaults.report_when_visible = o->value();
progdefaults.changed = true;
}

Fl_Input2 *inpPSKRepHost=(Fl_Input2 *)0;

static void cb_inpPSKRepHost(Fl_Input2* o, void*) {
  progdefaults.pskrep_host = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;
}

Fl_Input2 *inpPSKRepPort=(Fl_Input2 *)0;

static void cb_inpPSKRepPort(Fl_Input2* o, void*) {
  progdefaults.pskrep_port = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;
}

Fl_Button *btnPSKRepInit=(Fl_Button *)0;

static void cb_btnPSKRepInit(Fl_Button* o, void*) {
  pskrep_stop();
if (!pskrep_start()) {
    boxPSKRepMsg->copy_label(pskrep_error());
    progdefaults.usepskrep = false;
} else {
    boxPSKRepMsg->label(0);
    o->labelcolor(FL_FOREGROUND_COLOR);
    progdefaults.usepskrep = true;
}
progdefaults.changed = true;
}

Fl_Box *boxPSKRepMsg=(Fl_Box *)0;

Fl_Group *tabSweetSpot=(Fl_Group *)0;

Fl_Value_Input2 *valCWsweetspot=(Fl_Value_Input2 *)0;

static void cb_valCWsweetspot(Fl_Value_Input2* o, void*) {
  progdefaults.CWsweetspot=o->value();
progdefaults.changed = true;
}

Fl_Value_Input2 *valRTTYsweetspot=(Fl_Value_Input2 *)0;

static void cb_valRTTYsweetspot(Fl_Value_Input2* o, void*) {
  progdefaults.RTTYsweetspot=o->value();
progdefaults.changed = true;
}

Fl_Value_Input2 *valPSKsweetspot=(Fl_Value_Input2 *)0;

static void cb_valPSKsweetspot(Fl_Value_Input2* o, void*) {
  progdefaults.PSKsweetspot=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnStartAtSweetSpot=(Fl_Check_Button *)0;

static void cb_btnStartAtSweetSpot(Fl_Check_Button* o, void*) {
  progdefaults.StartAtSweetSpot = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnCWIsLSB=(Fl_Check_Button *)0;

static void cb_btnCWIsLSB(Fl_Check_Button* o, void*) {
  progdefaults.CWIsLSB=o->value();
progdefaults.changed=true;
}

Fl_Group *tabText_IO=(Fl_Group *)0;

Fl_Group *grpTalker=(Fl_Group *)0;

Fl_Light_Button *btnConnectTalker=(Fl_Light_Button *)0;

static void cb_btnConnectTalker(Fl_Light_Button* o, void*) {
  if (o->value()) open_talker();
else close_talker();
}

Fl_Check_Button *btn_auto_talk=(Fl_Check_Button *)0;

static void cb_btn_auto_talk(Fl_Check_Button* o, void*) {
  progdefaults.auto_talk = o->value();
}

Fl_Check_Button *chkRxStream=(Fl_Check_Button *)0;

static void cb_chkRxStream(Fl_Check_Button* o, void*) {
  progdefaults.speak = o->value();
progdefaults.changed = true;
}

Fl_Group *tabDTMF=(Fl_Group *)0;

Fl_Check_Button *chkDTMFdecode=(Fl_Check_Button *)0;

static void cb_chkDTMFdecode(Fl_Check_Button* o, void*) {
  progdefaults.DTMFdecode = o->value();
}

Fl_Group *tabWX=(Fl_Group *)0;

Fl_Input *inpWXsta=(Fl_Input *)0;

static void cb_inpWXsta(Fl_Input* o, void*) {
  progdefaults.wx_sta = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_wx_full=(Fl_Check_Button *)0;

static void cb_btn_wx_full(Fl_Check_Button* o, void*) {
  progdefaults.wx_full=o->value();
progdefaults.changed = true;
}

static void cb_End(Fl_Input* o, void*) {
  progdefaults.wx_eoh = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_wx_station_name=(Fl_Check_Button *)0;

static void cb_btn_wx_station_name(Fl_Check_Button* o, void*) {
  progdefaults.wx_station_name = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_wx_condx=(Fl_Check_Button *)0;

static void cb_btn_wx_condx(Fl_Check_Button* o, void*) {
  progdefaults.wx_condx=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_wx_fahrenheit=(Fl_Check_Button *)0;

static void cb_btn_wx_fahrenheit(Fl_Check_Button* o, void*) {
  progdefaults.wx_fahrenheit=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_wx_celsius=(Fl_Check_Button *)0;

static void cb_btn_wx_celsius(Fl_Check_Button* o, void*) {
  progdefaults.wx_celsius=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_wx_mph=(Fl_Check_Button *)0;

static void cb_btn_wx_mph(Fl_Check_Button* o, void*) {
  progdefaults.wx_mph=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_wx_kph=(Fl_Check_Button *)0;

static void cb_btn_wx_kph(Fl_Check_Button* o, void*) {
  progdefaults.wx_kph=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_wx_inches=(Fl_Check_Button *)0;

static void cb_btn_wx_inches(Fl_Check_Button* o, void*) {
  progdefaults.wx_inches=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_wx_mbars=(Fl_Check_Button *)0;

static void cb_btn_wx_mbars(Fl_Check_Button* o, void*) {
  progdefaults.wx_mbars=o->value();
progdefaults.changed = true;
}

Fl_Button *btn_metar_search=(Fl_Button *)0;

static void cb_btn_metar_search(Fl_Button*, void*) {
  get_METAR_station();
}

Fl_Group *tabKML=(Fl_Group *)0;

Fl_Input *btnKmlSaveDir=(Fl_Input *)0;

static void cb_btnKmlSaveDir(Fl_Input* o, void*) {
  progdefaults.kml_save_dir=o->value();
progdefaults.changed = true;
kml_init();
}

Fl_Input *inputKmlRootFile=(Fl_Input *)0;

Fl_Counter *cntKmlMergeDistance=(Fl_Counter *)0;

static void cb_cntKmlMergeDistance(Fl_Counter* o, void*) {
  progdefaults.kml_merge_distance = o->value();
progdefaults.changed = true;
kml_init();
}

Fl_Counter *cntKmlRetentionTime=(Fl_Counter *)0;

static void cb_cntKmlRetentionTime(Fl_Counter* o, void*) {
  progdefaults.kml_retention_time = o->value();
progdefaults.changed = true;
kml_init();
}

Fl_Spinner2 *cntKmlRefreshInterval=(Fl_Spinner2 *)0;

static void cb_cntKmlRefreshInterval(Fl_Spinner2* o, void*) {
  progdefaults.kml_refresh_interval = (int)(o->value());
progdefaults.changed = true;
kml_init();
}

Fl_Choice *selKmlBalloonStyle=(Fl_Choice *)0;

static void cb_selKmlBalloonStyle(Fl_Choice* o, void*) {
  progdefaults.kml_balloon_style = o->value();
progdefaults.changed = true;
kml_init();
}

Fl_Input *btnKmlCommand=(Fl_Input *)0;

static void cb_btnKmlCommand(Fl_Input* o, void*) {
  progdefaults.kml_command=o->value();
progdefaults.changed = true;
kml_init();
}

Fl_Button *btlTestKmlCommand=(Fl_Button *)0;

static void cb_btlTestKmlCommand(Fl_Button*, void*) {
  KmlServer::SpawnProcess();
}

Fl_Button *btnSelectKmlDestDir=(Fl_Button *)0;

static void cb_btnSelectKmlDestDir(Fl_Button*, void*) {
  Fl_File_Chooser *fc = new Fl_File_Chooser(".",NULL,Fl_File_Chooser::DIRECTORY,"Input File");
fc->callback(KmlDestDirSet);
fc->show();
}

Fl_Button *btlPurge=(Fl_Button *)0;

static void cb_btlPurge(Fl_Button*, void*) {
  KmlServer::GetInstance()->Reset();
}

Fl_Check_Button *btnKmlPurgeOnStartup=(Fl_Check_Button *)0;

static void cb_btnKmlPurgeOnStartup(Fl_Check_Button* o, void*) {
  progdefaults.kml_purge_on_startup = o->value();
progdefaults.changed = true;
}

Fl_Group *tabQRZ=(Fl_Group *)0;

Fl_Tabs *tabsQRZ=(Fl_Tabs *)0;

Fl_Round_Button *btnQRZWEBnotavailable=(Fl_Round_Button *)0;

static void cb_btnQRZWEBnotavailable(Fl_Round_Button* o, void*) {
  set_qrzweb_buttons(o);
progdefaults.QRZWEB = QRZWEBNONE;
progdefaults.changed = true;
}

Fl_Round_Button *btnQRZonline=(Fl_Round_Button *)0;

static void cb_btnQRZonline(Fl_Round_Button* o, void*) {
  set_qrzweb_buttons(o);
progdefaults.QRZWEB = QRZHTML;
progdefaults.changed = true;
}

Fl_Round_Button *btnHAMCALLonline=(Fl_Round_Button *)0;

static void cb_btnHAMCALLonline(Fl_Round_Button* o, void*) {
  set_qrzweb_buttons(o);
progdefaults.QRZWEB = HAMCALLHTML;
progdefaults.changed = true;
}

Fl_Round_Button *btnHamQTHonline=(Fl_Round_Button *)0;

static void cb_btnHamQTHonline(Fl_Round_Button* o, void*) {
  set_qrzweb_buttons(o);
progdefaults.QRZWEB = HAMQTHHTML;
progdefaults.changed = true;
}

Fl_Round_Button *btnQRZXMLnotavailable=(Fl_Round_Button *)0;

static void cb_btnQRZXMLnotavailable(Fl_Round_Button* o, void*) {
  set_qrzxml_buttons(o);
progdefaults.QRZXML = QRZXMLNONE;
progdefaults.changed = true;
}

Fl_Round_Button *btnQRZcdrom=(Fl_Round_Button *)0;

static void cb_btnQRZcdrom(Fl_Round_Button* o, void*) {
  set_qrzxml_buttons(o);
progdefaults.QRZXML = QRZCD;
progdefaults.changed = true;
}

Fl_Round_Button *btnQRZsub=(Fl_Round_Button *)0;

static void cb_btnQRZsub(Fl_Round_Button* o, void*) {
  set_qrzxml_buttons(o);
progdefaults.QRZXML = QRZNET;
progdefaults.changed = true;
}

Fl_Round_Button *btnHamcall=(Fl_Round_Button *)0;

static void cb_btnHamcall(Fl_Round_Button* o, void*) {
  set_qrzxml_buttons(o);
progdefaults.QRZXML = HAMCALLNET;
progdefaults.changed = true;
}

Fl_Round_Button *btnHamQTH=(Fl_Round_Button *)0;

static void cb_btnHamQTH(Fl_Round_Button* o, void*) {
  set_qrzxml_buttons(o);
progdefaults.QRZXML = HAMQTH;
progdefaults.changed = true;
}

Fl_Round_Button *btnCALLOOK=(Fl_Round_Button *)0;

static void cb_btnCALLOOK(Fl_Round_Button* o, void*) {
  set_qrzxml_buttons(o);
progdefaults.QRZXML = CALLOOK;
progdefaults.changed = true;
}

Fl_Input2 *txtQRZpathname=(Fl_Input2 *)0;

static void cb_txtQRZpathname(Fl_Input2* o, void*) {
  progdefaults.QRZpathname = o->value();
progdefaults.QRZchanged = true;
progdefaults.changed = true;
}

Fl_Input2 *inpQRZusername=(Fl_Input2 *)0;

static void cb_inpQRZusername(Fl_Input2* o, void*) {
  progdefaults.QRZusername = o->value();
progdefaults.changed = true;
}

Fl_Input2 *inpQRZuserpassword=(Fl_Input2 *)0;

static void cb_inpQRZuserpassword(Fl_Input2* o, void*) {
  progdefaults.QRZuserpassword = o->value();
progdefaults.changed = true;
}

Fl_Button *btnQRZpasswordShow=(Fl_Button *)0;

static void cb_btnQRZpasswordShow(Fl_Button* o, void*) {
  inpQRZuserpassword->type(inpQRZuserpassword->type() ^ FL_SECRET_INPUT);
inpQRZuserpassword->redraw();
o->label((inpQRZuserpassword->type() & FL_SECRET_INPUT) ? "Show" : "Hide");
}

Fl_Input2 *inpEQSL_id=(Fl_Input2 *)0;

static void cb_inpEQSL_id(Fl_Input2* o, void*) {
  progdefaults.eqsl_id = o->value();
progdefaults.changed = true;
}

Fl_Input2 *inpEQSL_pwd=(Fl_Input2 *)0;

static void cb_inpEQSL_pwd(Fl_Input2* o, void*) {
  progdefaults.eqsl_pwd = o->value();
progdefaults.changed = true;
}

Fl_Button *btnEQSL_pwd_show=(Fl_Button *)0;

static void cb_btnEQSL_pwd_show(Fl_Button* o, void*) {
  inpEQSL_pwd->type(inpEQSL_pwd->type() ^ FL_SECRET_INPUT);
inpEQSL_pwd->redraw();
o->label((inpEQSL_pwd->type() & FL_SECRET_INPUT) ? "Show" : "Hide");
}

Fl_Input2 *inpEQSL_nick=(Fl_Input2 *)0;

static void cb_inpEQSL_nick(Fl_Input2* o, void*) {
  progdefaults.eqsl_nick = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btn_send_when_logged=(Fl_Check_Button *)0;

static void cb_btn_send_when_logged(Fl_Check_Button* o, void*) {
  progdefaults.eqsl_when_logged = o->value();
progdefaults.changed = true;
}

Fl_Input2 *txt_eqsl_default_message=(Fl_Input2 *)0;

static void cb_txt_eqsl_default_message(Fl_Input2* o, void*) {
  progdefaults.eqsl_default_message = o->value();
progdefaults.changed = true;
}

Fl_Box *eqsl_txt1=(Fl_Box *)0;

Fl_Box *eqsl_txt2=(Fl_Box *)0;

Fl_Box *eqsl_txt3=(Fl_Box *)0;

Fl_Check_Button *btn_send_datetime_off=(Fl_Check_Button *)0;

static void cb_btn_send_datetime_off(Fl_Check_Button* o, void*) {
  progdefaults.eqsl_datetime_off = o->value();
progdefaults.changed = true;
}

Fl_Button *btnSaveConfig=(Fl_Button *)0;

static void cb_btnSaveConfig(Fl_Button*, void*) {
  progdefaults.saveDefaults();
}

Fl_Return_Button *btnCloseConfig=(Fl_Return_Button *)0;

static void cb_btnCloseConfig(Fl_Return_Button*, void*) {
  closeDialog();
}

Fl_Button *btnResetConfig=(Fl_Button *)0;

static void cb_btnResetConfig(Fl_Button*, void*) {
  progdefaults.resetDefaults();
progdefaults.changed = false;
}

Fl_Double_Window* ConfigureDialog() {
  Fl_Double_Window* w;
  font_browser = new Font_Browser;
  static const char szShifts[]  = "23|85|160|170|182|200|240|350|425|_850|Custom";
  static const char szBauds[]  = "45|45.45|50|56|75|100|110|150|200|300";
  static const char szSelBits[] = "5 (baudot)|7 (ascii)|8 (ascii)";
  static const char szParity[]  = "none|even|odd|zero|one";
  static const char szStopBits[] = "1|1.5|2";
  static const char szOliviaTones[] = "2|4|8|16|32|64|128|256";
  static const char szOliviaBandwidth[] = "125|250|500|1000|2000";
  static const char szContestiaTones[] = "2|4|8|16|32|64|128|256";
  static const char szContestiaBandwidth[] = "125|250|500|1000|2000";
  static const char szBaudRates[] = "300|600|1200|2400|4800|9600|19200|38400|57600|115200|230400|460800";
  static const char szProsigns[] = "~|%|&|+|=|{|}|<|>|[|]| ";
  { Fl_Double_Window* o = new Fl_Double_Window(540, 400, _("Fldigi configuration"));
    w = o;
    o->color(FL_DARK2);
    o->selection_color((Fl_Color)51);
    o->labelsize(18);
    o->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { tabsConfigure = new Fl_Tabs(-5, 0, 600, 374);
      tabsConfigure->color(FL_LIGHT1);
      tabsConfigure->selection_color(FL_LIGHT1);
      { tabOperator = new Fl_Group(0, 25, 540, 345, _("Operator"));
        tabOperator->tooltip(_("Operator information"));
        tabOperator->callback((Fl_Callback*)cb_tabOperator);
        tabOperator->when(FL_WHEN_CHANGED);
        { Fl_Group* o = new Fl_Group(27, 35, 490, 165, _("Station"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
          { inpMyCallsign = new Fl_Input2(132, 64, 110, 24, _("Callsign:"));
            inpMyCallsign->tooltip(_("Operators callsign"));
            inpMyCallsign->box(FL_DOWN_BOX);
            inpMyCallsign->color(FL_BACKGROUND2_COLOR);
            inpMyCallsign->selection_color(FL_SELECTION_COLOR);
            inpMyCallsign->labeltype(FL_NORMAL_LABEL);
            inpMyCallsign->labelfont(0);
            inpMyCallsign->labelsize(14);
            inpMyCallsign->labelcolor(FL_FOREGROUND_COLOR);
            inpMyCallsign->callback((Fl_Callback*)cb_inpMyCallsign);
            inpMyCallsign->align(Fl_Align(FL_ALIGN_LEFT));
            inpMyCallsign->when(FL_WHEN_RELEASE);
            inpMyCallsign->labelsize(FL_NORMAL_SIZE);
          } // Fl_Input2* inpMyCallsign
          { inpMyName = new Fl_Input2(312, 64, 140, 24, _("Name:"));
            inpMyName->tooltip(_("Operators name"));
            inpMyName->box(FL_DOWN_BOX);
            inpMyName->color(FL_BACKGROUND2_COLOR);
            inpMyName->selection_color(FL_SELECTION_COLOR);
            inpMyName->labeltype(FL_NORMAL_LABEL);
            inpMyName->labelfont(0);
            inpMyName->labelsize(14);
            inpMyName->labelcolor(FL_FOREGROUND_COLOR);
            inpMyName->callback((Fl_Callback*)cb_inpMyName);
            inpMyName->align(Fl_Align(FL_ALIGN_LEFT));
            inpMyName->when(FL_WHEN_RELEASE);
            inpMyName->labelsize(FL_NORMAL_SIZE);
          } // Fl_Input2* inpMyName
          { inpMyQth = new Fl_Input2(132, 98, 320, 24, _("QTH:"));
            inpMyQth->tooltip(_("Operators QTH"));
            inpMyQth->box(FL_DOWN_BOX);
            inpMyQth->color(FL_BACKGROUND2_COLOR);
            inpMyQth->selection_color(FL_SELECTION_COLOR);
            inpMyQth->labeltype(FL_NORMAL_LABEL);
            inpMyQth->labelfont(0);
            inpMyQth->labelsize(14);
            inpMyQth->labelcolor(FL_FOREGROUND_COLOR);
            inpMyQth->callback((Fl_Callback*)cb_inpMyQth);
            inpMyQth->align(Fl_Align(FL_ALIGN_LEFT));
            inpMyQth->when(FL_WHEN_RELEASE);
            inpMyQth->labelsize(FL_NORMAL_SIZE);
          } // Fl_Input2* inpMyQth
          { inpMyLocator = new Fl_Input2(132, 133, 85, 24, _("Locator:"));
            inpMyLocator->tooltip(_("Maidenhead locator as in EM64qv"));
            inpMyLocator->box(FL_DOWN_BOX);
            inpMyLocator->color(FL_BACKGROUND2_COLOR);
            inpMyLocator->selection_color(FL_SELECTION_COLOR);
            inpMyLocator->labeltype(FL_NORMAL_LABEL);
            inpMyLocator->labelfont(0);
            inpMyLocator->labelsize(14);
            inpMyLocator->labelcolor(FL_FOREGROUND_COLOR);
            inpMyLocator->callback((Fl_Callback*)cb_inpMyLocator);
            inpMyLocator->align(Fl_Align(FL_ALIGN_LEFT));
            inpMyLocator->when(FL_WHEN_RELEASE);
            inpMyLocator->labelsize(FL_NORMAL_SIZE);
          } // Fl_Input2* inpMyLocator
          o->end();
        } // Fl_Group* o
        { inpMyAntenna = new Fl_Input2(132, 167, 320, 24, _("Antenna:"));
          inpMyAntenna->tooltip(_("Short description of antenna"));
          inpMyAntenna->box(FL_DOWN_BOX);
          inpMyAntenna->color(FL_BACKGROUND2_COLOR);
          inpMyAntenna->selection_color(FL_SELECTION_COLOR);
          inpMyAntenna->labeltype(FL_NORMAL_LABEL);
          inpMyAntenna->labelfont(0);
          inpMyAntenna->labelsize(14);
          inpMyAntenna->labelcolor(FL_FOREGROUND_COLOR);
          inpMyAntenna->callback((Fl_Callback*)cb_inpMyAntenna);
          inpMyAntenna->align(Fl_Align(FL_ALIGN_LEFT));
          inpMyAntenna->when(FL_WHEN_RELEASE);
          inpMyAntenna->labelsize(FL_NORMAL_SIZE);
        } // Fl_Input2* inpMyAntenna
        { grpNoise = new Fl_Group(27, 203, 490, 165, _("Test Signal - Do NOT use with transmitter"));
          grpNoise->box(FL_ENGRAVED_FRAME);
          grpNoise->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
          grpNoise->hide();
          { Fl_Check_Button* o = btnNoiseOn = new Fl_Check_Button(65, 241, 70, 15, _("Noise on"));
            btnNoiseOn->down_box(FL_DOWN_BOX);
            btnNoiseOn->callback((Fl_Callback*)cb_btnNoiseOn);
            o->value(progdefaults.noise);
          } // Fl_Check_Button* btnNoiseOn
          { Fl_Counter2* o = noiseDB = new Fl_Counter2(62, 279, 89, 21, _("dB"));
            noiseDB->type(1);
            noiseDB->box(FL_UP_BOX);
            noiseDB->color(FL_BACKGROUND_COLOR);
            noiseDB->selection_color(FL_INACTIVE_COLOR);
            noiseDB->labeltype(FL_NORMAL_LABEL);
            noiseDB->labelfont(0);
            noiseDB->labelsize(14);
            noiseDB->labelcolor(FL_FOREGROUND_COLOR);
            noiseDB->minimum(-18);
            noiseDB->maximum(60);
            noiseDB->step(1);
            noiseDB->value(20);
            noiseDB->callback((Fl_Callback*)cb_noiseDB);
            noiseDB->align(Fl_Align(FL_ALIGN_LEFT));
            noiseDB->when(FL_WHEN_CHANGED);
            o->value(progdefaults.s2n);
          } // Fl_Counter2* noiseDB
          grpNoise->end();
        } // Fl_Group* grpNoise
        tabOperator->end();
      } // Fl_Group* tabOperator
      { tabUI = new Fl_Group(0, 25, 540, 346, _("UI"));
        tabUI->hide();
        { tabsUI = new Fl_Tabs(0, 25, 540, 346);
          tabsUI->selection_color(FL_LIGHT1);
          { tabBrowser = new Fl_Group(0, 50, 540, 320, _("Browser"));
            { Fl_Group* o = new Fl_Group(24, 59, 496, 300);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Spinner2* o = cntChannels = new Fl_Spinner2(40, 69, 50, 24, _("Channels, first channel starts at waterfall lower limit"));
                cntChannels->tooltip(_("Change # of psk viewer channels"));
                cntChannels->box(FL_NO_BOX);
                cntChannels->color(FL_BACKGROUND_COLOR);
                cntChannels->selection_color(FL_BACKGROUND_COLOR);
                cntChannels->labeltype(FL_NORMAL_LABEL);
                cntChannels->labelfont(0);
                cntChannels->labelsize(14);
                cntChannels->labelcolor(FL_FOREGROUND_COLOR);
                cntChannels->maximum(30);
                cntChannels->value(30);
                cntChannels->callback((Fl_Callback*)cb_cntChannels);
                cntChannels->align(Fl_Align(FL_ALIGN_RIGHT));
                cntChannels->when(FL_WHEN_RELEASE);
                o->minimum(5); o->maximum(30); o->step(1);
                o->value(progdefaults.VIEWERchannels);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Spinner2* cntChannels
              { Fl_Spinner2* o = cntTimeout = new Fl_Spinner2(40, 105, 50, 24, _("Inactivity timeout"));
                cntTimeout->tooltip(_("Clear channel text after\n# seconds of inactivity"));
                cntTimeout->box(FL_NO_BOX);
                cntTimeout->color(FL_BACKGROUND_COLOR);
                cntTimeout->selection_color(FL_BACKGROUND_COLOR);
                cntTimeout->labeltype(FL_NORMAL_LABEL);
                cntTimeout->labelfont(0);
                cntTimeout->labelsize(14);
                cntTimeout->labelcolor(FL_FOREGROUND_COLOR);
                cntTimeout->value(10);
                cntTimeout->callback((Fl_Callback*)cb_cntTimeout);
                cntTimeout->align(Fl_Align(FL_ALIGN_RIGHT));
                cntTimeout->when(FL_WHEN_RELEASE);
                o->minimum(1); o->maximum(180); o->step(1);
                o->value(progdefaults.VIEWERtimeout);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Spinner2* cntTimeout
              { mnuViewerLabel = new Fl_Choice(40, 145, 150, 24, _("Channel label"));
                mnuViewerLabel->tooltip(_("Appearance of label on each channel"));
                mnuViewerLabel->down_box(FL_BORDER_BOX);
                mnuViewerLabel->callback((Fl_Callback*)cb_mnuViewerLabel);
                mnuViewerLabel->align(Fl_Align(FL_ALIGN_RIGHT));
                mnuViewerLabel->add(_("None")); mnuViewerLabel->add(_("Audio frequency"));
                mnuViewerLabel->add(_("Radio frequency")); mnuViewerLabel->add(_("Channel number"));
                mnuViewerLabel->value(progdefaults.VIEWERlabeltype);
              } // Fl_Choice* mnuViewerLabel
              { btnViewerFont = new Fl_Button(325, 145, 70, 24, _("Font..."));
                btnViewerFont->tooltip(_("select browser font"));
                btnViewerFont->callback((Fl_Callback*)cb_btnViewerFont);
              } // Fl_Button* btnViewerFont
              { Fl_Check_Button* o = btnFixedIntervals = new Fl_Check_Button(230, 131, 165, 20, _("Fixed Intervals"));
                btnFixedIntervals->tooltip(_("Force channel spacing to even 100 Hz increments"));
                btnFixedIntervals->down_box(FL_DOWN_BOX);
                btnFixedIntervals->value(1);
                btnFixedIntervals->callback((Fl_Callback*)cb_btnFixedIntervals);
                btnFixedIntervals->hide();
                o->value(progdefaults.VIEWERfixed);
              } // Fl_Check_Button* btnFixedIntervals
              { Fl_Check_Button* o = btnMarquee = new Fl_Check_Button(40, 183, 165, 20, _("Continuous scrolling"));
                btnMarquee->tooltip(_("ON - Marquee style\nOFF - Clear & restart"));
                btnMarquee->down_box(FL_DOWN_BOX);
                btnMarquee->callback((Fl_Callback*)cb_btnMarquee);
                o->value(progdefaults.VIEWERmarquee);
              } // Fl_Check_Button* btnMarquee
              { Fl_Check_Button* o = btnAscend = new Fl_Check_Button(40, 207, 253, 20, _("Lowest freq on bottom of viewer"));
                btnAscend->tooltip(_("Change positions of low to high channels"));
                btnAscend->down_box(FL_DOWN_BOX);
                btnAscend->callback((Fl_Callback*)cb_btnAscend);
                o->value(progdefaults.VIEWERascend);
              } // Fl_Check_Button* btnAscend
              { Fl_Check_Button* o = btnBrowserHistory = new Fl_Check_Button(40, 232, 356, 20, _("Play back history when active channel selected"));
                btnBrowserHistory->tooltip(_("Audio stream history decoded on selected signal"));
                btnBrowserHistory->down_box(FL_DOWN_BOX);
                btnBrowserHistory->callback((Fl_Callback*)cb_btnBrowserHistory);
                o->value(progdefaults.VIEWERhistory);
              } // Fl_Check_Button* btnBrowserHistory
              { Fl_Group* o = new Fl_Group(34, 281, 144, 60, _("Detection Level"));
                o->box(FL_ENGRAVED_FRAME);
                { bwsrSliderColor = new Fl_Button(41, 304, 60, 24, _("Backgnd"));
                bwsrSliderColor->tooltip(_("Background color of signal viewer squelch control"));
                bwsrSliderColor->callback((Fl_Callback*)cb_bwsrSliderColor);
                bwsrSliderColor->align(Fl_Align(FL_ALIGN_TOP));
                bwsrSliderColor->color(fl_rgb_color(progdefaults.bwsrSliderColor.R, progdefaults.bwsrSliderColor.G,progdefaults.bwsrSliderColor.B));
                } // Fl_Button* bwsrSliderColor
                { bwsrSldrSelColor = new Fl_Button(109, 304, 60, 24, _("Button"));
                bwsrSldrSelColor->tooltip(_("Slider hilite color of signal viewer squelch control"));
                bwsrSldrSelColor->callback((Fl_Callback*)cb_bwsrSldrSelColor);
                bwsrSldrSelColor->align(Fl_Align(FL_ALIGN_TOP));
                bwsrSldrSelColor->color(fl_rgb_color(progdefaults.bwsrSldrSelColor.R, progdefaults.bwsrSldrSelColor.G,progdefaults.bwsrSliderColor.B));
                } // Fl_Button* bwsrSldrSelColor
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(186, 281, 326, 60, _("Browser Line Colors"));
                o->box(FL_ENGRAVED_FRAME);
                { bwsrHiLite_1_color = new Fl_Button(192, 303, 60, 24, _("HiLite 1"));
                bwsrHiLite_1_color->tooltip(_("PSK/RTTY Viewer HiLite Color 1"));
                bwsrHiLite_1_color->callback((Fl_Callback*)cb_bwsrHiLite_1_color);
                bwsrHiLite_1_color->align(Fl_Align(FL_ALIGN_TOP));
                bwsrHiLite_1_color->color((Fl_Color)progdefaults.bwsrHiLight1);
                } // Fl_Button* bwsrHiLite_1_color
                { bwsrHiLite_2_color = new Fl_Button(255, 303, 60, 24, _("HiLite 2"));
                bwsrHiLite_2_color->tooltip(_("PSK/RTTY Viewer HiLite Color 2"));
                bwsrHiLite_2_color->callback((Fl_Callback*)cb_bwsrHiLite_2_color);
                bwsrHiLite_2_color->align(Fl_Align(FL_ALIGN_TOP));
                bwsrHiLite_2_color->color((Fl_Color)progdefaults.bwsrHiLight2);
                } // Fl_Button* bwsrHiLite_2_color
                { bwsrHiLite_even_lines = new Fl_Button(318, 303, 60, 24, _("Even"));
                bwsrHiLite_even_lines->tooltip(_("Even lines"));
                bwsrHiLite_even_lines->callback((Fl_Callback*)cb_bwsrHiLite_even_lines);
                bwsrHiLite_even_lines->align(Fl_Align(FL_ALIGN_TOP));
                bwsrHiLite_even_lines->color((Fl_Color)progdefaults.bwsrBackgnd2);
                } // Fl_Button* bwsrHiLite_even_lines
                { bwsrHiLite_odd_lines = new Fl_Button(381, 303, 60, 24, _("Odd"));
                bwsrHiLite_odd_lines->tooltip(_("Odd lines"));
                bwsrHiLite_odd_lines->callback((Fl_Callback*)cb_bwsrHiLite_odd_lines);
                bwsrHiLite_odd_lines->align(Fl_Align(FL_ALIGN_TOP));
                bwsrHiLite_odd_lines->color((Fl_Color)progdefaults.bwsrBackgnd1);
                } // Fl_Button* bwsrHiLite_odd_lines
                { bwsrHiLite_select = new Fl_Button(445, 303, 60, 24, _("Select"));
                bwsrHiLite_select->tooltip(_("Select line"));
                bwsrHiLite_select->callback((Fl_Callback*)cb_bwsrHiLite_select);
                bwsrHiLite_select->align(Fl_Align(FL_ALIGN_TOP));
                bwsrHiLite_select->color((Fl_Color)progdefaults.bwsrSelect);
                } // Fl_Button* bwsrHiLite_select
                o->end();
              } // Fl_Group* o
              o->end();
            } // Fl_Group* o
            tabBrowser->end();
          } // Fl_Group* tabBrowser
          { tabContest = new Fl_Group(0, 50, 540, 320, _("Contest"));
            tabContest->hide();
            { Fl_Group* o = new Fl_Group(25, 64, 490, 80, _("Exchanges"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { lblSend = new Fl_Box(57, 99, 55, 20, _("Send:"));
              } // Fl_Box* lblSend
              { Fl_Input2* o = inpSend1 = new Fl_Input2(115, 99, 140, 20, _("Exchange Out"));
                inpSend1->tooltip(_("free form exchange"));
                inpSend1->box(FL_DOWN_BOX);
                inpSend1->color(FL_BACKGROUND2_COLOR);
                inpSend1->selection_color(FL_SELECTION_COLOR);
                inpSend1->labeltype(FL_NORMAL_LABEL);
                inpSend1->labelfont(0);
                inpSend1->labelsize(14);
                inpSend1->labelcolor(FL_FOREGROUND_COLOR);
                inpSend1->callback((Fl_Callback*)cb_inpSend1);
                inpSend1->align(Fl_Align(FL_ALIGN_TOP));
                inpSend1->when(FL_WHEN_RELEASE);
                o->value(progdefaults.myXchg.c_str());
                inpSend1->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* inpSend1
              { Fl_Check_Button* o = btn599 = new Fl_Check_Button(330, 84, 130, 20, _("RST always 599"));
                btn599->tooltip(_("Force RST in/out to 599"));
                btn599->down_box(FL_DOWN_BOX);
                btn599->callback((Fl_Callback*)cb_btn599);
                o->value(progdefaults.fixed599);
              } // Fl_Check_Button* btn599
              { Fl_Check_Button* o = btnCutNbrs = new Fl_Check_Button(330, 114, 180, 20, _("Send CW cut numbers"));
                btnCutNbrs->tooltip(_("0 = T; 9 = N"));
                btnCutNbrs->down_box(FL_DOWN_BOX);
                btnCutNbrs->callback((Fl_Callback*)cb_btnCutNbrs);
                o->value(progdefaults.cutnbrs);
              } // Fl_Check_Button* btnCutNbrs
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(25, 154, 490, 65, _("Serial number"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { btnUseLeadingZeros = new Fl_Check_Button(46, 180, 154, 20, _("Use leading zeros"));
                btnUseLeadingZeros->tooltip(_("Insert leading zeros into Xmtd serial number"));
                btnUseLeadingZeros->down_box(FL_DOWN_BOX);
                btnUseLeadingZeros->value(1);
                btnUseLeadingZeros->callback((Fl_Callback*)cb_btnUseLeadingZeros);
              } // Fl_Check_Button* btnUseLeadingZeros
              { Fl_Value_Input2* o = nbrContestStart = new Fl_Value_Input2(241, 180, 45, 20, _("Start"));
                nbrContestStart->tooltip(_("Starting number"));
                nbrContestStart->box(FL_DOWN_BOX);
                nbrContestStart->color(FL_BACKGROUND2_COLOR);
                nbrContestStart->selection_color(FL_SELECTION_COLOR);
                nbrContestStart->labeltype(FL_NORMAL_LABEL);
                nbrContestStart->labelfont(0);
                nbrContestStart->labelsize(14);
                nbrContestStart->labelcolor(FL_FOREGROUND_COLOR);
                nbrContestStart->maximum(10000);
                nbrContestStart->step(1);
                nbrContestStart->callback((Fl_Callback*)cb_nbrContestStart);
                nbrContestStart->align(Fl_Align(FL_ALIGN_TOP));
                nbrContestStart->when(FL_WHEN_CHANGED);
                o->value(progdefaults.ContestStart);
              } // Fl_Value_Input2* nbrContestStart
              { nbrContestDigits = new Fl_Value_Input2(323, 179, 45, 20, _("Digits"));
                nbrContestDigits->tooltip(_("Number of digits in serial number"));
                nbrContestDigits->box(FL_DOWN_BOX);
                nbrContestDigits->color(FL_BACKGROUND2_COLOR);
                nbrContestDigits->selection_color(FL_SELECTION_COLOR);
                nbrContestDigits->labeltype(FL_NORMAL_LABEL);
                nbrContestDigits->labelfont(0);
                nbrContestDigits->labelsize(14);
                nbrContestDigits->labelcolor(FL_FOREGROUND_COLOR);
                nbrContestDigits->minimum(1);
                nbrContestDigits->maximum(5);
                nbrContestDigits->step(1);
                nbrContestDigits->value(3);
                nbrContestDigits->callback((Fl_Callback*)cb_nbrContestDigits);
                nbrContestDigits->align(Fl_Align(FL_ALIGN_TOP));
                nbrContestDigits->when(FL_WHEN_CHANGED);
              } // Fl_Value_Input2* nbrContestDigits
              { btnResetSerNbr = new Fl_Button(415, 180, 70, 20, _("Reset"));
                btnResetSerNbr->tooltip(_("Initialize the QSO logging fields"));
                btnResetSerNbr->callback((Fl_Callback*)cb_btnResetSerNbr);
              } // Fl_Button* btnResetSerNbr
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(25, 229, 490, 130, _("Duplicate check, CALL plus"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Light_Button* o = btnDupCheckOn = new Fl_Light_Button(35, 259, 74, 20, _("On/Off"));
                btnDupCheckOn->tooltip(_("Check for duplicates"));
                btnDupCheckOn->selection_color((Fl_Color)2);
                btnDupCheckOn->callback((Fl_Callback*)cb_btnDupCheckOn);
                o->value(progdefaults.EnableDupCheck);
              } // Fl_Light_Button* btnDupCheckOn
              { Fl_Check_Button* o = btnDupBand = new Fl_Check_Button(176, 259, 70, 20, _("Band"));
                btnDupBand->tooltip(_("Bands must match"));
                btnDupBand->down_box(FL_DOWN_BOX);
                btnDupBand->callback((Fl_Callback*)cb_btnDupBand);
                o->value(progdefaults.dupband);
              } // Fl_Check_Button* btnDupBand
              { Fl_Check_Button* o = btnDupMode = new Fl_Check_Button(296, 259, 70, 20, _("Mode"));
                btnDupMode->tooltip(_("Mode must match"));
                btnDupMode->down_box(FL_DOWN_BOX);
                btnDupMode->callback((Fl_Callback*)cb_btnDupMode);
                o->value(progdefaults.dupmode);
              } // Fl_Check_Button* btnDupMode
              { Fl_Check_Button* o = btnDupState = new Fl_Check_Button(415, 259, 70, 20, _("State"));
                btnDupState->tooltip(_("State must match"));
                btnDupState->down_box(FL_DOWN_BOX);
                btnDupState->callback((Fl_Callback*)cb_btnDupState);
                o->value(progdefaults.dupstate);
              } // Fl_Check_Button* btnDupState
              { Fl_Check_Button* o = btnDupXchg1 = new Fl_Check_Button(176, 287, 105, 20, _("Exchange In"));
                btnDupXchg1->tooltip(_("free form 1 must match"));
                btnDupXchg1->down_box(FL_DOWN_BOX);
                btnDupXchg1->callback((Fl_Callback*)cb_btnDupXchg1);
                o->value(progdefaults.dupxchg1);
              } // Fl_Check_Button* btnDupXchg1
              { Fl_Check_Button* o = btnDupTimeSpan = new Fl_Check_Button(176, 317, 129, 20, _("Time span over"));
                btnDupTimeSpan->tooltip(_("QSO must not occur within a time period of"));
                btnDupTimeSpan->down_box(FL_DOWN_BOX);
                btnDupTimeSpan->callback((Fl_Callback*)cb_btnDupTimeSpan);
                o->value(progdefaults.duptimespan);
              } // Fl_Check_Button* btnDupTimeSpan
              { Fl_Value_Input2* o = nbrTimeSpan = new Fl_Value_Input2(305, 317, 53, 20, _("minutes"));
                nbrTimeSpan->tooltip(_("Enter time span in minutes"));
                nbrTimeSpan->box(FL_DOWN_BOX);
                nbrTimeSpan->color(FL_BACKGROUND2_COLOR);
                nbrTimeSpan->selection_color(FL_SELECTION_COLOR);
                nbrTimeSpan->labeltype(FL_NORMAL_LABEL);
                nbrTimeSpan->labelfont(0);
                nbrTimeSpan->labelsize(14);
                nbrTimeSpan->labelcolor(FL_FOREGROUND_COLOR);
                nbrTimeSpan->maximum(1440);
                nbrTimeSpan->step(1);
                nbrTimeSpan->value(120);
                nbrTimeSpan->callback((Fl_Callback*)cb_nbrTimeSpan);
                nbrTimeSpan->align(Fl_Align(FL_ALIGN_RIGHT));
                nbrTimeSpan->when(FL_WHEN_CHANGED);
                o->value(progdefaults.timespan);
              } // Fl_Value_Input2* nbrTimeSpan
              { Fl_Button* o = btnDupColor = new Fl_Button(35, 286, 90, 22, _("Dup Color"));
                btnDupColor->tooltip(_("Left click to select dup color"));
                btnDupColor->box(FL_DOWN_BOX);
                btnDupColor->down_box(FL_DOWN_BOX);
                btnDupColor->color(FL_BACKGROUND2_COLOR);
                btnDupColor->selection_color(FL_BACKGROUND2_COLOR);
                btnDupColor->callback((Fl_Callback*)cb_btnDupColor);
                o->color(fl_rgb_color(progdefaults.dup_color.R, progdefaults.dup_color.G, progdefaults.dup_color.B));
              } // Fl_Button* btnDupColor
              o->end();
            } // Fl_Group* o
            tabContest->end();
          } // Fl_Group* tabContest
          { tabUserInterface = new Fl_Group(0, 50, 540, 320, _("General"));
            tabUserInterface->hide();
            { Fl_Group* o = new Fl_Group(21, 55, 496, 76);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Check_Button* o = btnShowTooltips = new Fl_Check_Button(56, 68, 120, 20, _("Show tooltips"));
                btnShowTooltips->tooltip(_("Enable / disable tooltips"));
                btnShowTooltips->down_box(FL_DOWN_BOX);
                btnShowTooltips->value(1);
                btnShowTooltips->callback((Fl_Callback*)cb_btnShowTooltips);
                o->value(progdefaults.tooltips);
              } // Fl_Check_Button* btnShowTooltips
              { Fl_Check_Button* o = chkMenuIcons = new Fl_Check_Button(200, 68, 150, 20, _("Show menu icons"));
                chkMenuIcons->tooltip(_("Enable / disable icons on menus"));
                chkMenuIcons->down_box(FL_DOWN_BOX);
                chkMenuIcons->callback((Fl_Callback*)cb_chkMenuIcons);
                o->value(progdefaults.menuicons);
              } // Fl_Check_Button* chkMenuIcons
              { mnuScheme = new Fl_Choice(174, 97, 80, 20, _("UI scheme"));
                mnuScheme->tooltip(_("Change application look and feel"));
                mnuScheme->down_box(FL_BORDER_BOX);
                mnuScheme->callback((Fl_Callback*)cb_mnuScheme);
                mnuScheme->align(Fl_Align(FL_ALIGN_RIGHT));
                mnuScheme->add("base");
                mnuScheme->add("gtk+");
                mnuScheme->add("plastic");
                mnuScheme->value(mnuScheme->find_item(progdefaults.ui_scheme.c_str()));
              } // Fl_Choice* mnuScheme
              { bVisibleModes = new Fl_Button(39, 97, 110, 20, _("Visible modes"));
                bVisibleModes->tooltip(_("Select modes for menu access"));
                bVisibleModes->callback((Fl_Callback*)cb_bVisibleModes);
              } // Fl_Button* bVisibleModes
              { mnuLang = new Fl_Choice(384, 97, 110, 20, _("UI language"));
                mnuLang->tooltip(_("Changes take effect on next program startup"));
                mnuLang->down_box(FL_BORDER_BOX);
                mnuLang->callback((Fl_Callback*)cb_mnuLang);
                mnuLang->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              } // Fl_Choice* mnuLang
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(21, 132, 496, 34);
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btn_rx_lowercase = new Fl_Check_Button(56, 139, 389, 20, _("Print CW / RTTY / THROB / CONTESTIA in lowercase"));
                btn_rx_lowercase->down_box(FL_DOWN_BOX);
                btn_rx_lowercase->callback((Fl_Callback*)cb_btn_rx_lowercase);
                o->value(progdefaults.rx_lowercase);
              } // Fl_Check_Button* btn_rx_lowercase
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(21, 167, 496, 34);
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btn_tx_lowercase = new Fl_Check_Button(56, 175, 389, 20, _("Transmit all text in lower case"));
                btn_tx_lowercase->down_box(FL_DOWN_BOX);
                btn_tx_lowercase->callback((Fl_Callback*)cb_btn_tx_lowercase);
                o->value(progdefaults.tx_lowercase);
              } // Fl_Check_Button* btn_tx_lowercase
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(21, 202, 496, 110, _("Exit prompts"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btn_save_config_on_exit = new Fl_Check_Button(56, 265, 233, 20, _("Prompt to save Configuration"));
                btn_save_config_on_exit->down_box(FL_DOWN_BOX);
                btn_save_config_on_exit->callback((Fl_Callback*)cb_btn_save_config_on_exit);
                o->value(progdefaults.SaveConfig);
              } // Fl_Check_Button* btn_save_config_on_exit
              { Fl_Check_Button* o = btn2_save_macros_on_exit = new Fl_Check_Button(56, 287, 233, 20, _("Prompt to save macro file"));
                btn2_save_macros_on_exit->tooltip(_("Write current macro set on program exit"));
                btn2_save_macros_on_exit->down_box(FL_DOWN_BOX);
                btn2_save_macros_on_exit->callback((Fl_Callback*)cb_btn2_save_macros_on_exit);
                o->value(progdefaults.SaveMacros);
              } // Fl_Check_Button* btn2_save_macros_on_exit
              { Fl_Check_Button* o = btn2NagMe = new Fl_Check_Button(300, 265, 166, 20, _("Prompt to save log"));
                btn2NagMe->tooltip(_("Bug me about saving log entries"));
                btn2NagMe->down_box(FL_DOWN_BOX);
                btn2NagMe->callback((Fl_Callback*)cb_btn2NagMe);
                o->value(progdefaults.NagMe);
              } // Fl_Check_Button* btn2NagMe
              { Fl_Box* o = new Fl_Box(61, 219, 436, 40, _("Exit prompts active only when File/Exit menu item selected.\nNot active if wi\
ndow decoration close button pressed."));
                o->box(FL_BORDER_BOX);
                o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
              } // Fl_Box* o
              { Fl_Check_Button* o = btn2_confirm_exit = new Fl_Check_Button(300, 287, 200, 20, _("Confirm exit"));
                btn2_confirm_exit->down_box(FL_DOWN_BOX);
                btn2_confirm_exit->callback((Fl_Callback*)cb_btn2_confirm_exit);
                o->value(progdefaults.confirmExit);
              } // Fl_Check_Button* btn2_confirm_exit
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(21, 314, 496, 54, _("Check for updates"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btn_check_for_updates = new Fl_Check_Button(56, 337, 324, 20, _("Check for updates when starting program"));
                btn_check_for_updates->down_box(FL_DOWN_BOX);
                btn_check_for_updates->callback((Fl_Callback*)cb_btn_check_for_updates);
                o->value(progdefaults.check_for_updates);
              } // Fl_Check_Button* btn_check_for_updates
              o->end();
            } // Fl_Group* o
            tabUserInterface->end();
          } // Fl_Group* tabUserInterface
          { tabLogServer = new Fl_Group(0, 50, 540, 320, _("Logging"));
            tabLogServer->hide();
            { Fl_Group* o = new Fl_Group(25, 313, 496, 55, _("Client/Server Logbook"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Input* o = xmllogServerAddress = new Fl_Input(122, 334, 100, 24, _("Address:"));
                xmllogServerAddress->tooltip(_("Enter URL address of server"));
                xmllogServerAddress->callback((Fl_Callback*)cb_xmllogServerAddress);
                o->value(progdefaults.xmllog_address.c_str());
              } // Fl_Input* xmllogServerAddress
              { Fl_Input* o = xmllogServerPort = new Fl_Input(280, 334, 70, 24, _("Port:"));
                xmllogServerPort->tooltip(_("Enter Port # assigned to server"));
                xmllogServerPort->callback((Fl_Callback*)cb_xmllogServerPort);
                o->value(progdefaults.xmllog_port.c_str());
              } // Fl_Input* xmllogServerPort
              { btn_reconnect_log_server = new Fl_Button(383, 334, 115, 24, _("Reconnect"));
                btn_reconnect_log_server->callback((Fl_Callback*)cb_btn_reconnect_log_server);
              } // Fl_Button* btn_reconnect_log_server
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(25, 57, 496, 180, _("QSO logging"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btnNagMe = new Fl_Check_Button(42, 79, 236, 20, _("Prompt to save log on exit"));
                btnNagMe->tooltip(_("Bug me about saving log entries"));
                btnNagMe->down_box(FL_DOWN_BOX);
                btnNagMe->callback((Fl_Callback*)cb_btnNagMe);
                o->value(progdefaults.NagMe);
              } // Fl_Check_Button* btnNagMe
              { Fl_Check_Button* o = btnClearOnSave = new Fl_Check_Button(42, 104, 236, 20, _("Clear on save"));
                btnClearOnSave->tooltip(_("Clear log entries after saving or using macro <LOG>"));
                btnClearOnSave->down_box(FL_DOWN_BOX);
                btnClearOnSave->callback((Fl_Callback*)cb_btnClearOnSave);
                o->value(progdefaults.ClearOnSave);
              } // Fl_Check_Button* btnClearOnSave
              { Fl_Check_Button* o = btnCallUpperCase = new Fl_Check_Button(42, 130, 236, 20, _("Convert callsign to upper case"));
                btnCallUpperCase->tooltip(_("Force callsign field to UPPERCASE"));
                btnCallUpperCase->down_box(FL_DOWN_BOX);
                btnCallUpperCase->callback((Fl_Callback*)cb_btnCallUpperCase);
                o->value(progdefaults.calluppercase);
              } // Fl_Check_Button* btnCallUpperCase
              { Fl_Check_Button* o = btnAutoFillQSO = new Fl_Check_Button(42, 155, 236, 20, _("Auto-fill Country and Azimuth"));
                btnAutoFillQSO->tooltip(_("Fill in Country / Azimuth using cty.dat information"));
                btnAutoFillQSO->down_box(FL_DOWN_BOX);
                btnAutoFillQSO->callback((Fl_Callback*)cb_btnAutoFillQSO);
                o->value(progdefaults.autofill_qso_fields);
              } // Fl_Check_Button* btnAutoFillQSO
              { Fl_Check_Button* o = btnDateTimeSort = new Fl_Check_Button(295, 79, 190, 20, _("Sort by Date/Time OFF"));
                btnDateTimeSort->tooltip(_("Sort by date/time OFF - effects all ADIF/Cabrillo reports"));
                btnDateTimeSort->down_box(FL_DOWN_BOX);
                btnDateTimeSort->callback((Fl_Callback*)cb_btnDateTimeSort);
                o->value(progdefaults.sort_date_time_off);
              } // Fl_Check_Button* btnDateTimeSort
              { Fl_Check_Button* o = btndate_time_force = new Fl_Check_Button(295, 104, 190, 20, _("Date time ON == OFF"));
                btndate_time_force->tooltip(_("Force date/time ON == date/time OFF"));
                btndate_time_force->down_box(FL_DOWN_BOX);
                btndate_time_force->callback((Fl_Callback*)cb_btndate_time_force);
                o->value(progdefaults.force_date_time);
              } // Fl_Check_Button* btndate_time_force
              { Fl_Check_Button* o = btnRSTindefault = new Fl_Check_Button(295, 129, 186, 20, _("Default RST in to 599"));
                btnRSTindefault->tooltip(_("Clear log controls sets RST in to 599"));
                btnRSTindefault->down_box(FL_DOWN_BOX);
                btnRSTindefault->callback((Fl_Callback*)cb_btnRSTindefault);
                o->value(progdefaults.RSTin_default);
              } // Fl_Check_Button* btnRSTindefault
              { Fl_Check_Button* o = btnRSTdefault = new Fl_Check_Button(295, 155, 184, 20, _("Default RST out to 599"));
                btnRSTdefault->tooltip(_("Clear log controls sets RST out to 599"));
                btnRSTdefault->down_box(FL_DOWN_BOX);
                btnRSTdefault->callback((Fl_Callback*)cb_btnRSTdefault);
                o->value(progdefaults.RSTdefault);
              } // Fl_Check_Button* btnRSTdefault
              { Fl_Input2* o = txt_cty_dat_pathname = new Fl_Input2(162, 178, 346, 24, _("cty.dat pathname"));
                txt_cty_dat_pathname->tooltip(_("Enter full path-filename for cty.dat"));
                txt_cty_dat_pathname->box(FL_DOWN_BOX);
                txt_cty_dat_pathname->color(FL_BACKGROUND2_COLOR);
                txt_cty_dat_pathname->selection_color(FL_SELECTION_COLOR);
                txt_cty_dat_pathname->labeltype(FL_NORMAL_LABEL);
                txt_cty_dat_pathname->labelfont(0);
                txt_cty_dat_pathname->labelsize(14);
                txt_cty_dat_pathname->labelcolor(FL_FOREGROUND_COLOR);
                txt_cty_dat_pathname->callback((Fl_Callback*)cb_txt_cty_dat_pathname);
                txt_cty_dat_pathname->align(Fl_Align(FL_ALIGN_LEFT));
                txt_cty_dat_pathname->when(FL_WHEN_CHANGED);
                o->value(progdefaults.cty_dat_pathname.c_str());
              } // Fl_Input2* txt_cty_dat_pathname
              { btn_select_cty_dat = new Fl_Button(43, 207, 75, 24, _("Browse"));
                btn_select_cty_dat->tooltip(_("Locate cty.dat file"));
                btn_select_cty_dat->callback((Fl_Callback*)cb_btn_select_cty_dat);
              } // Fl_Button* btn_select_cty_dat
              { btn_default_cty_dat = new Fl_Button(138, 207, 75, 24, _("Default"));
                btn_default_cty_dat->tooltip(_("Restore cty.dat default folder"));
                btn_default_cty_dat->callback((Fl_Callback*)cb_btn_default_cty_dat);
              } // Fl_Button* btn_default_cty_dat
              { btn_reload_cty_dat = new Fl_Button(233, 207, 75, 24, _("Reload"));
                btn_reload_cty_dat->tooltip(_("Reload cty.dat"));
                btn_reload_cty_dat->callback((Fl_Callback*)cb_btn_reload_cty_dat);
              } // Fl_Button* btn_reload_cty_dat
              { Fl_Input2* o = inpMyPower = new Fl_Input2(458, 207, 50, 24, _("Transmit Power"));
                inpMyPower->tooltip(_("Tx power used for logbook entries"));
                inpMyPower->box(FL_DOWN_BOX);
                inpMyPower->color(FL_BACKGROUND2_COLOR);
                inpMyPower->selection_color(FL_SELECTION_COLOR);
                inpMyPower->labeltype(FL_NORMAL_LABEL);
                inpMyPower->labelfont(0);
                inpMyPower->labelsize(14);
                inpMyPower->labelcolor(FL_FOREGROUND_COLOR);
                inpMyPower->callback((Fl_Callback*)cb_inpMyPower);
                inpMyPower->align(Fl_Align(FL_ALIGN_LEFT));
                inpMyPower->when(FL_WHEN_RELEASE);
                o->value(progdefaults.mytxpower.c_str());
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* inpMyPower
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(25, 238, 496, 74, _("Rx Text Capture"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btnRXClicks = new Fl_Check_Button(48, 285, 191, 20, _("Double-click to capture"));
                btnRXClicks->tooltip(_("Enable if you cannot use the middle mouse button"));
                btnRXClicks->down_box(FL_DOWN_BOX);
                btnRXClicks->callback((Fl_Callback*)cb_btnRXClicks);
                o->value(progdefaults.rxtext_clicks_qso_data);
              } // Fl_Check_Button* btnRXClicks
              { Fl_Check_Button* o = btnRXTooltips = new Fl_Check_Button(250, 285, 254, 20, _("callsign tooltips in received text"));
                btnRXTooltips->tooltip(_("Popup info after a 2 second hover on a callsign"));
                btnRXTooltips->down_box(FL_DOWN_BOX);
                btnRXTooltips->callback((Fl_Callback*)cb_btnRXTooltips);
                o->value(progdefaults.rxtext_tooltips);
              } // Fl_Check_Button* btnRXTooltips
              { Fl_Input2* o = inpNonword = new Fl_Input2(167, 258, 279, 24, _("Word delimiters"));
                inpNonword->tooltip(_("RX text QSO data entry is bounded by the non-word characters\ndefined here. T\
ab and newline are automatically included."));
                inpNonword->box(FL_DOWN_BOX);
                inpNonword->color(FL_BACKGROUND2_COLOR);
                inpNonword->selection_color(FL_SELECTION_COLOR);
                inpNonword->labeltype(FL_NORMAL_LABEL);
                inpNonword->labelfont(0);
                inpNonword->labelsize(14);
                inpNonword->labelcolor(FL_FOREGROUND_COLOR);
                inpNonword->textfont(4);
                inpNonword->callback((Fl_Callback*)cb_inpNonword);
                inpNonword->align(Fl_Align(FL_ALIGN_LEFT));
                inpNonword->when(FL_WHEN_RELEASE);
                o->value(progdefaults.nonwordchars.c_str());
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* inpNonword
              o->end();
            } // Fl_Group* o
            tabLogServer->end();
          } // Fl_Group* tabLogServer
          { tabMBars = new Fl_Group(0, 50, 540, 320, _("Macros"));
            tabMBars->hide();
            { Fl_Group* o = new Fl_Group(18, 250, 496, 40);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Check_Button* o = btnMacroMouseWheel = new Fl_Check_Button(28, 259, 296, 20, _("Mouse wheel active on macro buttons"));
                btnMacroMouseWheel->tooltip(_("enable mouse wheel control of macro bar"));
                btnMacroMouseWheel->down_box(FL_DOWN_BOX);
                btnMacroMouseWheel->callback((Fl_Callback*)cb_btnMacroMouseWheel);
                o->value(progdefaults.macro_wheel);
              } // Fl_Check_Button* btnMacroMouseWheel
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(18, 54, 496, 195, _("Number and position of macro bars"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { btn_oneA = new Fl_Round_Button(28, 84, 220, 20, _("One bar (above waterfall)"));
                btn_oneA->type(102);
                btn_oneA->down_box(FL_ROUND_DOWN_BOX);
                btn_oneA->callback((Fl_Callback*)cb_btn_oneA);
              } // Fl_Round_Button* btn_oneA
              { btn_oneB = new Fl_Round_Button(28, 114, 220, 20, _("One bar (below waterfall)"));
                btn_oneB->type(102);
                btn_oneB->down_box(FL_ROUND_DOWN_BOX);
                btn_oneB->callback((Fl_Callback*)cb_btn_oneB);
              } // Fl_Round_Button* btn_oneB
              { btn_twoA = new Fl_Round_Button(28, 144, 220, 20, _("Two bars (scheme 1)"));
                btn_twoA->type(102);
                btn_twoA->down_box(FL_ROUND_DOWN_BOX);
                btn_twoA->callback((Fl_Callback*)cb_btn_twoA);
              } // Fl_Round_Button* btn_twoA
              { btn_twoB = new Fl_Round_Button(258, 144, 219, 20, _("Two bars (scheme 2)"));
                btn_twoB->type(102);
                btn_twoB->down_box(FL_ROUND_DOWN_BOX);
                btn_twoB->callback((Fl_Callback*)cb_btn_twoB);
              } // Fl_Round_Button* btn_twoB
              { btn_twoC = new Fl_Round_Button(28, 174, 220, 20, _("Two bars (scheme 3)"));
                btn_twoC->type(102);
                btn_twoC->down_box(FL_ROUND_DOWN_BOX);
                btn_twoC->callback((Fl_Callback*)cb_btn_twoC);
              } // Fl_Round_Button* btn_twoC
              { btn_twoD = new Fl_Round_Button(258, 174, 220, 20, _("Two bars (scheme 4)"));
                btn_twoD->type(102);
                btn_twoD->down_box(FL_ROUND_DOWN_BOX);
                btn_twoD->callback((Fl_Callback*)cb_btn_twoD);
              } // Fl_Round_Button* btn_twoD
              { btn_twoE = new Fl_Round_Button(28, 204, 220, 20, _("Two bars (scheme 5)"));
                btn_twoE->type(102);
                btn_twoE->down_box(FL_ROUND_DOWN_BOX);
                btn_twoE->callback((Fl_Callback*)cb_btn_twoE);
              } // Fl_Round_Button* btn_twoE
              { btn_twoF = new Fl_Round_Button(258, 204, 220, 20, _("Two bars (scheme 6)"));
                btn_twoF->type(102);
                btn_twoF->down_box(FL_ROUND_DOWN_BOX);
                btn_twoF->callback((Fl_Callback*)cb_btn_twoF);
              } // Fl_Round_Button* btn_twoF
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(18, 292, 496, 76);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Check_Button* o = btnUseLastMacro = new Fl_Check_Button(28, 298, 277, 20, _("Load last used macro file on startup"));
                btnUseLastMacro->tooltip(_("ON - use last set of macros\nOFF - use default set"));
                btnUseLastMacro->down_box(FL_DOWN_BOX);
                btnUseLastMacro->callback((Fl_Callback*)cb_btnUseLastMacro);
                o->value(progdefaults.UseLastMacro);
              } // Fl_Check_Button* btnUseLastMacro
              { Fl_Check_Button* o = btnDisplayMacroFilename = new Fl_Check_Button(28, 320, 277, 20, _("Display macro filename on startup"));
                btnDisplayMacroFilename->tooltip(_("The filename is written to the RX text area"));
                btnDisplayMacroFilename->down_box(FL_DOWN_BOX);
                btnDisplayMacroFilename->callback((Fl_Callback*)cb_btnDisplayMacroFilename);
                o->value(progdefaults.DisplayMacroFilename);
              } // Fl_Check_Button* btnDisplayMacroFilename
              { Fl_Check_Button* o = btn_save_macros_on_exit = new Fl_Check_Button(28, 342, 305, 20, _("Prompt to save macro file when closing"));
                btn_save_macros_on_exit->tooltip(_("Write current macro set on program exit"));
                btn_save_macros_on_exit->down_box(FL_DOWN_BOX);
                btn_save_macros_on_exit->callback((Fl_Callback*)cb_btn_save_macros_on_exit);
                o->value(progdefaults.SaveMacros);
              } // Fl_Check_Button* btn_save_macros_on_exit
              o->end();
            } // Fl_Group* o
            tabMBars->end();
          } // Fl_Group* tabMBars
          { tabWF_UI = new Fl_Group(0, 50, 540, 320, _("WF Ctrls"));
            tabWF_UI->hide();
            { Fl_Group* o = new Fl_Group(23, 71, 496, 253);
              o->box(FL_ENGRAVED_BOX);
              { Fl_Box* o = new Fl_Box(52, 78, 446, 25, _("Enable check box to show each respective operator control"));
                o->box(FL_FLAT_BOX);
                o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
              } // Fl_Box* o
              { Fl_Check_Button* o = btnWF_UIrev = new Fl_Check_Button(79, 111, 150, 20, _("Reverse"));
                btnWF_UIrev->down_box(FL_DOWN_BOX);
                btnWF_UIrev->value(1);
                btnWF_UIrev->callback((Fl_Callback*)cb_btnWF_UIrev);
                o->value(progdefaults.WF_UIrev);
              } // Fl_Check_Button* btnWF_UIrev
              { Fl_Check_Button* o = btnWF_UIx1 = new Fl_Check_Button(298, 111, 162, 20, _("WF Magnification"));
                btnWF_UIx1->down_box(FL_DOWN_BOX);
                btnWF_UIx1->value(1);
                btnWF_UIx1->callback((Fl_Callback*)cb_btnWF_UIx1);
                o->value(progdefaults.WF_UIx1);
              } // Fl_Check_Button* btnWF_UIx1
              { Fl_Check_Button* o = btnWF_UIwfcarrier = new Fl_Check_Button(79, 142, 150, 20, _("WF carrier"));
                btnWF_UIwfcarrier->down_box(FL_DOWN_BOX);
                btnWF_UIwfcarrier->value(1);
                btnWF_UIwfcarrier->callback((Fl_Callback*)cb_btnWF_UIwfcarrier);
                o->value(progdefaults.WF_UIwfcarrier);
              } // Fl_Check_Button* btnWF_UIwfcarrier
              { Fl_Check_Button* o = btnWF_UIwfshift = new Fl_Check_Button(298, 142, 150, 20, _("WF Shift Controls"));
                btnWF_UIwfshift->down_box(FL_DOWN_BOX);
                btnWF_UIwfshift->value(1);
                btnWF_UIwfshift->callback((Fl_Callback*)cb_btnWF_UIwfshift);
                o->value(progdefaults.WF_UIwfshift);
              } // Fl_Check_Button* btnWF_UIwfshift
              { Fl_Check_Button* o = btnWF_UIwfreflevel = new Fl_Check_Button(79, 174, 150, 20, _("WF ref level"));
                btnWF_UIwfreflevel->down_box(FL_DOWN_BOX);
                btnWF_UIwfreflevel->value(1);
                btnWF_UIwfreflevel->callback((Fl_Callback*)cb_btnWF_UIwfreflevel);
                o->value(progdefaults.WF_UIwfreflevel);
              } // Fl_Check_Button* btnWF_UIwfreflevel
              { Fl_Check_Button* o = btnWF_UIwfdrop = new Fl_Check_Button(298, 174, 150, 20, _("WF drop rate"));
                btnWF_UIwfdrop->down_box(FL_DOWN_BOX);
                btnWF_UIwfdrop->value(1);
                btnWF_UIwfdrop->callback((Fl_Callback*)cb_btnWF_UIwfdrop);
                o->value(progdefaults.WF_UIwfdrop);
              } // Fl_Check_Button* btnWF_UIwfdrop
              { Fl_Check_Button* o = btnWF_UIwfampspan = new Fl_Check_Button(79, 206, 150, 20, _("WF amp span"));
                btnWF_UIwfampspan->down_box(FL_DOWN_BOX);
                btnWF_UIwfampspan->value(1);
                btnWF_UIwfampspan->callback((Fl_Callback*)cb_btnWF_UIwfampspan);
                o->value(progdefaults.WF_UIwfampspan);
              } // Fl_Check_Button* btnWF_UIwfampspan
              { Fl_Check_Button* o = btnWF_UIwfstore = new Fl_Check_Button(298, 206, 150, 20, _("WF Store"));
                btnWF_UIwfstore->down_box(FL_DOWN_BOX);
                btnWF_UIwfstore->value(1);
                btnWF_UIwfstore->callback((Fl_Callback*)cb_btnWF_UIwfstore);
                o->value(progdefaults.WF_UIwfstore);
              } // Fl_Check_Button* btnWF_UIwfstore
              { Fl_Check_Button* o = btnWF_UIwfmode = new Fl_Check_Button(79, 238, 150, 20, _("WF mode"));
                btnWF_UIwfmode->down_box(FL_DOWN_BOX);
                btnWF_UIwfmode->value(1);
                btnWF_UIwfmode->callback((Fl_Callback*)cb_btnWF_UIwfmode);
                o->value(progdefaults.WF_UIwfmode);
              } // Fl_Check_Button* btnWF_UIwfmode
              { Fl_Check_Button* o = btnWF_UIqsy = new Fl_Check_Button(298, 238, 150, 20, _("QSY"));
                btnWF_UIqsy->down_box(FL_DOWN_BOX);
                btnWF_UIqsy->value(1);
                btnWF_UIqsy->callback((Fl_Callback*)cb_btnWF_UIqsy);
                o->value(progdefaults.WF_UIqsy);
              } // Fl_Check_Button* btnWF_UIqsy
              { Fl_Check_Button* o = btnWF_UIxmtlock = new Fl_Check_Button(298, 270, 150, 20, _("XMT lock"));
                btnWF_UIxmtlock->down_box(FL_DOWN_BOX);
                btnWF_UIxmtlock->value(1);
                btnWF_UIxmtlock->callback((Fl_Callback*)cb_btnWF_UIxmtlock);
                o->value(progdefaults.WF_UIxmtlock);
              } // Fl_Check_Button* btnWF_UIxmtlock
              { btn_wf_enable_all = new Fl_Button(123, 293, 88, 20, _("Enable all"));
                btn_wf_enable_all->callback((Fl_Callback*)cb_btn_wf_enable_all);
              } // Fl_Button* btn_wf_enable_all
              { btn_wf_disable_all = new Fl_Button(322, 293, 88, 20, _("Disable all"));
                btn_wf_disable_all->callback((Fl_Callback*)cb_btn_wf_disable_all);
              } // Fl_Button* btn_wf_disable_all
              o->end();
            } // Fl_Group* o
            tabWF_UI->end();
          } // Fl_Group* tabWF_UI
          { tabColorsFonts = new Fl_Group(0, 50, 540, 320, _("Colors/Fonts"));
            tabColorsFonts->hide();
            { tabsColors = new Fl_Tabs(0, 55, 540, 313);
              { Fl_Group* o = new Fl_Group(0, 80, 540, 283, _("Rx/Tx"));
                { CHARSETstatus = new Fl_Menu_Button(99, 109, 165, 26, _("Char set"));
                CHARSETstatus->tooltip(_("Select Rx/Tx Character Set"));
                CHARSETstatus->color((Fl_Color)55);
                CHARSETstatus->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
                } // Fl_Menu_Button* CHARSETstatus
                { RxText = new Fl_Input(99, 143, 165, 36);
                RxText->value("Receive Text");
                RxText->color(fl_rgb_color(progdefaults.RxColor.R, progdefaults.RxColor.G, progdefaults.RxColor.B));
                RxText->textfont(progdefaults.RxFontnbr); RxText->textsize(progdefaults.RxFontsize); RxText->textcolor(progdefaults.RxFontcolor);
                RxText->type(FL_MULTILINE_INPUT_WRAP);
                } // Fl_Input* RxText
                { btnRxColor = new Fl_Button(273, 150, 75, 21, _("Rx bkgnd"));
                btnRxColor->callback((Fl_Callback*)cb_btnRxColor);
                } // Fl_Button* btnRxColor
                { btnTxColor = new Fl_Button(273, 191, 75, 21, _("Tx bkgnd"));
                btnTxColor->callback((Fl_Callback*)cb_btnTxColor);
                } // Fl_Button* btnTxColor
                { TxText = new Fl_Input(99, 186, 165, 37);
                TxText->value("Transmit Text");
                TxText->color(fl_rgb_color(progdefaults.TxColor.R, progdefaults.TxColor.G, progdefaults.TxColor.B));
                TxText->textfont(progdefaults.TxFontnbr); TxText->textsize(progdefaults.TxFontsize); TxText->textcolor(progdefaults.TxFontcolor);
                TxText->type(FL_MULTILINE_INPUT_WRAP);
                } // Fl_Input* TxText
                { btnRxFont = new Fl_Button(358, 150, 75, 21, _("Rx font"));
                btnRxFont->callback((Fl_Callback*)cb_btnRxFont);
                } // Fl_Button* btnRxFont
                { btnTxFont = new Fl_Button(358, 191, 75, 21, _("Tx font"));
                btnTxFont->callback((Fl_Callback*)cb_btnTxFont);
                } // Fl_Button* btnTxFont
                { Fl_Group* o = new Fl_Group(71, 235, 404, 81, _("Text Highlighting"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
                { btnXMIT = new Fl_Button(89, 263, 40, 21, _("XMIT"));
                btnXMIT->tooltip(_("Sent chars in Rx/Tx pane"));
                btnXMIT->callback((Fl_Callback*)cb_btnXMIT);
                btnXMIT->align(Fl_Align(FL_ALIGN_BOTTOM));
                btnXMIT->color(progdefaults.XMITcolor);
                } // Fl_Button* btnXMIT
                { btnCTRL = new Fl_Button(132, 263, 40, 21, _("CTRL"));
                btnCTRL->tooltip(_("Control chars in Rx/Tx pane"));
                btnCTRL->callback((Fl_Callback*)cb_btnCTRL);
                btnCTRL->align(Fl_Align(FL_ALIGN_BOTTOM));
                btnCTRL->color(progdefaults.CTRLcolor);
                } // Fl_Button* btnCTRL
                { btnSKIP = new Fl_Button(176, 263, 40, 21, _("SKIP"));
                btnSKIP->tooltip(_("Skipped chars in Tx pane\n(Tx on/off in CW)"));
                btnSKIP->callback((Fl_Callback*)cb_btnSKIP);
                btnSKIP->align(Fl_Align(FL_ALIGN_BOTTOM));
                btnSKIP->color(progdefaults.SKIPcolor);
                } // Fl_Button* btnSKIP
                { btnALTR = new Fl_Button(219, 263, 40, 21, _("ALTR"));
                btnALTR->tooltip(_("Alternate character color in Rx panelr"));
                btnALTR->callback((Fl_Callback*)cb_btnALTR);
                btnALTR->align(Fl_Align(FL_ALIGN_BOTTOM));
                btnALTR->color(progdefaults.ALTRcolor);
                } // Fl_Button* btnALTR
                { btnSEL = new Fl_Button(263, 263, 39, 21, _("SEL"));
                btnSEL->tooltip(_("Selection background color in Rx Tx panels"));
                btnSEL->callback((Fl_Callback*)cb_btnSEL);
                btnSEL->align(Fl_Align(FL_ALIGN_BOTTOM));
                btnSEL->color(progdefaults.RxTxSelectcolor);
                } // Fl_Button* btnSEL
                { btnNoTextColor = new Fl_Button(310, 263, 70, 21, _("System"));
                btnNoTextColor->callback((Fl_Callback*)cb_btnNoTextColor);
                } // Fl_Button* btnNoTextColor
                { btnTextDefaults = new Fl_Button(384, 263, 70, 21, _("Defaults"));
                btnTextDefaults->callback((Fl_Callback*)cb_btnTextDefaults);
                } // Fl_Button* btnTextDefaults
                o->end();
                } // Fl_Group* o
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(0, 80, 540, 283, _("Frq Disp"));
                o->hide();
                { Fl_Group* o = new Fl_Group(81, 108, 370, 87);
                o->box(FL_ENGRAVED_FRAME);
                { Fl_Box* o = FDdisplay = new Fl_Box(148, 112, 235, 45, _("14070.150"));
                FDdisplay->box(FL_DOWN_BOX);
                FDdisplay->color((Fl_Color)55);
                FDdisplay->labelfont(4);
                FDdisplay->labelsize(40);
                o->color(fl_rgb_color(progdefaults.FDbackground.R,progdefaults.FDbackground.G,progdefaults.FDbackground.B));
                o->labelcolor(fl_rgb_color(progdefaults.FDforeground.R,progdefaults.FDforeground.G,progdefaults.FDforeground.B));
                o->labelfont(progdefaults.FreqControlFontnbr);
                } // Fl_Box* FDdisplay
                { btn_freq_control_font = new Fl_Button(91, 163, 80, 24, _("Font"));
                btn_freq_control_font->callback((Fl_Callback*)cb_btn_freq_control_font);
                } // Fl_Button* btn_freq_control_font
                { btnBackgroundColor = new Fl_Button(181, 163, 80, 24, _("Bg Color"));
                btnBackgroundColor->callback((Fl_Callback*)cb_btnBackgroundColor);
                } // Fl_Button* btnBackgroundColor
                { btnForegroundColor = new Fl_Button(271, 163, 80, 24, _("Digit Color"));
                btnForegroundColor->callback((Fl_Callback*)cb_btnForegroundColor);
                } // Fl_Button* btnForegroundColor
                { btnFD_SystemColor = new Fl_Button(362, 163, 80, 24, _("Sys Colors"));
                btnFD_SystemColor->callback((Fl_Callback*)cb_btnFD_SystemColor);
                } // Fl_Button* btnFD_SystemColor
                o->end();
                } // Fl_Group* o
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(0, 80, 540, 283, _("Log"));
                o->hide();
                { Fl_Group* o = new Fl_Group(75, 101, 372, 65, _("Logging Panel Controls"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Output* o = LOGGINGdisplay = new Fl_Output(93, 125, 98, 25);
                o->textfont(progdefaults.LOGGINGtextfont);o->textsize(progdefaults.LOGGINGtextsize);o->textcolor(progdefaults.LOGGINGtextcolor);
                o->color(progdefaults.LOGGINGcolor);
                o->value("W1HKJ");
                o->redraw();
                } // Fl_Output* LOGGINGdisplay
                { btnLOGGING_color = new Fl_Button(201, 125, 80, 25, _("Bg Color"));
                btnLOGGING_color->callback((Fl_Callback*)cb_btnLOGGING_color);
                } // Fl_Button* btnLOGGING_color
                { btn_LOGGING_font = new Fl_Button(291, 125, 55, 25, _("Font"));
                btn_LOGGING_font->callback((Fl_Callback*)cb_btn_LOGGING_font);
                } // Fl_Button* btn_LOGGING_font
                { btnLOGGINGdefault_colors_font = new Fl_Button(357, 125, 80, 25, _("Default"));
                btnLOGGINGdefault_colors_font->callback((Fl_Callback*)cb_btnLOGGINGdefault_colors_font);
                } // Fl_Button* btnLOGGINGdefault_colors_font
                o->end();
                } // Fl_Group* o
                { Fl_Group* o = new Fl_Group(77, 176, 370, 65, _("Logbook Dialog"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Output* o = LOGBOOKdisplay = new Fl_Output(93, 200, 98, 25);
                o->textfont(progdefaults.LOGGINGtextfont);o->textsize(progdefaults.LOGGINGtextsize);o->textcolor(progdefaults.LOGBOOKtextcolor);
                o->color(progdefaults.LOGBOOKcolor);
                o->value("14.070000");
                o->redraw();
                } // Fl_Output* LOGBOOKdisplay
                { btnLOGBOOK_color = new Fl_Button(201, 200, 80, 25, _("Bg Color"));
                btnLOGBOOK_color->callback((Fl_Callback*)cb_btnLOGBOOK_color);
                } // Fl_Button* btnLOGBOOK_color
                { btn_LOGBOOK_font = new Fl_Button(291, 200, 55, 25, _("Font"));
                btn_LOGBOOK_font->callback((Fl_Callback*)cb_btn_LOGBOOK_font);
                } // Fl_Button* btn_LOGBOOK_font
                { btnLOGBOOKdefault_colors_font = new Fl_Button(357, 200, 80, 25, _("Default"));
                btnLOGBOOKdefault_colors_font->callback((Fl_Callback*)cb_btnLOGBOOKdefault_colors_font);
                } // Fl_Button* btnLOGBOOKdefault_colors_font
                o->end();
                } // Fl_Group* o
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(0, 80, 540, 283, _("F_keys"));
                o->hide();
                { btnUseGroupColors = new Fl_Check_Button(94, 107, 165, 21, _("Use colored buttons"));
                btnUseGroupColors->down_box(FL_DOWN_BOX);
                btnUseGroupColors->callback((Fl_Callback*)cb_btnUseGroupColors);
                btnUseGroupColors->value(progdefaults.useGroupColors);
                } // Fl_Check_Button* btnUseGroupColors
                { btnGroup1 = new Fl_Button(94, 139, 75, 20, _("Group 1"));
                btnGroup1->tooltip(_("Background color for Function key group 1"));
                btnGroup1->callback((Fl_Callback*)cb_btnGroup1);
                btnGroup1->color(fl_rgb_color(progdefaults.btnGroup1.R, progdefaults.btnGroup1.G,progdefaults.btnGroup1.B));
                btnGroup1->labelcolor(fl_rgb_color(progdefaults.btnFkeyTextColor.R, progdefaults.btnFkeyTextColor.R, progdefaults.btnFkeyTextColor.R));
                } // Fl_Button* btnGroup1
                { btnGroup2 = new Fl_Button(185, 139, 75, 20, _("Group 2"));
                btnGroup2->tooltip(_("Background color for Function key group 2"));
                btnGroup2->callback((Fl_Callback*)cb_btnGroup2);
                btnGroup2->color(fl_rgb_color(progdefaults.btnGroup2.R, progdefaults.btnGroup2.G,progdefaults.btnGroup2.B));
                btnGroup2->labelcolor(fl_rgb_color(progdefaults.btnFkeyTextColor.R, progdefaults.btnFkeyTextColor.R, progdefaults.btnFkeyTextColor.R));
                } // Fl_Button* btnGroup2
                { btnGroup3 = new Fl_Button(277, 139, 75, 20, _("Group 3"));
                btnGroup3->tooltip(_("Background color for Function key group 3"));
                btnGroup3->callback((Fl_Callback*)cb_btnGroup3);
                btnGroup3->color(fl_rgb_color(progdefaults.btnGroup3.R, progdefaults.btnGroup3.G,progdefaults.btnGroup3.B));
                btnGroup3->labelcolor(fl_rgb_color(progdefaults.btnFkeyTextColor.R, progdefaults.btnFkeyTextColor.R, progdefaults.btnFkeyTextColor.R));
                } // Fl_Button* btnGroup3
                { btnFkeyTextColor = new Fl_Button(277, 107, 75, 21, _("Label text"));
                btnFkeyTextColor->callback((Fl_Callback*)cb_btnFkeyTextColor);
                btnFkeyTextColor->color(fl_rgb_color(progdefaults.btnFkeyTextColor.R, progdefaults.btnFkeyTextColor.G, progdefaults.btnFkeyTextColor.B));
                adjust_label(btnFkeyTextColor);
                } // Fl_Button* btnFkeyTextColor
                { btnFkeyDEfaults = new Fl_Button(369, 139, 75, 20, _("Defaults"));
                btnFkeyDEfaults->callback((Fl_Callback*)cb_btnFkeyDEfaults);
                } // Fl_Button* btnFkeyDEfaults
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(0, 80, 540, 283, _("Tabs"));
                o->hide();
                { btnTabColor = new Fl_Button(162, 113, 75, 21, _("Tab Color"));
                btnTabColor->callback((Fl_Callback*)cb_btnTabColor);
                } // Fl_Button* btnTabColor
                { btnTabDefaultColor = new Fl_Button(292, 113, 75, 21, _("System"));
                btnTabDefaultColor->callback((Fl_Callback*)cb_btnTabDefaultColor);
                } // Fl_Button* btnTabDefaultColor
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(0, 80, 540, 283, _("Buttons"));
                o->hide();
                { btnSpotColor = new Fl_Button(118, 121, 70, 21, _("Spot"));
                btnSpotColor->callback((Fl_Callback*)cb_btnSpotColor);
                } // Fl_Button* btnSpotColor
                { btnRxIDColor = new Fl_Button(118, 156, 70, 21, _("RxID"));
                btnRxIDColor->callback((Fl_Callback*)cb_btnRxIDColor);
                } // Fl_Button* btnRxIDColor
                { btnTxIDColor = new Fl_Button(118, 193, 70, 20, _("TxID"));
                btnTxIDColor->callback((Fl_Callback*)cb_btnTxIDColor);
                } // Fl_Button* btnTxIDColor
                { btnTuneColor = new Fl_Button(118, 229, 70, 21, _("Tune"));
                btnTuneColor->callback((Fl_Callback*)cb_btnTuneColor);
                } // Fl_Button* btnTuneColor
                { btnLkColor = new Fl_Button(229, 121, 70, 21, _("Lk"));
                btnLkColor->callback((Fl_Callback*)cb_btnLkColor);
                } // Fl_Button* btnLkColor
                { btnRevColor = new Fl_Button(229, 156, 70, 21, _("Rev"));
                btnRevColor->callback((Fl_Callback*)cb_btnRevColor);
                } // Fl_Button* btnRevColor
                { btnXmtColor = new Fl_Button(229, 192, 70, 20, _("T/R"));
                btnXmtColor->callback((Fl_Callback*)cb_btnXmtColor);
                } // Fl_Button* btnXmtColor
                { btnAfcColor = new Fl_Button(344, 120, 70, 21, _("AFC"));
                btnAfcColor->callback((Fl_Callback*)cb_btnAfcColor);
                } // Fl_Button* btnAfcColor
                { btnSql1Color = new Fl_Button(344, 157, 70, 21, _("SQL-1"));
                btnSql1Color->callback((Fl_Callback*)cb_btnSql1Color);
                } // Fl_Button* btnSql1Color
                { btnSql2Color = new Fl_Button(344, 193, 70, 20, _("SQL-2"));
                btnSql2Color->callback((Fl_Callback*)cb_btnSql2Color);
                } // Fl_Button* btnSql2Color
                { Fl_Box* o = spotcolor = new Fl_Box(99, 122, 18, 19);
                spotcolor->box(FL_THIN_DOWN_BOX);
                spotcolor->color((Fl_Color)3);
                o->color(progdefaults.SpotColor);
                } // Fl_Box* spotcolor
                { Fl_Box* o = rxidcolor = new Fl_Box(99, 157, 18, 19);
                rxidcolor->box(FL_THIN_DOWN_BOX);
                o->color(progdefaults.RxIDColor);
                } // Fl_Box* rxidcolor
                { Fl_Box* o = txidcolor = new Fl_Box(99, 194, 18, 18);
                txidcolor->box(FL_THIN_DOWN_BOX);
                o->color(progdefaults.TxIDColor);
                } // Fl_Box* txidcolor
                { Fl_Box* o = tunecolor = new Fl_Box(99, 230, 18, 19);
                tunecolor->box(FL_THIN_DOWN_BOX);
                o->color(progdefaults.TuneColor);
                } // Fl_Box* tunecolor
                { Fl_Box* o = lockcolor = new Fl_Box(209, 121, 18, 19);
                lockcolor->box(FL_THIN_DOWN_BOX);
                lockcolor->color((Fl_Color)3);
                o->color(progdefaults.LkColor);
                } // Fl_Box* lockcolor
                { Fl_Box* o = revcolor = new Fl_Box(209, 157, 18, 19);
                revcolor->box(FL_THIN_DOWN_BOX);
                o->color(progdefaults.RevColor);
                } // Fl_Box* revcolor
                { Fl_Box* o = xmtcolor = new Fl_Box(209, 193, 18, 18);
                xmtcolor->box(FL_THIN_DOWN_BOX);
                o->color(progdefaults.XmtColor);
                } // Fl_Box* xmtcolor
                { Fl_Box* o = afccolor = new Fl_Box(324, 122, 18, 19);
                afccolor->box(FL_THIN_DOWN_BOX);
                afccolor->color((Fl_Color)3);
                o->color(progdefaults.AfcColor);
                } // Fl_Box* afccolor
                { Fl_Box* o = sql1color = new Fl_Box(324, 158, 18, 19);
                sql1color->box(FL_THIN_DOWN_BOX);
                o->color(progdefaults.Sql1Color);
                } // Fl_Box* sql1color
                { Fl_Box* o = sql2color = new Fl_Box(324, 194, 18, 18);
                sql2color->box(FL_THIN_DOWN_BOX);
                o->color(progdefaults.Sql2Color);
                } // Fl_Box* sql2color
                { Fl_Box* o = new Fl_Box(207, 229, 220, 20, _("Lighted button enabled colors"));
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                } // Fl_Box* o
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(0, 80, 540, 283, _("SigLvl"));
                o->hide();
                { btnLowSignal = new Fl_Button(183, 142, 70, 21, _("Low"));
                btnLowSignal->callback((Fl_Callback*)cb_btnLowSignal);
                } // Fl_Button* btnLowSignal
                { Fl_Box* o = lowcolor = new Fl_Box(162, 142, 21, 21);
                lowcolor->box(FL_DIAMOND_DOWN_BOX);
                lowcolor->color(FL_FOREGROUND_COLOR);
                o->color(progdefaults.LowSignal);
                } // Fl_Box* lowcolor
                { btnHighSignal = new Fl_Button(183, 180, 70, 21, _("High"));
                btnHighSignal->callback((Fl_Callback*)cb_btnHighSignal);
                } // Fl_Button* btnHighSignal
                { Fl_Box* o = highcolor = new Fl_Box(162, 180, 21, 21);
                highcolor->box(FL_DIAMOND_DOWN_BOX);
                highcolor->color((Fl_Color)3);
                o->color(progdefaults.HighSignal);
                } // Fl_Box* highcolor
                { btnNormalSignal = new Fl_Button(306, 142, 70, 21, _("Normal"));
                btnNormalSignal->callback((Fl_Callback*)cb_btnNormalSignal);
                } // Fl_Button* btnNormalSignal
                { Fl_Box* o = normalcolor = new Fl_Box(285, 141, 21, 21);
                normalcolor->box(FL_DIAMOND_DOWN_BOX);
                normalcolor->color((Fl_Color)2);
                o->color(progdefaults.NormSignal);
                } // Fl_Box* normalcolor
                { btnOverSignal = new Fl_Button(306, 180, 70, 21, _("Over"));
                btnOverSignal->callback((Fl_Callback*)cb_btnOverSignal);
                } // Fl_Button* btnOverSignal
                { Fl_Box* o = overcolor = new Fl_Box(285, 180, 21, 21);
                overcolor->box(FL_DIAMOND_DOWN_BOX);
                overcolor->color((Fl_Color)1);
                o->color(progdefaults.OverSignal);
                } // Fl_Box* overcolor
                { new Fl_Box(108, 110, 316, 21, _("Signal Level Colors"));
                } // Fl_Box* o
                o->end();
              } // Fl_Group* o
              tabsColors->end();
            } // Fl_Tabs* tabsColors
            tabColorsFonts->end();
          } // Fl_Group* tabColorsFonts
          tabsUI->end();
        } // Fl_Tabs* tabsUI
        tabUI->end();
      } // Fl_Group* tabUI
      { tabWaterfall = new Fl_Group(-2, 25, 563, 347, _("Waterfall"));
        tabWaterfall->hide();
        { tabsWaterfall = new Fl_Tabs(-2, 25, 563, 347);
          tabsWaterfall->color(FL_LIGHT1);
          tabsWaterfall->selection_color(FL_LIGHT1);
          { Fl_Group* o = new Fl_Group(0, 48, 540, 320, _("Display"));
            { Fl_Group* o = new Fl_Group(24, 54, 496, 190, _("Colors and cursors"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { colorbox* o = WF_Palette = new colorbox(34, 90, 380, 24, _("aa"));
                WF_Palette->box(FL_DOWN_BOX);
                WF_Palette->color(FL_FOREGROUND_COLOR);
                WF_Palette->selection_color(FL_BACKGROUND_COLOR);
                WF_Palette->labeltype(FL_NORMAL_LABEL);
                WF_Palette->labelfont(0);
                WF_Palette->labelsize(12);
                WF_Palette->labelcolor(FL_FOREGROUND_COLOR);
                WF_Palette->callback((Fl_Callback*)cb_WF_Palette);
                WF_Palette->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                WF_Palette->when(FL_WHEN_RELEASE);
                o->label(progdefaults.PaletteName.c_str());
                o->labelsize(FL_NORMAL_SIZE);
              } // colorbox* WF_Palette
              { btnColor[0] = new Fl_Button(34, 116, 20, 24);
                btnColor[0]->tooltip(_("Change color"));
                btnColor[0]->callback((Fl_Callback*)cb_btnColor);
              } // Fl_Button* btnColor[0]
              { btnColor[1] = new Fl_Button(79, 116, 20, 24);
                btnColor[1]->tooltip(_("Change color"));
                btnColor[1]->callback((Fl_Callback*)cb_btnColor1);
              } // Fl_Button* btnColor[1]
              { btnColor[2] = new Fl_Button(124, 116, 20, 24);
                btnColor[2]->tooltip(_("Change color"));
                btnColor[2]->callback((Fl_Callback*)cb_btnColor2);
              } // Fl_Button* btnColor[2]
              { btnColor[3] = new Fl_Button(169, 116, 20, 24);
                btnColor[3]->tooltip(_("Change color"));
                btnColor[3]->callback((Fl_Callback*)cb_btnColor3);
              } // Fl_Button* btnColor[3]
              { btnColor[4] = new Fl_Button(214, 116, 20, 24);
                btnColor[4]->tooltip(_("Change color"));
                btnColor[4]->callback((Fl_Callback*)cb_btnColor4);
              } // Fl_Button* btnColor[4]
              { btnColor[5] = new Fl_Button(259, 116, 20, 24);
                btnColor[5]->tooltip(_("Change color"));
                btnColor[5]->callback((Fl_Callback*)cb_btnColor5);
              } // Fl_Button* btnColor[5]
              { btnColor[6] = new Fl_Button(304, 116, 20, 24);
                btnColor[6]->tooltip(_("Change color"));
                btnColor[6]->callback((Fl_Callback*)cb_btnColor6);
              } // Fl_Button* btnColor[6]
              { btnColor[7] = new Fl_Button(349, 116, 20, 24);
                btnColor[7]->tooltip(_("Change color"));
                btnColor[7]->callback((Fl_Callback*)cb_btnColor7);
              } // Fl_Button* btnColor[7]
              { btnColor[8] = new Fl_Button(394, 116, 20, 24);
                btnColor[8]->tooltip(_("Change color"));
                btnColor[8]->callback((Fl_Callback*)cb_btnColor8);
              } // Fl_Button* btnColor[8]
              { btnLoadPalette = new Fl_Button(424, 90, 70, 24, _("Load..."));
                btnLoadPalette->tooltip(_("Load a new palette"));
                btnLoadPalette->callback((Fl_Callback*)cb_btnLoadPalette);
              } // Fl_Button* btnLoadPalette
              { btnSavePalette = new Fl_Button(424, 116, 70, 24, _("Save..."));
                btnSavePalette->tooltip(_("Save this palette"));
                btnSavePalette->callback((Fl_Callback*)cb_btnSavePalette);
              } // Fl_Button* btnSavePalette
              { Fl_Group* o = new Fl_Group(33, 144, 113, 96, _("Bandwidth"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Check_Button* o = btnUseCursorLines = new Fl_Check_Button(61, 164, 56, 20, _("ON"));
                btnUseCursorLines->tooltip(_("Show cursor with bandwidth lines"));
                btnUseCursorLines->down_box(FL_DOWN_BOX);
                btnUseCursorLines->callback((Fl_Callback*)cb_btnUseCursorLines);
                o->value(progdefaults.UseCursorLines);
                } // Fl_Check_Button* btnUseCursorLines
                { Fl_Button* o = btnCursorBWcolor = new Fl_Button(61, 187, 20, 20, _("Color"));
                btnCursorBWcolor->tooltip(_("Change color"));
                btnCursorBWcolor->color((Fl_Color)3);
                btnCursorBWcolor->callback((Fl_Callback*)cb_btnCursorBWcolor);
                btnCursorBWcolor->align(Fl_Align(FL_ALIGN_RIGHT));
                o->color(fl_rgb_color(progdefaults.cursorLineRGBI.R,progdefaults.cursorLineRGBI.G,progdefaults.cursorLineRGBI.B));
                } // Fl_Button* btnCursorBWcolor
                { Fl_Check_Button* o = btnUseWideCursor = new Fl_Check_Button(61, 210, 62, 20, _("Wide"));
                btnUseWideCursor->tooltip(_("Show bandwidth tracks on waterfall"));
                btnUseWideCursor->down_box(FL_DOWN_BOX);
                btnUseWideCursor->callback((Fl_Callback*)cb_btnUseWideCursor);
                o->value(progdefaults.UseWideCursor);
                } // Fl_Check_Button* btnUseWideCursor
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(157, 144, 113, 96, _("Center line"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Check_Button* o = btnUseCursorCenterLine = new Fl_Check_Button(189, 164, 48, 20, _("ON"));
                btnUseCursorCenterLine->tooltip(_("Show cursor with center line"));
                btnUseCursorCenterLine->down_box(FL_DOWN_BOX);
                btnUseCursorCenterLine->callback((Fl_Callback*)cb_btnUseCursorCenterLine);
                o->value(progdefaults.UseCursorCenterLine);
                } // Fl_Check_Button* btnUseCursorCenterLine
                { Fl_Button* o = btnCursorCenterLineColor = new Fl_Button(189, 187, 20, 20, _("Color"));
                btnCursorCenterLineColor->tooltip(_("Change color"));
                btnCursorCenterLineColor->color(FL_BACKGROUND2_COLOR);
                btnCursorCenterLineColor->callback((Fl_Callback*)cb_btnCursorCenterLineColor);
                btnCursorCenterLineColor->align(Fl_Align(FL_ALIGN_RIGHT));
                o->color(fl_rgb_color(progdefaults.cursorCenterRGBI.R,progdefaults.cursorCenterRGBI.G,progdefaults.cursorCenterRGBI.B));
                } // Fl_Button* btnCursorCenterLineColor
                { Fl_Check_Button* o = btnUseWideCenter = new Fl_Check_Button(189, 212, 69, 20, _("Wide"));
                btnUseWideCenter->tooltip(_("Show bandwidth tracks on waterfall"));
                btnUseWideCenter->down_box(FL_DOWN_BOX);
                btnUseWideCenter->callback((Fl_Callback*)cb_btnUseWideCenter);
                o->value(progdefaults.UseWideCenter);
                } // Fl_Check_Button* btnUseWideCenter
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(280, 144, 113, 96, _("Signal tracks"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Check_Button* o = btnUseBWTracks = new Fl_Check_Button(308, 163, 56, 20, _("ON"));
                btnUseBWTracks->tooltip(_("Show bandwidth tracks on waterfall"));
                btnUseBWTracks->down_box(FL_DOWN_BOX);
                btnUseBWTracks->callback((Fl_Callback*)cb_btnUseBWTracks);
                o->value(progdefaults.UseBWTracks);
                } // Fl_Check_Button* btnUseBWTracks
                { Fl_Button* o = btnBwTracksColor = new Fl_Button(308, 186, 20, 20, _("Color"));
                btnBwTracksColor->tooltip(_("Change color"));
                btnBwTracksColor->color((Fl_Color)1);
                btnBwTracksColor->callback((Fl_Callback*)cb_btnBwTracksColor);
                btnBwTracksColor->align(Fl_Align(FL_ALIGN_RIGHT));
                o->color(fl_rgb_color(progdefaults.bwTrackRGBI.R,progdefaults.bwTrackRGBI.G,progdefaults.bwTrackRGBI.B));
                } // Fl_Button* btnBwTracksColor
                { Fl_Check_Button* o = btnUseWideTracks = new Fl_Check_Button(308, 210, 74, 20, _("Wide"));
                btnUseWideTracks->tooltip(_("Show bandwidth tracks on waterfall"));
                btnUseWideTracks->down_box(FL_DOWN_BOX);
                btnUseWideTracks->callback((Fl_Callback*)cb_btnUseWideTracks);
                o->value(progdefaults.UseWideTracks);
                } // Fl_Check_Button* btnUseWideTracks
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(400, 144, 113, 96, _("Notch"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Button* o = btnNotchColor = new Fl_Button(428, 186, 20, 20, _("Color"));
                btnNotchColor->tooltip(_("Change color"));
                btnNotchColor->color((Fl_Color)1);
                btnNotchColor->callback((Fl_Callback*)cb_btnNotchColor);
                btnNotchColor->align(Fl_Align(FL_ALIGN_RIGHT));
                o->color(fl_rgb_color(progdefaults.notchRGBI.R,progdefaults.notchRGBI.G,progdefaults.notchRGBI.B));
                } // Fl_Button* btnNotchColor
                o->end();
              } // Fl_Group* o
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(24, 245, 496, 55, _("Frequency scale"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = chkShowAudioScale = new Fl_Check_Button(34, 268, 241, 20, _("Always show audio frequencies"));
                chkShowAudioScale->tooltip(_("Audio or RF frequencies on waterfall scale"));
                chkShowAudioScale->down_box(FL_DOWN_BOX);
                chkShowAudioScale->callback((Fl_Callback*)cb_chkShowAudioScale);
                o->value(progdefaults.wf_audioscale);
              } // Fl_Check_Button* chkShowAudioScale
              { btnWaterfallFont = new Fl_Button(334, 268, 71, 24, _("Font..."));
                btnWaterfallFont->tooltip(_("Select waterfall scale font"));
                btnWaterfallFont->callback((Fl_Callback*)cb_btnWaterfallFont);
              } // Fl_Button* btnWaterfallFont
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(24, 301, 496, 65, _("Transmit signal"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btnViewXmtSignal = new Fl_Check_Button(34, 327, 208, 20, _("Monitor transmitted signal"));
                btnViewXmtSignal->tooltip(_("Show transmit signal on waterfall"));
                btnViewXmtSignal->down_box(FL_DOWN_BOX);
                btnViewXmtSignal->callback((Fl_Callback*)cb_btnViewXmtSignal);
                o->value(progdefaults.viewXmtSignal);
              } // Fl_Check_Button* btnViewXmtSignal
              { Fl_Value_Slider2* o = valTxMonitorLevel = new Fl_Value_Slider2(292, 327, 203, 20, _("Signal level"));
                valTxMonitorLevel->tooltip(_("Set level for good viewing"));
                valTxMonitorLevel->type(1);
                valTxMonitorLevel->box(FL_DOWN_BOX);
                valTxMonitorLevel->color(FL_BACKGROUND_COLOR);
                valTxMonitorLevel->selection_color(FL_BACKGROUND_COLOR);
                valTxMonitorLevel->labeltype(FL_NORMAL_LABEL);
                valTxMonitorLevel->labelfont(0);
                valTxMonitorLevel->labelsize(14);
                valTxMonitorLevel->labelcolor(FL_FOREGROUND_COLOR);
                valTxMonitorLevel->step(0.05);
                valTxMonitorLevel->value(0.5);
                valTxMonitorLevel->textsize(14);
                valTxMonitorLevel->callback((Fl_Callback*)cb_valTxMonitorLevel);
                valTxMonitorLevel->align(Fl_Align(FL_ALIGN_TOP));
                valTxMonitorLevel->when(FL_WHEN_CHANGED);
                o->value(progdefaults.TxMonitorLevel);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
              } // Fl_Value_Slider2* valTxMonitorLevel
              o->end();
            } // Fl_Group* o
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(0, 50, 540, 320, _("FFT Processing"));
            o->hide();
            { Fl_Group* o = new Fl_Group(27, 71, 490, 135);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Counter2* o = cntLowFreqCutoff = new Fl_Counter2(72, 81, 70, 20, _("Lower limit"));
                cntLowFreqCutoff->tooltip(_("Low frequency limit in Hz"));
                cntLowFreqCutoff->type(1);
                cntLowFreqCutoff->box(FL_UP_BOX);
                cntLowFreqCutoff->color(FL_BACKGROUND_COLOR);
                cntLowFreqCutoff->selection_color(FL_INACTIVE_COLOR);
                cntLowFreqCutoff->labeltype(FL_NORMAL_LABEL);
                cntLowFreqCutoff->labelfont(0);
                cntLowFreqCutoff->labelsize(14);
                cntLowFreqCutoff->labelcolor(FL_FOREGROUND_COLOR);
                cntLowFreqCutoff->minimum(0);
                cntLowFreqCutoff->maximum(500);
                cntLowFreqCutoff->step(50);
                cntLowFreqCutoff->value(300);
                cntLowFreqCutoff->callback((Fl_Callback*)cb_cntLowFreqCutoff);
                cntLowFreqCutoff->align(Fl_Align(FL_ALIGN_RIGHT));
                cntLowFreqCutoff->when(FL_WHEN_CHANGED);
                o->value(progdefaults.LowFreqCutoff);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* cntLowFreqCutoff
              { Fl_Counter2* o = valLatency = new Fl_Counter2(72, 111, 70, 21, _("FFT latency (scan merging)"));
                valLatency->tooltip(_("Latency increases frequency resolution,\ndecreases time resolution. 1 = no sc\
an merging"));
                valLatency->type(1);
                valLatency->box(FL_UP_BOX);
                valLatency->color(FL_BACKGROUND_COLOR);
                valLatency->selection_color(FL_INACTIVE_COLOR);
                valLatency->labeltype(FL_NORMAL_LABEL);
                valLatency->labelfont(0);
                valLatency->labelsize(14);
                valLatency->labelcolor(FL_FOREGROUND_COLOR);
                valLatency->minimum(1);
                valLatency->maximum(8);
                valLatency->step(1);
                valLatency->value(4);
                valLatency->callback((Fl_Callback*)cb_valLatency);
                valLatency->align(Fl_Align(FL_ALIGN_RIGHT));
                valLatency->when(FL_WHEN_CHANGED);
                o->value(progdefaults.latency);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* valLatency
              { Fl_Check_Button* o = btnWFaveraging = new Fl_Check_Button(72, 142, 120, 20, _("FFT averaging"));
                btnWFaveraging->tooltip(_("Use averaging to decrease waterfall noise"));
                btnWFaveraging->down_box(FL_DOWN_BOX);
                btnWFaveraging->callback((Fl_Callback*)cb_btnWFaveraging);
                o->value(progdefaults.WFaveraging);
              } // Fl_Check_Button* btnWFaveraging
              { mnuFFTPrefilter = new Fl_Choice(72, 172, 120, 25, _("FFT prefilter window function"));
                mnuFFTPrefilter->tooltip(_("Select the type of FFT prefilter"));
                mnuFFTPrefilter->down_box(FL_BORDER_BOX);
                mnuFFTPrefilter->callback((Fl_Callback*)cb_mnuFFTPrefilter);
                mnuFFTPrefilter->align(Fl_Align(FL_ALIGN_RIGHT));
                mnuFFTPrefilter->add(_("Rectangular")); mnuFFTPrefilter->add("Blackman");
                mnuFFTPrefilter->add("Hamming"); mnuFFTPrefilter->add("Hanning");
                mnuFFTPrefilter->add(_("Triangular"));
                mnuFFTPrefilter->value(progdefaults.wfPreFilter);
              } // Fl_Choice* mnuFFTPrefilter
              { Fl_Counter2* o = cntrWfwidth = new Fl_Counter2(295, 81, 95, 21, _("Upper limit"));
                cntrWfwidth->tooltip(_("High frequency limit in Hz"));
                cntrWfwidth->type(1);
                cntrWfwidth->box(FL_UP_BOX);
                cntrWfwidth->color(FL_BACKGROUND_COLOR);
                cntrWfwidth->selection_color(FL_INACTIVE_COLOR);
                cntrWfwidth->labeltype(FL_NORMAL_LABEL);
                cntrWfwidth->labelfont(0);
                cntrWfwidth->labelsize(14);
                cntrWfwidth->labelcolor(FL_FOREGROUND_COLOR);
                cntrWfwidth->minimum(2000);
                cntrWfwidth->maximum(16000);
                cntrWfwidth->step(100);
                cntrWfwidth->value(3000);
                cntrWfwidth->callback((Fl_Callback*)cb_cntrWfwidth);
                cntrWfwidth->align(Fl_Align(FL_ALIGN_RIGHT));
                cntrWfwidth->when(FL_WHEN_CHANGED);
                o->value(progdefaults.HighFreqCutoff);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* cntrWfwidth
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(27, 221, 490, 80, _("Changes take effect on next program startup"));
              o->tooltip(_("Show me more or less waterfall"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
              { Fl_Counter2* o = cntrWfheight = new Fl_Counter2(72, 251, 95, 21, _("Waterfall height in pixels"));
                cntrWfheight->tooltip(_("CPU usage increases with waterfall height"));
                cntrWfheight->type(1);
                cntrWfheight->box(FL_UP_BOX);
                cntrWfheight->color(FL_BACKGROUND_COLOR);
                cntrWfheight->selection_color(FL_INACTIVE_COLOR);
                cntrWfheight->labeltype(FL_NORMAL_LABEL);
                cntrWfheight->labelfont(0);
                cntrWfheight->labelsize(14);
                cntrWfheight->labelcolor(FL_FOREGROUND_COLOR);
                cntrWfheight->minimum(100);
                cntrWfheight->maximum(300);
                cntrWfheight->step(5);
                cntrWfheight->value(120);
                cntrWfheight->callback((Fl_Callback*)cb_cntrWfheight);
                cntrWfheight->align(Fl_Align(FL_ALIGN_RIGHT));
                cntrWfheight->when(FL_WHEN_CHANGED);
                o->value(progdefaults.wfheight);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* cntrWfheight
              o->end();
            } // Fl_Group* o
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(0, 50, 540, 320, _("Mouse"));
            o->hide();
            { Fl_Group* o = new Fl_Group(24, 73, 490, 170);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Check_Button* o = btnWaterfallHistoryDefault = new Fl_Check_Button(34, 87, 340, 20, _("Left or right click always replays audio history"));
                btnWaterfallHistoryDefault->tooltip(_("Replay trackline audio"));
                btnWaterfallHistoryDefault->down_box(FL_DOWN_BOX);
                btnWaterfallHistoryDefault->callback((Fl_Callback*)cb_btnWaterfallHistoryDefault);
                o->value(progdefaults.WaterfallHistoryDefault);
              } // Fl_Check_Button* btnWaterfallHistoryDefault
              { Fl_Check_Button* o = btnWaterfallQSY = new Fl_Check_Button(34, 117, 380, 20, _("Dragging on the waterfall scale changes frequency"));
                btnWaterfallQSY->tooltip(_("Enable drag cursor on waterfall scale"));
                btnWaterfallQSY->down_box(FL_DOWN_BOX);
                btnWaterfallQSY->callback((Fl_Callback*)cb_btnWaterfallQSY);
                o->value(progdefaults.WaterfallQSY);
              } // Fl_Check_Button* btnWaterfallQSY
              { Fl_Check_Button* o = btnWaterfallClickInsert = new Fl_Check_Button(34, 159, 225, 20, _("Insert text on single left click"));
                btnWaterfallClickInsert->tooltip(_("Insert special text in Rx panel\nwhen waterfall clicked"));
                btnWaterfallClickInsert->down_box(FL_DOWN_BOX);
                btnWaterfallClickInsert->callback((Fl_Callback*)cb_btnWaterfallClickInsert);
                o->value(progdefaults.WaterfallClickInsert);
              } // Fl_Check_Button* btnWaterfallClickInsert
              { inpWaterfallClickText = new Fl_Input2(320, 147, 180, 50);
                inpWaterfallClickText->tooltip(_("The string <FREQ> is replaced with\nthe current modem and frequency"));
                inpWaterfallClickText->box(FL_DOWN_BOX);
                inpWaterfallClickText->color(FL_BACKGROUND2_COLOR);
                inpWaterfallClickText->selection_color(FL_SELECTION_COLOR);
                inpWaterfallClickText->labeltype(FL_NORMAL_LABEL);
                inpWaterfallClickText->labelfont(0);
                inpWaterfallClickText->labelsize(14);
                inpWaterfallClickText->labelcolor(FL_FOREGROUND_COLOR);
                inpWaterfallClickText->callback((Fl_Callback*)cb_inpWaterfallClickText);
                inpWaterfallClickText->align(Fl_Align(FL_ALIGN_RIGHT));
                inpWaterfallClickText->when(FL_WHEN_RELEASE);
              } // Fl_Input2* inpWaterfallClickText
              o->end();
            } // Fl_Group* o
            { mnuWaterfallWheelAction = new Fl_Choice(34, 207, 150, 22, _("Wheel action"));
              mnuWaterfallWheelAction->tooltip(_("Select how the mouse wheel\nbehaves inside the waterfall"));
              mnuWaterfallWheelAction->down_box(FL_BORDER_BOX);
              mnuWaterfallWheelAction->callback((Fl_Callback*)cb_mnuWaterfallWheelAction);
              mnuWaterfallWheelAction->align(Fl_Align(FL_ALIGN_RIGHT));
            } // Fl_Choice* mnuWaterfallWheelAction
            o->end();
          } // Fl_Group* o
          tabsWaterfall->end();
        } // Fl_Tabs* tabsWaterfall
        tabWaterfall->end();
      } // Fl_Group* tabWaterfall
      { tabModems = new Fl_Group(0, 25, 595, 347, _("Modems"));
        tabModems->hide();
        { tabsModems = new Fl_Tabs(0, 25, 540, 347);
          tabsModems->selection_color(FL_LIGHT1);
          tabsModems->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          { tabCW = new Fl_Group(0, 50, 540, 320, _("CW"));
            { tabsCW = new Fl_Tabs(0, 50, 540, 320);
              tabsCW->selection_color(FL_LIGHT1);
              { Fl_Group* o = new Fl_Group(0, 75, 540, 295, _("General"));
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                { Fl_Group* o = new Fl_Group(5, 85, 530, 130, _("Receive"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Value_Slider2* o = sldrCWbandwidth = new Fl_Value_Slider2(20, 149, 335, 20, _("Filter bandwidth"));
                sldrCWbandwidth->tooltip(_("CW dsp filter bandwidth"));
                sldrCWbandwidth->type(1);
                sldrCWbandwidth->box(FL_DOWN_BOX);
                sldrCWbandwidth->color(FL_BACKGROUND_COLOR);
                sldrCWbandwidth->selection_color(FL_BACKGROUND_COLOR);
                sldrCWbandwidth->labeltype(FL_NORMAL_LABEL);
                sldrCWbandwidth->labelfont(0);
                sldrCWbandwidth->labelsize(14);
                sldrCWbandwidth->labelcolor(FL_FOREGROUND_COLOR);
                sldrCWbandwidth->minimum(10);
                sldrCWbandwidth->maximum(400);
                sldrCWbandwidth->step(1);
                sldrCWbandwidth->value(66);
                sldrCWbandwidth->textsize(14);
                sldrCWbandwidth->callback((Fl_Callback*)cb_sldrCWbandwidth);
                sldrCWbandwidth->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                sldrCWbandwidth->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWbandwidth);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
                } // Fl_Value_Slider2* sldrCWbandwidth
                { valCWrcvWPM = new Fl_Value_Output(20, 188, 35, 20, _("Rx WPM"));
                valCWrcvWPM->color(FL_BACKGROUND2_COLOR);
                valCWrcvWPM->callback((Fl_Callback*)cb_valCWrcvWPM);
                valCWrcvWPM->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                } // Fl_Value_Output* valCWrcvWPM
                { prgsCWrcvWPM = new Fl_Progress(56, 188, 300, 20);
                prgsCWrcvWPM->tooltip(_("Tracked CW speed in WPM"));
                prgsCWrcvWPM->color(FL_BACKGROUND_COLOR);
                prgsCWrcvWPM->selection_color(FL_SELECTION_COLOR);
                prgsCWrcvWPM->align(Fl_Align(FL_ALIGN_CENTER));
                } // Fl_Progress* prgsCWrcvWPM
                { Fl_Check_Button* o = btnCWuseSOMdecoding = new Fl_Check_Button(33, 108, 125, 20, _("SOM decoding"));
                btnCWuseSOMdecoding->tooltip(_("Self Organizing Mapping"));
                btnCWuseSOMdecoding->down_box(FL_DOWN_BOX);
                btnCWuseSOMdecoding->value(1);
                btnCWuseSOMdecoding->callback((Fl_Callback*)cb_btnCWuseSOMdecoding);
                o->value(progdefaults.CWuseSOMdecoding);
                } // Fl_Check_Button* btnCWuseSOMdecoding
                { Fl_Counter2* o = cntLower = new Fl_Counter2(179, 108, 65, 20, _("Lower"));
                cntLower->tooltip(_("Detector low threshold"));
                cntLower->type(1);
                cntLower->box(FL_UP_BOX);
                cntLower->color(FL_BACKGROUND_COLOR);
                cntLower->selection_color(FL_INACTIVE_COLOR);
                cntLower->labeltype(FL_NORMAL_LABEL);
                cntLower->labelfont(0);
                cntLower->labelsize(14);
                cntLower->labelcolor(FL_FOREGROUND_COLOR);
                cntLower->minimum(0.01);
                cntLower->maximum(0.99);
                cntLower->step(0.01);
                cntLower->value(0.45);
                cntLower->callback((Fl_Callback*)cb_cntLower);
                cntLower->align(Fl_Align(FL_ALIGN_TOP));
                cntLower->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWlower);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntLower
                { Fl_Counter2* o = cntUpper = new Fl_Counter2(272, 108, 65, 20, _("Upper"));
                cntUpper->tooltip(_("Detector high threshold"));
                cntUpper->type(1);
                cntUpper->box(FL_UP_BOX);
                cntUpper->color(FL_BACKGROUND_COLOR);
                cntUpper->selection_color(FL_INACTIVE_COLOR);
                cntUpper->labeltype(FL_NORMAL_LABEL);
                cntUpper->labelfont(0);
                cntUpper->labelsize(14);
                cntUpper->labelcolor(FL_FOREGROUND_COLOR);
                cntUpper->minimum(0.01);
                cntUpper->maximum(0.99);
                cntUpper->step(0.01);
                cntUpper->value(0.55);
                cntUpper->callback((Fl_Callback*)cb_cntUpper);
                cntUpper->align(Fl_Align(FL_ALIGN_TOP));
                cntUpper->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWupper);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntUpper
                { Fl_Check_Button* o = btnCWmfilt = new Fl_Check_Button(367, 108, 80, 20, _("Matched Filter"));
                btnCWmfilt->tooltip(_("Matched Filter bandwidth"));
                btnCWmfilt->down_box(FL_DOWN_BOX);
                btnCWmfilt->value(1);
                btnCWmfilt->callback((Fl_Callback*)cb_btnCWmfilt);
                o->value(progdefaults.CWmfilt);
                } // Fl_Check_Button* btnCWmfilt
                { Fl_Check_Button* o = btnCWuseFFTfilter = new Fl_Check_Button(367, 134, 125, 20, _("FFT filter"));
                btnCWuseFFTfilter->tooltip(_("FFT / FIR filter"));
                btnCWuseFFTfilter->down_box(FL_DOWN_BOX);
                btnCWuseFFTfilter->value(1);
                btnCWuseFFTfilter->callback((Fl_Callback*)cb_btnCWuseFFTfilter);
                o->value(progdefaults.CWuse_fft_filter);
                } // Fl_Check_Button* btnCWuseFFTfilter
                { Fl_Check_Button* o = btnCWrcvTrack = new Fl_Check_Button(367, 160, 80, 20, _("Tracking"));
                btnCWrcvTrack->tooltip(_("Automatic Rx speed tracking"));
                btnCWrcvTrack->down_box(FL_DOWN_BOX);
                btnCWrcvTrack->value(1);
                btnCWrcvTrack->callback((Fl_Callback*)cb_btnCWrcvTrack);
                o->value(progdefaults.CWtrack);
                } // Fl_Check_Button* btnCWrcvTrack
                { Fl_Counter2* o = cntCWrange = new Fl_Counter2(367, 187, 65, 20, _("Range, WPM"));
                cntCWrange->tooltip(_("Range +/- wpm"));
                cntCWrange->type(1);
                cntCWrange->box(FL_UP_BOX);
                cntCWrange->color(FL_BACKGROUND_COLOR);
                cntCWrange->selection_color(FL_INACTIVE_COLOR);
                cntCWrange->labeltype(FL_NORMAL_LABEL);
                cntCWrange->labelfont(0);
                cntCWrange->labelsize(14);
                cntCWrange->labelcolor(FL_FOREGROUND_COLOR);
                cntCWrange->minimum(5);
                cntCWrange->maximum(25);
                cntCWrange->step(1);
                cntCWrange->value(10);
                cntCWrange->callback((Fl_Callback*)cb_cntCWrange);
                cntCWrange->align(Fl_Align(FL_ALIGN_RIGHT));
                cntCWrange->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWrange);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntCWrange
                o->end();
                } // Fl_Group* o
                { Fl_Group* o = new Fl_Group(5, 215, 530, 150, _("Transmit"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Value_Slider2* o = sldrCWxmtWPM = new Fl_Value_Slider2(20, 240, 440, 20, _("TX WPM"));
                sldrCWxmtWPM->tooltip(_("My transmit CW WPM"));
                sldrCWxmtWPM->type(1);
                sldrCWxmtWPM->box(FL_DOWN_BOX);
                sldrCWxmtWPM->color(FL_BACKGROUND_COLOR);
                sldrCWxmtWPM->selection_color(FL_BACKGROUND_COLOR);
                sldrCWxmtWPM->labeltype(FL_NORMAL_LABEL);
                sldrCWxmtWPM->labelfont(0);
                sldrCWxmtWPM->labelsize(14);
                sldrCWxmtWPM->labelcolor(FL_FOREGROUND_COLOR);
                sldrCWxmtWPM->minimum(5);
                sldrCWxmtWPM->maximum(100);
                sldrCWxmtWPM->step(1);
                sldrCWxmtWPM->value(20);
                sldrCWxmtWPM->textsize(14);
                sldrCWxmtWPM->callback((Fl_Callback*)cb_sldrCWxmtWPM);
                sldrCWxmtWPM->align(Fl_Align(FL_ALIGN_RIGHT));
                sldrCWxmtWPM->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWspeed);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
                } // Fl_Value_Slider2* sldrCWxmtWPM
                { Fl_Counter2* o = cntCWdefWPM = new Fl_Counter2(61, 281, 64, 20, _("Default"));
                cntCWdefWPM->tooltip(_("The default CW speed"));
                cntCWdefWPM->type(1);
                cntCWdefWPM->box(FL_UP_BOX);
                cntCWdefWPM->color(FL_BACKGROUND_COLOR);
                cntCWdefWPM->selection_color(FL_INACTIVE_COLOR);
                cntCWdefWPM->labeltype(FL_NORMAL_LABEL);
                cntCWdefWPM->labelfont(0);
                cntCWdefWPM->labelsize(14);
                cntCWdefWPM->labelcolor(FL_FOREGROUND_COLOR);
                cntCWdefWPM->minimum(5);
                cntCWdefWPM->maximum(200);
                cntCWdefWPM->step(1);
                cntCWdefWPM->value(18);
                cntCWdefWPM->callback((Fl_Callback*)cb_cntCWdefWPM);
                cntCWdefWPM->align(Fl_Align(FL_ALIGN_TOP));
                cntCWdefWPM->when(FL_WHEN_CHANGED);
                o->value(progdefaults.defCWspeed);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntCWdefWPM
                { Fl_Counter* o = cntCWlowerlimit = new Fl_Counter(215, 281, 65, 20, _("Lower limit"));
                cntCWlowerlimit->tooltip(_("No slower than this"));
                cntCWlowerlimit->type(1);
                cntCWlowerlimit->minimum(5);
                cntCWlowerlimit->maximum(20);
                cntCWlowerlimit->step(5);
                cntCWlowerlimit->value(10);
                cntCWlowerlimit->callback((Fl_Callback*)cb_cntCWlowerlimit);
                cntCWlowerlimit->align(Fl_Align(FL_ALIGN_TOP));
                o->value(progdefaults.CWlowerlimit);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter* cntCWlowerlimit
                { Fl_Counter* o = cntCWupperlimit = new Fl_Counter(371, 281, 65, 20, _("Upper limit"));
                cntCWupperlimit->tooltip(_("No faster than this"));
                cntCWupperlimit->type(1);
                cntCWupperlimit->minimum(25);
                cntCWupperlimit->maximum(200);
                cntCWupperlimit->step(5);
                cntCWupperlimit->value(100);
                cntCWupperlimit->callback((Fl_Callback*)cb_cntCWupperlimit);
                cntCWupperlimit->align(Fl_Align(FL_ALIGN_TOP));
                o->value(progdefaults.CWupperlimit);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter* cntCWupperlimit
                { Fl_Value_Slider2* o = sldrCWfarnsworth = new Fl_Value_Slider2(20, 335, 440, 20, _("F-WPM"));
                sldrCWfarnsworth->tooltip(_("My transmit CW WPM"));
                sldrCWfarnsworth->type(1);
                sldrCWfarnsworth->box(FL_DOWN_BOX);
                sldrCWfarnsworth->color(FL_BACKGROUND_COLOR);
                sldrCWfarnsworth->selection_color(FL_BACKGROUND_COLOR);
                sldrCWfarnsworth->labeltype(FL_NORMAL_LABEL);
                sldrCWfarnsworth->labelfont(0);
                sldrCWfarnsworth->labelsize(14);
                sldrCWfarnsworth->labelcolor(FL_FOREGROUND_COLOR);
                sldrCWfarnsworth->minimum(5);
                sldrCWfarnsworth->maximum(100);
                sldrCWfarnsworth->step(1);
                sldrCWfarnsworth->value(20);
                sldrCWfarnsworth->textsize(14);
                sldrCWfarnsworth->callback((Fl_Callback*)cb_sldrCWfarnsworth);
                sldrCWfarnsworth->align(Fl_Align(FL_ALIGN_RIGHT));
                sldrCWfarnsworth->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWfarnsworth);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
                } // Fl_Value_Slider2* sldrCWfarnsworth
                { Fl_Check_Button* o = btnCWusefarnsworth = new Fl_Check_Button(40, 312, 180, 15, _("Use Farnsworth timing"));
                btnCWusefarnsworth->down_box(FL_DOWN_BOX);
                btnCWusefarnsworth->callback((Fl_Callback*)cb_btnCWusefarnsworth);
                o->value(progdefaults.CWusefarnsworth);
                } // Fl_Check_Button* btnCWusefarnsworth
                o->end();
                } // Fl_Group* o
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(0, 75, 540, 295, _("Timing and QSK"));
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                o->hide();
                { Fl_Group* o = new Fl_Group(5, 85, 530, 120, _("Timing"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Counter2* o = cntCWweight = new Fl_Counter2(15, 114, 65, 20, _("Weight (%)"));
                cntCWweight->tooltip(_("Dot to dot-space ratio"));
                cntCWweight->type(1);
                cntCWweight->box(FL_UP_BOX);
                cntCWweight->color(FL_BACKGROUND_COLOR);
                cntCWweight->selection_color(FL_INACTIVE_COLOR);
                cntCWweight->labeltype(FL_NORMAL_LABEL);
                cntCWweight->labelfont(0);
                cntCWweight->labelsize(14);
                cntCWweight->labelcolor(FL_FOREGROUND_COLOR);
                cntCWweight->minimum(20);
                cntCWweight->maximum(80);
                cntCWweight->step(1);
                cntCWweight->value(50);
                cntCWweight->callback((Fl_Callback*)cb_cntCWweight);
                cntCWweight->align(Fl_Align(FL_ALIGN_RIGHT));
                cntCWweight->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWweight);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntCWweight
                { Fl_Counter2* o = cntCWdash2dot = new Fl_Counter2(240, 114, 64, 20, _("Dash to dot ratio"));
                cntCWdash2dot->tooltip(_("Dash to dot ratio"));
                cntCWdash2dot->type(1);
                cntCWdash2dot->box(FL_UP_BOX);
                cntCWdash2dot->color(FL_BACKGROUND_COLOR);
                cntCWdash2dot->selection_color(FL_INACTIVE_COLOR);
                cntCWdash2dot->labeltype(FL_NORMAL_LABEL);
                cntCWdash2dot->labelfont(0);
                cntCWdash2dot->labelsize(14);
                cntCWdash2dot->labelcolor(FL_FOREGROUND_COLOR);
                cntCWdash2dot->minimum(2.5);
                cntCWdash2dot->maximum(4);
                cntCWdash2dot->value(3);
                cntCWdash2dot->callback((Fl_Callback*)cb_cntCWdash2dot);
                cntCWdash2dot->align(Fl_Align(FL_ALIGN_RIGHT));
                cntCWdash2dot->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWdash2dot);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntCWdash2dot
                { Fl_Counter2* o = cntCWrisetime = new Fl_Counter2(240, 145, 65, 20, _("Edge timing"));
                cntCWrisetime->tooltip(_("Leading and Trailing edge risetimes (msec)"));
                cntCWrisetime->type(1);
                cntCWrisetime->box(FL_UP_BOX);
                cntCWrisetime->color(FL_BACKGROUND_COLOR);
                cntCWrisetime->selection_color(FL_INACTIVE_COLOR);
                cntCWrisetime->labeltype(FL_NORMAL_LABEL);
                cntCWrisetime->labelfont(0);
                cntCWrisetime->labelsize(14);
                cntCWrisetime->labelcolor(FL_FOREGROUND_COLOR);
                cntCWrisetime->minimum(0);
                cntCWrisetime->maximum(15);
                cntCWrisetime->value(4);
                cntCWrisetime->callback((Fl_Callback*)cb_cntCWrisetime);
                cntCWrisetime->align(Fl_Align(FL_ALIGN_RIGHT));
                cntCWrisetime->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWrisetime);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntCWrisetime
                { Fl_Choice* o = mnuQSKshape = new Fl_Choice(15, 144, 112, 20, _("Edge shape"));
                mnuQSKshape->tooltip(_("Raised cosine = Hanning"));
                mnuQSKshape->down_box(FL_BORDER_BOX);
                mnuQSKshape->callback((Fl_Callback*)cb_mnuQSKshape);
                mnuQSKshape->align(Fl_Align(FL_ALIGN_RIGHT));
                o->add("Hanning|Blackman");
                o->value(progdefaults.QSKshape);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Choice* mnuQSKshape
                { Fl_Check_Button* o = btnCWnarrow = new Fl_Check_Button(15, 175, 225, 15, _("Edge decreases pulse width"));
                btnCWnarrow->tooltip(_("Weight decreases with increasing edge timing"));
                btnCWnarrow->down_box(FL_DOWN_BOX);
                btnCWnarrow->callback((Fl_Callback*)cb_btnCWnarrow);
                o->value(progdefaults.CWnarrow);
                } // Fl_Check_Button* btnCWnarrow
                o->end();
                } // Fl_Group* o
                { Fl_Group* o = new Fl_Group(5, 217, 530, 118, _("QSK"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Check_Button* o = btnQSK = new Fl_Check_Button(15, 245, 211, 20, _("QSK on right audio channel"));
                btnQSK->tooltip(_("Generate square wave signal on right channel"));
                btnQSK->down_box(FL_DOWN_BOX);
                btnQSK->callback((Fl_Callback*)cb_btnQSK);
                o->value(progdefaults.QSK);
                } // Fl_Check_Button* btnQSK
                { Fl_Counter2* o = cntPreTiming = new Fl_Counter2(15, 275, 64, 20, _("Pre-keydown timing (ms)"));
                cntPreTiming->tooltip(_("Msec pre-keydown (+ is earlier in time)"));
                cntPreTiming->type(1);
                cntPreTiming->box(FL_UP_BOX);
                cntPreTiming->color(FL_BACKGROUND_COLOR);
                cntPreTiming->selection_color(FL_INACTIVE_COLOR);
                cntPreTiming->labeltype(FL_NORMAL_LABEL);
                cntPreTiming->labelfont(0);
                cntPreTiming->labelsize(14);
                cntPreTiming->labelcolor(FL_FOREGROUND_COLOR);
                cntPreTiming->minimum(0);
                cntPreTiming->maximum(20);
                cntPreTiming->step(0.5);
                cntPreTiming->callback((Fl_Callback*)cb_cntPreTiming);
                cntPreTiming->align(Fl_Align(FL_ALIGN_RIGHT));
                cntPreTiming->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWpre);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntPreTiming
                { Fl_Counter2* o = cntPostTiming = new Fl_Counter2(15, 305, 64, 20, _("Post-keydown timing (ms)"));
                cntPostTiming->tooltip(_("Msec post-keydown (+ is earlier in time)"));
                cntPostTiming->type(1);
                cntPostTiming->box(FL_UP_BOX);
                cntPostTiming->color(FL_BACKGROUND_COLOR);
                cntPostTiming->selection_color(FL_INACTIVE_COLOR);
                cntPostTiming->labeltype(FL_NORMAL_LABEL);
                cntPostTiming->labelfont(0);
                cntPostTiming->labelsize(14);
                cntPostTiming->labelcolor(FL_FOREGROUND_COLOR);
                cntPostTiming->minimum(-20);
                cntPostTiming->maximum(20);
                cntPostTiming->step(0.5);
                cntPostTiming->callback((Fl_Callback*)cb_cntPostTiming);
                cntPostTiming->align(Fl_Align(FL_ALIGN_RIGHT));
                cntPostTiming->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWpre);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntPostTiming
                { Fl_Check_Button* o = btnQSKadjust = new Fl_Check_Button(290, 275, 160, 20, _("Send continuously"));
                btnQSKadjust->tooltip(_("Send a continuous stream of test characters"));
                btnQSKadjust->down_box(FL_DOWN_BOX);
                btnQSKadjust->callback((Fl_Callback*)cb_btnQSKadjust);
                o->value(progdefaults.QSKadjust);
                } // Fl_Check_Button* btnQSKadjust
                { Fl_Choice* o = mnuTestChar = new Fl_Choice(290, 245, 41, 20, _("Test char"));
                mnuTestChar->tooltip(_("Test character for QSK adjustment"));
                mnuTestChar->down_box(FL_BORDER_BOX);
                mnuTestChar->callback((Fl_Callback*)cb_mnuTestChar);
                mnuTestChar->align(Fl_Align(FL_ALIGN_RIGHT));
                o->add(szTestChar);
                o->value(progdefaults.TestChar);
                } // Fl_Choice* mnuTestChar
                o->end();
                } // Fl_Group* o
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(0, 75, 540, 295, _("Prosigns"));
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                o->hide();
                { Fl_Group* o = new Fl_Group(4, 81, 530, 283);
                o->box(FL_ENGRAVED_FRAME);
                { Fl_Check_Button* o = btnCW_use_paren = new Fl_Check_Button(235, 236, 68, 15, _("Use \'(\' paren not KN"));
                btnCW_use_paren->down_box(FL_DOWN_BOX);
                btnCW_use_paren->callback((Fl_Callback*)cb_btnCW_use_paren);
                o->value(progdefaults.CW_use_paren);
                } // Fl_Check_Button* btnCW_use_paren
                o->end();
                } // Fl_Group* o
                { Fl_Choice* o = mnu_prosign[0] = new Fl_Choice(167, 94, 47, 22, _("<BT>"));
                mnu_prosign[0]->down_box(FL_BORDER_BOX);
                mnu_prosign[0]->callback((Fl_Callback*)cb_mnu_prosign);
                o->add(szProsigns);
                char s[2] = " "; s[0] = progdefaults.CW_prosigns[0];
                o->value(o->find_item(s));
                } // Fl_Choice* mnu_prosign[0]
                { Fl_Choice* o = mnu_prosign[1] = new Fl_Choice(167, 121, 47, 22, _("<AA>"));
                mnu_prosign[1]->down_box(FL_BORDER_BOX);
                mnu_prosign[1]->callback((Fl_Callback*)cb_mnu_prosign1);
                o->add(szProsigns);
                char s[2] = " "; s[0] = progdefaults.CW_prosigns[1];
                o->value(o->find_item(s));
                } // Fl_Choice* mnu_prosign[1]
                { Fl_Choice* o = mnu_prosign[2] = new Fl_Choice(167, 149, 47, 22, _("<AS>"));
                mnu_prosign[2]->down_box(FL_BORDER_BOX);
                mnu_prosign[2]->callback((Fl_Callback*)cb_mnu_prosign2);
                o->add(szProsigns);
                char s[2] = " "; s[0] = progdefaults.CW_prosigns[2];
                o->value(o->find_item(s));
                } // Fl_Choice* mnu_prosign[2]
                { Fl_Choice* o = mnu_prosign[3] = new Fl_Choice(167, 176, 47, 22, _("<AR>"));
                mnu_prosign[3]->down_box(FL_BORDER_BOX);
                mnu_prosign[3]->callback((Fl_Callback*)cb_mnu_prosign3);
                o->add(szProsigns);
                char s[2] = " "; s[0] = progdefaults.CW_prosigns[3];
                o->value(o->find_item(s));
                } // Fl_Choice* mnu_prosign[3]
                { Fl_Choice* o = mnu_prosign[4] = new Fl_Choice(167, 204, 47, 22, _("<SK>"));
                mnu_prosign[4]->down_box(FL_BORDER_BOX);
                mnu_prosign[4]->callback((Fl_Callback*)cb_mnu_prosign4);
                o->add(szProsigns);
                char s[2] = " "; s[0] = progdefaults.CW_prosigns[4];
                o->value(o->find_item(s));
                } // Fl_Choice* mnu_prosign[4]
                { Fl_Choice* o = mnu_prosign[5] = new Fl_Choice(167, 232, 47, 22, _("<KN>"));
                mnu_prosign[5]->down_box(FL_BORDER_BOX);
                mnu_prosign[5]->callback((Fl_Callback*)cb_mnu_prosign5);
                o->add(szProsigns);
                char s[2] = " "; s[0] = progdefaults.CW_prosigns[5];
                o->value(o->find_item(s));
                } // Fl_Choice* mnu_prosign[5]
                { Fl_Choice* o = mnu_prosign[6] = new Fl_Choice(167, 259, 47, 22, _("<INT>"));
                mnu_prosign[6]->down_box(FL_BORDER_BOX);
                mnu_prosign[6]->callback((Fl_Callback*)cb_mnu_prosign6);
                o->add(szProsigns);
                char s[2] = " "; s[0] = progdefaults.CW_prosigns[6];
                o->value(o->find_item(s));
                } // Fl_Choice* mnu_prosign[6]
                { Fl_Choice* o = mnu_prosign[7] = new Fl_Choice(167, 287, 47, 22, _("<HM>"));
                mnu_prosign[7]->down_box(FL_BORDER_BOX);
                mnu_prosign[7]->callback((Fl_Callback*)cb_mnu_prosign7);
                o->add(szProsigns);
                char s[2] = " "; s[0] = progdefaults.CW_prosigns[7];
                o->value(o->find_item(s));
                } // Fl_Choice* mnu_prosign[7]
                { Fl_Choice* o = mnu_prosign[8] = new Fl_Choice(167, 315, 47, 22, _("<VE>"));
                mnu_prosign[8]->down_box(FL_BORDER_BOX);
                mnu_prosign[8]->callback((Fl_Callback*)cb_mnu_prosign8);
                o->add(szProsigns);
                char s[2] = " "; s[0] = progdefaults.CW_prosigns[8];
                o->value(o->find_item(s));
                } // Fl_Choice* mnu_prosign[8]
                o->end();
              } // Fl_Group* o
              tabsCW->end();
            } // Fl_Tabs* tabsCW
            tabCW->end();
          } // Fl_Group* tabCW
          { tabDomEX = new Fl_Group(0, 50, 540, 320, _("Dom"));
            tabDomEX->hide();
            { Fl_Group* o = new Fl_Group(30, 60, 490, 180);
              o->box(FL_ENGRAVED_FRAME);
              { txtSecondary = new Fl_Input2(40, 87, 360, 40, _("Secondary Text"));
                txtSecondary->tooltip(_("Text to send during keyboard idle times"));
                txtSecondary->type(4);
                txtSecondary->box(FL_DOWN_BOX);
                txtSecondary->color(FL_BACKGROUND2_COLOR);
                txtSecondary->selection_color(FL_SELECTION_COLOR);
                txtSecondary->labeltype(FL_NORMAL_LABEL);
                txtSecondary->labelfont(0);
                txtSecondary->labelsize(14);
                txtSecondary->labelcolor(FL_FOREGROUND_COLOR);
                txtSecondary->callback((Fl_Callback*)cb_txtSecondary);
                txtSecondary->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                txtSecondary->when(FL_WHEN_CHANGED);
                txtSecondary->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* txtSecondary
              { Fl_Check_Button* o = valDominoEX_FILTER = new Fl_Check_Button(40, 141, 80, 20, _("Filtering"));
                valDominoEX_FILTER->tooltip(_("Use DSP filter before decoder"));
                valDominoEX_FILTER->down_box(FL_DOWN_BOX);
                valDominoEX_FILTER->value(1);
                valDominoEX_FILTER->callback((Fl_Callback*)cb_valDominoEX_FILTER);
                o->value(progdefaults.DOMINOEX_FILTER);
              } // Fl_Check_Button* valDominoEX_FILTER
              { Fl_Counter2* o = valDominoEX_BW = new Fl_Counter2(181, 141, 63, 20, _("Filter bandwidth factor"));
                valDominoEX_BW->tooltip(_("Filter bandwidth relative to signal width"));
                valDominoEX_BW->type(1);
                valDominoEX_BW->box(FL_UP_BOX);
                valDominoEX_BW->color(FL_BACKGROUND_COLOR);
                valDominoEX_BW->selection_color(FL_INACTIVE_COLOR);
                valDominoEX_BW->labeltype(FL_NORMAL_LABEL);
                valDominoEX_BW->labelfont(0);
                valDominoEX_BW->labelsize(14);
                valDominoEX_BW->labelcolor(FL_FOREGROUND_COLOR);
                valDominoEX_BW->minimum(1);
                valDominoEX_BW->maximum(2);
                valDominoEX_BW->value(1.5);
                valDominoEX_BW->callback((Fl_Callback*)cb_valDominoEX_BW);
                valDominoEX_BW->align(Fl_Align(FL_ALIGN_RIGHT));
                valDominoEX_BW->when(FL_WHEN_CHANGED);
                o->value(progdefaults.DOMINOEX_BW);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* valDominoEX_BW
              { Fl_Check_Button* o = chkDominoEX_FEC = new Fl_Check_Button(40, 171, 51, 20, _("FEC"));
                chkDominoEX_FEC->tooltip(_("Enable MultiPSK-compatible FEC"));
                chkDominoEX_FEC->down_box(FL_DOWN_BOX);
                chkDominoEX_FEC->callback((Fl_Callback*)cb_chkDominoEX_FEC);
                o->value(progdefaults.DOMINOEX_FEC);
              } // Fl_Check_Button* chkDominoEX_FEC
              { Fl_Value_Slider2* o = valDomCWI = new Fl_Value_Slider2(40, 207, 260, 20, _("CWI threshold"));
                valDomCWI->tooltip(_("CWI detection and suppression"));
                valDomCWI->type(1);
                valDomCWI->box(FL_DOWN_BOX);
                valDomCWI->color(FL_BACKGROUND_COLOR);
                valDomCWI->selection_color(FL_BACKGROUND_COLOR);
                valDomCWI->labeltype(FL_NORMAL_LABEL);
                valDomCWI->labelfont(0);
                valDomCWI->labelsize(14);
                valDomCWI->labelcolor(FL_FOREGROUND_COLOR);
                valDomCWI->textsize(14);
                valDomCWI->callback((Fl_Callback*)cb_valDomCWI);
                valDomCWI->align(Fl_Align(FL_ALIGN_TOP));
                valDomCWI->when(FL_WHEN_CHANGED);
                o->value(progdefaults.DomCWI);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
              } // Fl_Value_Slider2* valDomCWI
              { Fl_Counter2* o = valDominoEX_PATHS = new Fl_Counter2(364, 194, 63, 20, _("Paths (hidden)"));
                valDominoEX_PATHS->type(1);
                valDominoEX_PATHS->box(FL_UP_BOX);
                valDominoEX_PATHS->color(FL_BACKGROUND_COLOR);
                valDominoEX_PATHS->selection_color(FL_INACTIVE_COLOR);
                valDominoEX_PATHS->labeltype(FL_NORMAL_LABEL);
                valDominoEX_PATHS->labelfont(0);
                valDominoEX_PATHS->labelsize(14);
                valDominoEX_PATHS->labelcolor(FL_FOREGROUND_COLOR);
                valDominoEX_PATHS->minimum(4);
                valDominoEX_PATHS->maximum(8);
                valDominoEX_PATHS->step(1);
                valDominoEX_PATHS->value(5);
                valDominoEX_PATHS->callback((Fl_Callback*)cb_valDominoEX_PATHS);
                valDominoEX_PATHS->align(Fl_Align(FL_ALIGN_BOTTOM));
                valDominoEX_PATHS->when(FL_WHEN_CHANGED);
                o->value(progdefaults.DOMINOEX_PATHS);
                o->labelsize(FL_NORMAL_SIZE);
                o->hide();
              } // Fl_Counter2* valDominoEX_PATHS
              o->end();
            } // Fl_Group* o
            tabDomEX->end();
          } // Fl_Group* tabDomEX
          { tabFeld = new Fl_Group(0, 50, 540, 320, _("Feld"));
            tabFeld->hide();
            { Fl_Group* o = new Fl_Group(30, 72, 490, 145);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Choice* o = selHellFont = new Fl_Choice(40, 82, 150, 20, _("Transmit font"));
                selHellFont->tooltip(_("Select TX raster font"));
                selHellFont->down_box(FL_BORDER_BOX);
                selHellFont->callback((Fl_Callback*)cb_selHellFont);
                selHellFont->align(Fl_Align(FL_ALIGN_RIGHT));
                o->add(szFeldFonts);
                o->value(progdefaults.feldfontnbr);
              } // Fl_Choice* selHellFont
              { Fl_Check_Button* o = btnBlackboard = new Fl_Check_Button(325, 82, 125, 20, _("Reverse video"));
                btnBlackboard->tooltip(_("Display RX in reverse video"));
                btnBlackboard->down_box(FL_DOWN_BOX);
                btnBlackboard->callback((Fl_Callback*)cb_btnBlackboard);
                o->value(progdefaults.HellBlackboard);
              } // Fl_Check_Button* btnBlackboard
              { Fl_Spinner2* o = valHellXmtWidth = new Fl_Spinner2(40, 112, 40, 20, _("Transmit width"));
                valHellXmtWidth->tooltip(_("# of multiple scans / character line"));
                valHellXmtWidth->box(FL_NO_BOX);
                valHellXmtWidth->color(FL_BACKGROUND_COLOR);
                valHellXmtWidth->selection_color(FL_BACKGROUND_COLOR);
                valHellXmtWidth->labeltype(FL_NORMAL_LABEL);
                valHellXmtWidth->labelfont(0);
                valHellXmtWidth->labelsize(14);
                valHellXmtWidth->labelcolor(FL_FOREGROUND_COLOR);
                valHellXmtWidth->maximum(3);
                valHellXmtWidth->callback((Fl_Callback*)cb_valHellXmtWidth);
                valHellXmtWidth->align(Fl_Align(FL_ALIGN_RIGHT));
                valHellXmtWidth->when(FL_WHEN_RELEASE);
                o->value(progdefaults.HellXmtWidth);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Spinner2* valHellXmtWidth
              { Fl_Check_Button* o = btnHellRcvWidth = new Fl_Check_Button(325, 112, 155, 20, _("Halve receive width"));
                btnHellRcvWidth->tooltip(_("Compress Rx in time"));
                btnHellRcvWidth->down_box(FL_DOWN_BOX);
                btnHellRcvWidth->callback((Fl_Callback*)cb_btnHellRcvWidth);
                o->value(progdefaults.HellRcvWidth);
              } // Fl_Check_Button* btnHellRcvWidth
              { Fl_Choice* o = mnuHellPulse = new Fl_Choice(40, 159, 150, 20, _("Pulse shape"));
                mnuHellPulse->tooltip(_("Raised cosine pulse shape factor"));
                mnuHellPulse->down_box(FL_BORDER_BOX);
                mnuHellPulse->callback((Fl_Callback*)cb_mnuHellPulse);
                mnuHellPulse->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                o->add(_("Slow (4 msec)"));
                o->add(_("Fast (2 msec)"));
                o->value(progdefaults.HellPulseFast);
              } // Fl_Choice* mnuHellPulse
              { Fl_Value_Slider2* o = sldrHellBW = new Fl_Value_Slider2(231, 159, 246, 20, _("Receive filter bandwidth"));
                sldrHellBW->tooltip(_("Adjust the DSP bandwidth"));
                sldrHellBW->type(1);
                sldrHellBW->box(FL_DOWN_BOX);
                sldrHellBW->color(FL_BACKGROUND_COLOR);
                sldrHellBW->selection_color(FL_BACKGROUND_COLOR);
                sldrHellBW->labeltype(FL_NORMAL_LABEL);
                sldrHellBW->labelfont(0);
                sldrHellBW->labelsize(14);
                sldrHellBW->labelcolor(FL_FOREGROUND_COLOR);
                sldrHellBW->minimum(10);
                sldrHellBW->maximum(2400);
                sldrHellBW->step(5);
                sldrHellBW->value(400);
                sldrHellBW->textsize(14);
                sldrHellBW->callback((Fl_Callback*)cb_sldrHellBW);
                sldrHellBW->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                sldrHellBW->when(FL_WHEN_CHANGED);
                o->value(progdefaults.HELL_BW);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
              } // Fl_Value_Slider2* sldrHellBW
              { Fl_Check_Button* o = btnFeldHellIdle = new Fl_Check_Button(40, 189, 230, 20, _("Transmit periods (.) when idle"));
                btnFeldHellIdle->tooltip(_("Transmits a diddle dot when no keyboard activity"));
                btnFeldHellIdle->down_box(FL_DOWN_BOX);
                btnFeldHellIdle->value(1);
                btnFeldHellIdle->callback((Fl_Callback*)cb_btnFeldHellIdle);
                o->value(progdefaults.HellXmtIdle);
              } // Fl_Check_Button* btnFeldHellIdle
              { Fl_Check_Button* o = btnHellXmtWidth = new Fl_Check_Button(330, 187, 113, 20, _("2x Xmt Width (hidden)"));
                btnHellXmtWidth->down_box(FL_DOWN_BOX);
                btnHellXmtWidth->callback((Fl_Callback*)cb_btnHellXmtWidth);
                o->value(progdefaults.HellXmtWidth);
                o->hide();
              } // Fl_Check_Button* btnHellXmtWidth
              o->end();
            } // Fl_Group* o
            tabFeld->end();
          } // Fl_Group* tabFeld
          { tabMT63 = new Fl_Group(0, 50, 540, 320, _("MT-63"));
            tabMT63->hide();
            { Fl_Group* o = new Fl_Group(18, 73, 490, 84);
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btnMT63_8bit = new Fl_Check_Button(163, 87, 205, 20, _("8-bit extended characters (UTF-8)"));
                btnMT63_8bit->tooltip(_("Enable this for UTF-8 characters"));
                btnMT63_8bit->down_box(FL_DOWN_BOX);
                btnMT63_8bit->value(1);
                btnMT63_8bit->callback((Fl_Callback*)cb_btnMT63_8bit);
                o->value(progdefaults.mt63_8bit);
              } // Fl_Check_Button* btnMT63_8bit
              { Fl_Check_Button* o = btnMT63_rx_integration = new Fl_Check_Button(163, 117, 190, 20, _("Long receive integration"));
                btnMT63_rx_integration->tooltip(_("Enable for very weak signals"));
                btnMT63_rx_integration->down_box(FL_DOWN_BOX);
                btnMT63_rx_integration->value(1);
                btnMT63_rx_integration->callback((Fl_Callback*)cb_btnMT63_rx_integration);
                o->value(progdefaults.mt63_rx_integration);
              } // Fl_Check_Button* btnMT63_rx_integration
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(19, 169, 490, 131);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Check_Button* o = btnMT63_usetones = new Fl_Check_Button(163, 177, 200, 20, _("Transmit lower start tone"));
                btnMT63_usetones->down_box(FL_DOWN_BOX);
                btnMT63_usetones->callback((Fl_Callback*)cb_btnMT63_usetones);
                o->value(progdefaults.mt63_usetones);
              } // Fl_Check_Button* btnMT63_usetones
              { Fl_Check_Button* o = btnMT63_upper_lower = new Fl_Check_Button(163, 207, 200, 20, _("Transmit upper start tone"));
                btnMT63_upper_lower->down_box(FL_DOWN_BOX);
                btnMT63_upper_lower->callback((Fl_Callback*)cb_btnMT63_upper_lower);
                o->value(progdefaults.mt63_twotones);
                if (!btnMT63_usetones->value()) o->deactivate();
              } // Fl_Check_Button* btnMT63_upper_lower
              { Fl_Spinner2* o = MT63_tone_duration = new Fl_Spinner2(163, 233, 40, 20, _("Tone Duration (secs)"));
                MT63_tone_duration->box(FL_NO_BOX);
                MT63_tone_duration->color(FL_BACKGROUND_COLOR);
                MT63_tone_duration->selection_color(FL_BACKGROUND_COLOR);
                MT63_tone_duration->labeltype(FL_NORMAL_LABEL);
                MT63_tone_duration->labelfont(0);
                MT63_tone_duration->labelsize(14);
                MT63_tone_duration->labelcolor(FL_FOREGROUND_COLOR);
                MT63_tone_duration->maximum(10);
                MT63_tone_duration->value(4);
                MT63_tone_duration->callback((Fl_Callback*)cb_MT63_tone_duration);
                MT63_tone_duration->align(Fl_Align(FL_ALIGN_RIGHT));
                MT63_tone_duration->when(FL_WHEN_RELEASE);
                o->value(progdefaults.mt63_tone_duration);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Spinner2* MT63_tone_duration
              { Fl_Check_Button* o = btnMT63_at500 = new Fl_Check_Button(163, 262, 200, 20, _("Allow manual tuning"));
                btnMT63_at500->down_box(FL_DOWN_BOX);
                btnMT63_at500->callback((Fl_Callback*)cb_btnMT63_at500);
                o->value(!progdefaults.mt63_at500);
              } // Fl_Check_Button* btnMT63_at500
              o->end();
            } // Fl_Group* o
            tabMT63->end();
          } // Fl_Group* tabMT63
          { tabOlivia = new Fl_Group(0, 50, 540, 320, _("Olivia"));
            tabOlivia->hide();
            { Fl_Group* o = new Fl_Group(24, 76, 490, 280);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Choice* o = mnuOlivia_Bandwidth = new Fl_Choice(79, 96, 85, 20, _("Bandwidth"));
                mnuOlivia_Bandwidth->tooltip(_("Select bandwidth"));
                mnuOlivia_Bandwidth->down_box(FL_BORDER_BOX);
                mnuOlivia_Bandwidth->callback((Fl_Callback*)cb_mnuOlivia_Bandwidth);
                mnuOlivia_Bandwidth->align(Fl_Align(FL_ALIGN_RIGHT));
                o->add(szOliviaBandwidth);
                o->value(2);
              } // Fl_Choice* mnuOlivia_Bandwidth
              { Fl_Choice* o = mnuOlivia_Tones = new Fl_Choice(340, 96, 70, 20, _("Tones"));
                mnuOlivia_Tones->tooltip(_("Select number of tones"));
                mnuOlivia_Tones->down_box(FL_BORDER_BOX);
                mnuOlivia_Tones->callback((Fl_Callback*)cb_mnuOlivia_Tones);
                mnuOlivia_Tones->align(Fl_Align(FL_ALIGN_RIGHT));
                o->add(szOliviaTones);
                o->value(2);
              } // Fl_Choice* mnuOlivia_Tones
              { Fl_Group* o = new Fl_Group(79, 135, 379, 133, _("Receive synchronizer"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Counter2* o = cntOlivia_smargin = new Fl_Counter2(99, 166, 70, 20, _("Tune margin (tone frequency spacing)"));
                cntOlivia_smargin->tooltip(_("Change ONLY to experiment"));
                cntOlivia_smargin->type(1);
                cntOlivia_smargin->box(FL_UP_BOX);
                cntOlivia_smargin->color(FL_BACKGROUND_COLOR);
                cntOlivia_smargin->selection_color(FL_INACTIVE_COLOR);
                cntOlivia_smargin->labeltype(FL_NORMAL_LABEL);
                cntOlivia_smargin->labelfont(0);
                cntOlivia_smargin->labelsize(14);
                cntOlivia_smargin->labelcolor(FL_FOREGROUND_COLOR);
                cntOlivia_smargin->minimum(2);
                cntOlivia_smargin->maximum(128);
                cntOlivia_smargin->step(1);
                cntOlivia_smargin->value(8);
                cntOlivia_smargin->callback((Fl_Callback*)cb_cntOlivia_smargin);
                cntOlivia_smargin->align(Fl_Align(FL_ALIGN_RIGHT));
                cntOlivia_smargin->when(FL_WHEN_CHANGED);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntOlivia_smargin
                { Fl_Counter2* o = cntOlivia_sinteg = new Fl_Counter2(99, 198, 70, 20, _("Integration period (FEC blocks)"));
                cntOlivia_sinteg->tooltip(_("Change ONLY to experiment"));
                cntOlivia_sinteg->type(1);
                cntOlivia_sinteg->box(FL_UP_BOX);
                cntOlivia_sinteg->color(FL_BACKGROUND_COLOR);
                cntOlivia_sinteg->selection_color(FL_INACTIVE_COLOR);
                cntOlivia_sinteg->labeltype(FL_NORMAL_LABEL);
                cntOlivia_sinteg->labelfont(0);
                cntOlivia_sinteg->labelsize(14);
                cntOlivia_sinteg->labelcolor(FL_FOREGROUND_COLOR);
                cntOlivia_sinteg->minimum(2);
                cntOlivia_sinteg->maximum(128);
                cntOlivia_sinteg->step(1);
                cntOlivia_sinteg->value(4);
                cntOlivia_sinteg->callback((Fl_Callback*)cb_cntOlivia_sinteg);
                cntOlivia_sinteg->align(Fl_Align(FL_ALIGN_RIGHT));
                cntOlivia_sinteg->when(FL_WHEN_CHANGED);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntOlivia_sinteg
                { Fl_Check_Button* o = btn_olivia_reset_fec = new Fl_Check_Button(100, 230, 349, 20, _("Reset FEC blocks when changing BW or Tones"));
                btn_olivia_reset_fec->tooltip(_("Enable this for UTF-8 character transmission"));
                btn_olivia_reset_fec->down_box(FL_DOWN_BOX);
                btn_olivia_reset_fec->callback((Fl_Callback*)cb_btn_olivia_reset_fec);
                o->value(progdefaults.olivia_reset_fec);
                } // Fl_Check_Button* btn_olivia_reset_fec
                o->end();
              } // Fl_Group* o
              { btnOlivia_8bit = new Fl_Check_Button(100, 291, 265, 20, _("8-bit extended characters (UTF-8)"));
                btnOlivia_8bit->tooltip(_("Enable this for UTF-8 character transmission"));
                btnOlivia_8bit->down_box(FL_DOWN_BOX);
                btnOlivia_8bit->callback((Fl_Callback*)cb_btnOlivia_8bit);
              } // Fl_Check_Button* btnOlivia_8bit
              o->end();
            } // Fl_Group* o
            tabOlivia->end();
          } // Fl_Group* tabOlivia
          { tabContestia = new Fl_Group(0, 50, 540, 320, _("Cont\'"));
            tabContestia->hide();
            { Fl_Group* o = new Fl_Group(25, 80, 490, 200);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Choice* o = mnuContestia_Bandwidth = new Fl_Choice(80, 100, 85, 20, _("Bandwidth"));
                mnuContestia_Bandwidth->tooltip(_("Select bandwidth"));
                mnuContestia_Bandwidth->down_box(FL_BORDER_BOX);
                mnuContestia_Bandwidth->callback((Fl_Callback*)cb_mnuContestia_Bandwidth);
                mnuContestia_Bandwidth->align(Fl_Align(FL_ALIGN_RIGHT));
                o->add(szContestiaBandwidth);
                o->value(2);
              } // Fl_Choice* mnuContestia_Bandwidth
              { Fl_Choice* o = mnuContestia_Tones = new Fl_Choice(341, 100, 70, 20, _("Tones"));
                mnuContestia_Tones->tooltip(_("Select number of tones"));
                mnuContestia_Tones->down_box(FL_BORDER_BOX);
                mnuContestia_Tones->callback((Fl_Callback*)cb_mnuContestia_Tones);
                mnuContestia_Tones->align(Fl_Align(FL_ALIGN_RIGHT));
                o->add(szContestiaTones);
                o->value(2);
              } // Fl_Choice* mnuContestia_Tones
              { Fl_Group* o = new Fl_Group(63, 139, 414, 131, _("Receive synchronizer"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Counter2* o = cntContestia_smargin = new Fl_Counter2(97, 170, 70, 20, _("Tune margin (tone frequency spacing)"));
                cntContestia_smargin->tooltip(_("Change ONLY to experiment"));
                cntContestia_smargin->type(1);
                cntContestia_smargin->box(FL_UP_BOX);
                cntContestia_smargin->color(FL_BACKGROUND_COLOR);
                cntContestia_smargin->selection_color(FL_INACTIVE_COLOR);
                cntContestia_smargin->labeltype(FL_NORMAL_LABEL);
                cntContestia_smargin->labelfont(0);
                cntContestia_smargin->labelsize(14);
                cntContestia_smargin->labelcolor(FL_FOREGROUND_COLOR);
                cntContestia_smargin->minimum(2);
                cntContestia_smargin->maximum(128);
                cntContestia_smargin->step(1);
                cntContestia_smargin->value(8);
                cntContestia_smargin->callback((Fl_Callback*)cb_cntContestia_smargin);
                cntContestia_smargin->align(Fl_Align(FL_ALIGN_RIGHT));
                cntContestia_smargin->when(FL_WHEN_CHANGED);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntContestia_smargin
                { Fl_Counter2* o = cntContestia_sinteg = new Fl_Counter2(97, 202, 70, 20, _("Integration period (FEC blocks)"));
                cntContestia_sinteg->tooltip(_("Change ONLY to experiment"));
                cntContestia_sinteg->type(1);
                cntContestia_sinteg->box(FL_UP_BOX);
                cntContestia_sinteg->color(FL_BACKGROUND_COLOR);
                cntContestia_sinteg->selection_color(FL_INACTIVE_COLOR);
                cntContestia_sinteg->labeltype(FL_NORMAL_LABEL);
                cntContestia_sinteg->labelfont(0);
                cntContestia_sinteg->labelsize(14);
                cntContestia_sinteg->labelcolor(FL_FOREGROUND_COLOR);
                cntContestia_sinteg->minimum(2);
                cntContestia_sinteg->maximum(128);
                cntContestia_sinteg->step(1);
                cntContestia_sinteg->value(4);
                cntContestia_sinteg->callback((Fl_Callback*)cb_cntContestia_sinteg);
                cntContestia_sinteg->align(Fl_Align(FL_ALIGN_RIGHT));
                cntContestia_sinteg->when(FL_WHEN_CHANGED);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntContestia_sinteg
                { Fl_Check_Button* o = btn_contestia_reset_fec = new Fl_Check_Button(108, 235, 349, 20, _("Reset FEC blocks when changing BW or Tones"));
                btn_contestia_reset_fec->tooltip(_("Enable this for UTF-8 character transmission"));
                btn_contestia_reset_fec->down_box(FL_DOWN_BOX);
                btn_contestia_reset_fec->callback((Fl_Callback*)cb_btn_contestia_reset_fec);
                o->value(progdefaults.contestia_reset_fec);
                } // Fl_Check_Button* btn_contestia_reset_fec
                o->end();
              } // Fl_Group* o
              { btnContestia_8bit = new Fl_Check_Button(80, 249, 200, 20, _("8-bit extended characters"));
                btnContestia_8bit->tooltip(_("Enable this for Latin-1 accented characters"));
                btnContestia_8bit->down_box(FL_DOWN_BOX);
                btnContestia_8bit->callback((Fl_Callback*)cb_btnContestia_8bit);
                btnContestia_8bit->hide();
              } // Fl_Check_Button* btnContestia_8bit
              o->end();
            } // Fl_Group* o
            tabContestia->end();
          } // Fl_Group* tabContestia
          { tabPSK = new Fl_Group(0, 50, 540, 322, _("PSK"));
            tabPSK->hide();
            { tabsPSK = new Fl_Tabs(0, 50, 540, 322);
              tabsPSK->selection_color(FL_LIGHT1);
              { Fl_Group* o = new Fl_Group(0, 75, 540, 295, _("General"));
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                { Fl_Group* o = new Fl_Group(21, 93, 490, 98, _("AFC behavior"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Counter2* o = cntSearchRange = new Fl_Counter2(31, 125, 75, 20, _("Acquisition search range (Hz)"));
                cntSearchRange->tooltip(_("Capture signals within this frequency range"));
                cntSearchRange->type(1);
                cntSearchRange->box(FL_UP_BOX);
                cntSearchRange->color(FL_BACKGROUND_COLOR);
                cntSearchRange->selection_color(FL_INACTIVE_COLOR);
                cntSearchRange->labeltype(FL_NORMAL_LABEL);
                cntSearchRange->labelfont(0);
                cntSearchRange->labelsize(14);
                cntSearchRange->labelcolor(FL_FOREGROUND_COLOR);
                cntSearchRange->minimum(10);
                cntSearchRange->maximum(500);
                cntSearchRange->step(10);
                cntSearchRange->value(200);
                cntSearchRange->callback((Fl_Callback*)cb_cntSearchRange);
                cntSearchRange->align(Fl_Align(FL_ALIGN_RIGHT));
                cntSearchRange->when(FL_WHEN_CHANGED);
                o->value(progdefaults.SearchRange);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntSearchRange
                { Fl_Counter2* o = cntACQsn = new Fl_Counter2(31, 154, 75, 20, _("Acquisition S/N (dB)"));
                cntACQsn->tooltip(_("Capture signals over this threshold"));
                cntACQsn->type(1);
                cntACQsn->box(FL_UP_BOX);
                cntACQsn->color(FL_BACKGROUND_COLOR);
                cntACQsn->selection_color(FL_INACTIVE_COLOR);
                cntACQsn->labeltype(FL_NORMAL_LABEL);
                cntACQsn->labelfont(0);
                cntACQsn->labelsize(14);
                cntACQsn->labelcolor(FL_FOREGROUND_COLOR);
                cntACQsn->minimum(3);
                cntACQsn->maximum(20);
                cntACQsn->step(1);
                cntACQsn->value(6);
                cntACQsn->callback((Fl_Callback*)cb_cntACQsn);
                cntACQsn->align(Fl_Align(FL_ALIGN_RIGHT));
                cntACQsn->when(FL_WHEN_CHANGED);
                o->value(progdefaults.ACQsn);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntACQsn
                o->end();
                } // Fl_Group* o
                { Fl_Group* o = new Fl_Group(21, 191, 490, 65, _("S/N and IMD behavior"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Choice* o = mnuPSKStatusTimeout = new Fl_Choice(31, 222, 80, 20, _("after"));
                mnuPSKStatusTimeout->tooltip(_("Behavior of s/n imd"));
                mnuPSKStatusTimeout->down_box(FL_BORDER_BOX);
                mnuPSKStatusTimeout->callback((Fl_Callback*)cb_mnuPSKStatusTimeout);
                mnuPSKStatusTimeout->align(Fl_Align(FL_ALIGN_RIGHT));
                o->add(_("Clear")); o->add(_("Dim"));
                o->value(progdefaults.StatusDim);
                } // Fl_Choice* mnuPSKStatusTimeout
                { Fl_Counter2* o = new Fl_Counter2(172, 222, 75, 20, _("seconds"));
                o->tooltip(_("Will occur after this time in seconds"));
                o->type(1);
                o->box(FL_UP_BOX);
                o->color(FL_BACKGROUND_COLOR);
                o->selection_color(FL_INACTIVE_COLOR);
                o->labeltype(FL_NORMAL_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_FOREGROUND_COLOR);
                o->minimum(0);
                o->maximum(30);
                o->step(1);
                o->callback((Fl_Callback*)cb_seconds);
                o->align(Fl_Align(FL_ALIGN_RIGHT));
                o->when(FL_WHEN_CHANGED);
                o->value(progdefaults.StatusTimeout);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* o
                o->end();
                } // Fl_Group* o
                { Fl_Group* o = new Fl_Group(22, 258, 490, 98, _("Multi-Channel Signal Processing"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Check_Button* o = btnEnablePSKbrowsing = new Fl_Check_Button(32, 315, 180, 20, _("Multi-channel detector"));
                btnEnablePSKbrowsing->down_box(FL_DOWN_BOX);
                btnEnablePSKbrowsing->callback((Fl_Callback*)cb_btnEnablePSKbrowsing);
                o->value(progdefaults.pskbrowser_on);
                } // Fl_Check_Button* btnEnablePSKbrowsing
                { Fl_Box* o = new Fl_Box(32, 285, 440, 20, _("Disable on very slow CPUs of if signal browser is not used"));
                o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
                } // Fl_Box* o
                o->end();
                } // Fl_Group* o
                o->end();
              } // Fl_Group* o
              tabsPSK->end();
            } // Fl_Tabs* tabsPSK
            tabPSK->end();
          } // Fl_Group* tabPSK
          { tabRTTY = new Fl_Group(0, 50, 540, 320, _("RTTY"));
            tabRTTY->hide();
            { tabsRTTY = new Fl_Tabs(0, 50, 540, 320);
              tabsRTTY->selection_color(FL_LIGHT1);
              { Fl_Group* o = new Fl_Group(0, 75, 540, 295, _("Rx"));
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                { Fl_Group* o = new Fl_Group(2, 82, 535, 70, _("Receive"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Choice* o = mnuRTTYAFCSpeed = new Fl_Choice(77, 110, 90, 22, _("AFC speed"));
                mnuRTTYAFCSpeed->tooltip(_("AFC tracking speed"));
                mnuRTTYAFCSpeed->down_box(FL_BORDER_BOX);
                mnuRTTYAFCSpeed->callback((Fl_Callback*)cb_mnuRTTYAFCSpeed);
                mnuRTTYAFCSpeed->align(Fl_Align(FL_ALIGN_TOP));
                o->add("Slow"); o->add("Normal"); o->add("Fast");
                o->value(progdefaults.rtty_afcspeed);
                } // Fl_Choice* mnuRTTYAFCSpeed
                { Fl_Check_Button* o = chkUOSrx = new Fl_Check_Button(181, 110, 63, 22, _("RX - unshift on space"));
                chkUOSrx->tooltip(_("Revert to unshifted char\'s on a space"));
                chkUOSrx->down_box(FL_DOWN_BOX);
                chkUOSrx->callback((Fl_Callback*)cb_chkUOSrx);
                o->value(progdefaults.UOSrx);
                } // Fl_Check_Button* chkUOSrx
                { Fl_Value_Input* o = rtty_rx_shape = new Fl_Value_Input(415, 108, 48, 25, _("Filter Shape Factor"));
                rtty_rx_shape->tooltip(_("rcos timing coefficient:\n1.0 ... 2.0\nW1HKJ best 1.275\nDO2SMF best 1.500"));
                rtty_rx_shape->minimum(1);
                rtty_rx_shape->maximum(2);
                rtty_rx_shape->step(0.001);
                rtty_rx_shape->value(1.25);
                rtty_rx_shape->callback((Fl_Callback*)cb_rtty_rx_shape);
                rtty_rx_shape->align(Fl_Align(FL_ALIGN_TOP));
                rtty_rx_shape->hide();
                o->value(progdefaults.rtty_filter);
                } // Fl_Value_Input* rtty_rx_shape
                o->end();
                } // Fl_Group* o
                { Fl_Group* o = new Fl_Group(2, 153, 535, 55, _("Decode (CWI suppression)"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Check_Button* o = btnRxTones[0] = new Fl_Check_Button(90, 180, 70, 15, _("Mark-Space"));
                btnRxTones[0]->down_box(FL_DOWN_BOX);
                btnRxTones[0]->callback((Fl_Callback*)cb_btnRxTones);
                o->value(progdefaults.rtty_cwi == 0);
                } // Fl_Check_Button* btnRxTones[0]
                { Fl_Check_Button* o = btnRxTones[1] = new Fl_Check_Button(223, 180, 70, 15, _("Mark only"));
                btnRxTones[1]->down_box(FL_DOWN_BOX);
                btnRxTones[1]->callback((Fl_Callback*)cb_btnRxTones1);
                o->value(progdefaults.rtty_cwi == 1);
                } // Fl_Check_Button* btnRxTones[1]
                { Fl_Check_Button* o = btnRxTones[2] = new Fl_Check_Button(357, 180, 70, 15, _("Space only"));
                btnRxTones[2]->down_box(FL_DOWN_BOX);
                btnRxTones[2]->callback((Fl_Callback*)cb_btnRxTones2);
                o->value(progdefaults.rtty_cwi == 2);
                } // Fl_Check_Button* btnRxTones[2]
                o->end();
                } // Fl_Group* o
                { Fl_Group* o = new Fl_Group(2, 210, 535, 55, _("RTTY Scope Display"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Check_Button* o = btnPreferXhairScope = new Fl_Check_Button(90, 232, 165, 22, _("Use cross hair scope"));
                btnPreferXhairScope->tooltip(_("Default to cross hair digiscope"));
                btnPreferXhairScope->down_box(FL_DOWN_BOX);
                btnPreferXhairScope->callback((Fl_Callback*)cb_btnPreferXhairScope);
                o->value(progdefaults.PreferXhairScope);
                } // Fl_Check_Button* btnPreferXhairScope
                { Fl_Check_Button* o = chk_true_scope = new Fl_Check_Button(310, 232, 70, 22, _("XY - classic scope"));
                chk_true_scope->tooltip(_("Enabled - use Mark/Space filter outputs\nDisabled - use pseudo signals"));
                chk_true_scope->down_box(FL_DOWN_BOX);
                chk_true_scope->callback((Fl_Callback*)cb_chk_true_scope);
                o->value(progdefaults.true_scope);
                } // Fl_Check_Button* chk_true_scope
                o->end();
                } // Fl_Group* o
                { Fl_Group* o = new Fl_Group(2, 267, 535, 65, _("Log RTTY frequency"));
                o->box(FL_ENGRAVED_FRAME);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { Fl_Check_Button* o = chk_useMARKfreq = new Fl_Check_Button(90, 293, 146, 22, _("Use MARK freq\'"));
                chk_useMARKfreq->tooltip(_("Enabled - log QSO using Mark frequency\nDisabled - log QSO using center frequ\
ency"));
                chk_useMARKfreq->down_box(FL_DOWN_BOX);
                chk_useMARKfreq->value(1);
                chk_useMARKfreq->callback((Fl_Callback*)cb_chk_useMARKfreq);
                o->value(progdefaults.useMARKfreq);
                } // Fl_Check_Button* chk_useMARKfreq
                { Fl_Button* o = btnRTTY_mark_color = new Fl_Button(310, 293, 41, 18, _("track color"));
                btnRTTY_mark_color->tooltip(_("Color of Mark Track"));
                btnRTTY_mark_color->color((Fl_Color)2);
                btnRTTY_mark_color->callback((Fl_Callback*)cb_btnRTTY_mark_color);
                btnRTTY_mark_color->align(Fl_Align(FL_ALIGN_RIGHT));
                o->color(fl_rgb_color(progdefaults.rttymarkRGBI.R,progdefaults.rttymarkRGBI.G,progdefaults.rttymarkRGBI.B));
                } // Fl_Button* btnRTTY_mark_color
                o->end();
                } // Fl_Group* o
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(0, 75, 540, 295, _("Tx"));
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                o->hide();
                { Fl_Choice* o = selShift = new Fl_Choice(35, 104, 100, 20, _("Carrier shift"));
                selShift->tooltip(_("Select carrier shift"));
                selShift->down_box(FL_BORDER_BOX);
                selShift->callback((Fl_Callback*)cb_selShift);
                selShift->align(Fl_Align(FL_ALIGN_RIGHT));
                selShift->when(FL_WHEN_CHANGED);
                o->add(szShifts);o->value(progdefaults.rtty_shift);
                } // Fl_Choice* selShift
                { Fl_Counter2* o = selCustomShift = new Fl_Counter2(35, 137, 100, 20, _("Custom shift"));
                selCustomShift->tooltip(_("Input carrier shift"));
                selCustomShift->box(FL_UP_BOX);
                selCustomShift->color(FL_BACKGROUND_COLOR);
                selCustomShift->selection_color(FL_INACTIVE_COLOR);
                selCustomShift->labeltype(FL_NORMAL_LABEL);
                selCustomShift->labelfont(0);
                selCustomShift->labelsize(14);
                selCustomShift->labelcolor(FL_FOREGROUND_COLOR);
                selCustomShift->minimum(10);
                selCustomShift->maximum(1000);
                selCustomShift->step(1);
                selCustomShift->value(450);
                selCustomShift->callback((Fl_Callback*)cb_selCustomShift);
                selCustomShift->align(Fl_Align(FL_ALIGN_RIGHT));
                selCustomShift->when(FL_WHEN_CHANGED);
                o->lstep(10.0);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* selCustomShift
                { Fl_Choice* o = selBaud = new Fl_Choice(35, 170, 100, 20, _("Baud rate"));
                selBaud->tooltip(_("Select carrier baudrate"));
                selBaud->down_box(FL_BORDER_BOX);
                selBaud->callback((Fl_Callback*)cb_selBaud);
                selBaud->align(Fl_Align(FL_ALIGN_RIGHT));
                selBaud->when(FL_WHEN_CHANGED);
                o->add(szBauds);o->value(progdefaults.rtty_baud);
                } // Fl_Choice* selBaud
                { Fl_Choice* o = selBits = new Fl_Choice(35, 203, 100, 20, _("Bits per character"));
                selBits->tooltip(_("Select # bits / char"));
                selBits->down_box(FL_BORDER_BOX);
                selBits->callback((Fl_Callback*)cb_selBits);
                selBits->align(Fl_Align(FL_ALIGN_RIGHT));
                selBits->when(FL_WHEN_CHANGED);
                o->add(szSelBits);o->value(progdefaults.rtty_bits);
                } // Fl_Choice* selBits
                { Fl_Choice* o = selParity = new Fl_Choice(35, 236, 100, 20, _("Parity"));
                selParity->tooltip(_("Select parity"));
                selParity->down_box(FL_BORDER_BOX);
                selParity->callback((Fl_Callback*)cb_selParity);
                selParity->align(Fl_Align(FL_ALIGN_RIGHT));
                selParity->when(FL_WHEN_CHANGED);
                o->add(szParity);o->value(progdefaults.rtty_parity);
                } // Fl_Choice* selParity
                { Fl_Choice* o = selStopBits = new Fl_Choice(35, 270, 100, 20, _("Stop bits"));
                selStopBits->tooltip(_("Select # stop bits"));
                selStopBits->down_box(FL_BORDER_BOX);
                selStopBits->callback((Fl_Callback*)cb_selStopBits);
                selStopBits->align(Fl_Align(FL_ALIGN_RIGHT));
                selStopBits->when(FL_WHEN_CHANGED);
                o->add(szStopBits);o->value(progdefaults.rtty_stop);
                } // Fl_Choice* selStopBits
                { Fl_Check_Button* o = btnAUTOCRLF = new Fl_Check_Button(286, 103, 90, 22, _("AutoCRLF"));
                btnAUTOCRLF->tooltip(_("Add CRLF after page width characters"));
                btnAUTOCRLF->down_box(FL_DOWN_BOX);
                btnAUTOCRLF->callback((Fl_Callback*)cb_btnAUTOCRLF);
                o->value(progdefaults.rtty_autocrlf);
                } // Fl_Check_Button* btnAUTOCRLF
                { Fl_Counter2* o = cntrAUTOCRLF = new Fl_Counter2(397, 104, 65, 20, _("chars"));
                cntrAUTOCRLF->tooltip(_("Auto CRLF line length"));
                cntrAUTOCRLF->type(1);
                cntrAUTOCRLF->box(FL_UP_BOX);
                cntrAUTOCRLF->color(FL_BACKGROUND_COLOR);
                cntrAUTOCRLF->selection_color(FL_INACTIVE_COLOR);
                cntrAUTOCRLF->labeltype(FL_NORMAL_LABEL);
                cntrAUTOCRLF->labelfont(0);
                cntrAUTOCRLF->labelsize(14);
                cntrAUTOCRLF->labelcolor(FL_FOREGROUND_COLOR);
                cntrAUTOCRLF->minimum(68);
                cntrAUTOCRLF->maximum(80);
                cntrAUTOCRLF->step(1);
                cntrAUTOCRLF->value(72);
                cntrAUTOCRLF->callback((Fl_Callback*)cb_cntrAUTOCRLF);
                cntrAUTOCRLF->align(Fl_Align(FL_ALIGN_RIGHT));
                cntrAUTOCRLF->when(FL_WHEN_CHANGED);
                o->labelsize(FL_NORMAL_SIZE);
                } // Fl_Counter2* cntrAUTOCRLF
                { Fl_Check_Button* o = btnCRCRLF = new Fl_Check_Button(286, 136, 90, 22, _("CR-CR-LF"));
                btnCRCRLF->tooltip(_("Use \"cr cr lf\" for \"cr lf\""));
                btnCRCRLF->down_box(FL_DOWN_BOX);
                btnCRCRLF->callback((Fl_Callback*)cb_btnCRCRLF);
                btnCRCRLF->when(FL_WHEN_RELEASE_ALWAYS);
                o->value(progdefaults.rtty_crcrlf);
                } // Fl_Check_Button* btnCRCRLF
                { Fl_Check_Button* o = chkUOStx = new Fl_Check_Button(286, 169, 63, 22, _("TX - unshift on space"));
                chkUOStx->tooltip(_("Revert to Unsifted char\'s on a space"));
                chkUOStx->down_box(FL_DOWN_BOX);
                chkUOStx->callback((Fl_Callback*)cb_chkUOStx);
                o->value(progdefaults.UOStx);
                } // Fl_Check_Button* chkUOStx
                { Fl_Check_Button* o = chkPseudoFSK = new Fl_Check_Button(286, 202, 212, 22, _("Pseudo-FSK - right channel"));
                chkPseudoFSK->tooltip(_("Create keyed square wave on right audio channel"));
                chkPseudoFSK->down_box(FL_DOWN_BOX);
                chkPseudoFSK->callback((Fl_Callback*)cb_chkPseudoFSK);
                o->value(progdefaults.PseudoFSK);
                } // Fl_Check_Button* chkPseudoFSK
                o->end();
              } // Fl_Group* o
              { Fl_Group* o = new Fl_Group(0, 75, 540, 295, _("Synop"));
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                o->hide();
                { Fl_Check_Button* o = btnSynopAdifDecoding = new Fl_Check_Button(124, 120, 126, 22, _("SYNOP to ADIF"));
                btnSynopAdifDecoding->tooltip(_("Decodes SYNOP messages (Ex: Deutsche Wetterdienst) to ADIF log file"));
                btnSynopAdifDecoding->down_box(FL_DOWN_BOX);
                btnSynopAdifDecoding->callback((Fl_Callback*)cb_btnSynopAdifDecoding);
                btnSynopAdifDecoding->align(Fl_Align(132|FL_ALIGN_INSIDE));
                o->value(progdefaults.SynopAdifDecoding);
                } // Fl_Check_Button* btnSynopAdifDecoding
                { Fl_Check_Button* o = btnSynopKmlDecoding = new Fl_Check_Button(124, 158, 119, 22, _("SYNOP to KML"));
                btnSynopKmlDecoding->tooltip(_("Decodes SYNOP messages (Ex: Deutsche Wetterdienst) to KML documents (Ex: Goog\
le Earth)"));
                btnSynopKmlDecoding->down_box(FL_DOWN_BOX);
                btnSynopKmlDecoding->callback((Fl_Callback*)cb_btnSynopKmlDecoding);
                btnSynopKmlDecoding->align(Fl_Align(132|FL_ALIGN_INSIDE));
                o->value(progdefaults.SynopKmlDecoding);
                } // Fl_Check_Button* btnSynopKmlDecoding
                { Fl_Check_Button* o = btnSynopInterleaved = new Fl_Check_Button(124, 197, 210, 22, _("Interleave SYNOP and text"));
                btnSynopInterleaved->tooltip(_("Interleave text with decoded SYNOP messages, or replacement."));
                btnSynopInterleaved->down_box(FL_DOWN_BOX);
                btnSynopInterleaved->callback((Fl_Callback*)cb_btnSynopInterleaved);
                btnSynopInterleaved->align(Fl_Align(132|FL_ALIGN_INSIDE));
                o->value(progdefaults.SynopInterleaved);
                } // Fl_Check_Button* btnSynopInterleaved
                o->end();
              } // Fl_Group* o
              tabsRTTY->end();
            } // Fl_Tabs* tabsRTTY
            tabRTTY->end();
          } // Fl_Group* tabRTTY
          { tabTHOR = new Fl_Group(0, 50, 540, 320, _("Thor"));
            tabTHOR->hide();
            { Fl_Group* o = new Fl_Group(26, 78, 490, 270);
              o->box(FL_ENGRAVED_FRAME);
              { txtTHORSecondary = new Fl_Input2(55, 105, 430, 40, _("Secondary Text"));
                txtTHORSecondary->tooltip(_("Text to send during keyboard idle times"));
                txtTHORSecondary->type(4);
                txtTHORSecondary->box(FL_DOWN_BOX);
                txtTHORSecondary->color(FL_BACKGROUND2_COLOR);
                txtTHORSecondary->selection_color(FL_SELECTION_COLOR);
                txtTHORSecondary->labeltype(FL_NORMAL_LABEL);
                txtTHORSecondary->labelfont(0);
                txtTHORSecondary->labelsize(14);
                txtTHORSecondary->labelcolor(FL_FOREGROUND_COLOR);
                txtTHORSecondary->callback((Fl_Callback*)cb_txtTHORSecondary);
                txtTHORSecondary->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                txtTHORSecondary->when(FL_WHEN_CHANGED);
                txtTHORSecondary->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* txtTHORSecondary
              { Fl_Check_Button* o = valTHOR_FILTER = new Fl_Check_Button(55, 159, 80, 20, _("Filtering"));
                valTHOR_FILTER->tooltip(_("Enable DSP prior to decoder"));
                valTHOR_FILTER->down_box(FL_DOWN_BOX);
                valTHOR_FILTER->value(1);
                valTHOR_FILTER->callback((Fl_Callback*)cb_valTHOR_FILTER);
                o->value(progdefaults.THOR_FILTER);
              } // Fl_Check_Button* valTHOR_FILTER
              { Fl_Counter2* o = valTHOR_BW = new Fl_Counter2(200, 159, 63, 20, _("Filter bandwidth factor"));
                valTHOR_BW->tooltip(_("Filter bandwidth relative to signal width"));
                valTHOR_BW->type(1);
                valTHOR_BW->box(FL_UP_BOX);
                valTHOR_BW->color(FL_BACKGROUND_COLOR);
                valTHOR_BW->selection_color(FL_INACTIVE_COLOR);
                valTHOR_BW->labeltype(FL_NORMAL_LABEL);
                valTHOR_BW->labelfont(0);
                valTHOR_BW->labelsize(14);
                valTHOR_BW->labelcolor(FL_FOREGROUND_COLOR);
                valTHOR_BW->minimum(1);
                valTHOR_BW->maximum(2);
                valTHOR_BW->value(1.5);
                valTHOR_BW->callback((Fl_Callback*)cb_valTHOR_BW);
                valTHOR_BW->align(Fl_Align(FL_ALIGN_RIGHT));
                valTHOR_BW->when(FL_WHEN_CHANGED);
                o->value(progdefaults.THOR_BW);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* valTHOR_BW
              { Fl_Value_Slider2* o = valThorCWI = new Fl_Value_Slider2(55, 212, 260, 20, _("CWI threshold"));
                valThorCWI->tooltip(_("CWI detection and suppression"));
                valThorCWI->type(1);
                valThorCWI->box(FL_DOWN_BOX);
                valThorCWI->color(FL_BACKGROUND_COLOR);
                valThorCWI->selection_color(FL_BACKGROUND_COLOR);
                valThorCWI->labeltype(FL_NORMAL_LABEL);
                valThorCWI->labelfont(0);
                valThorCWI->labelsize(14);
                valThorCWI->labelcolor(FL_FOREGROUND_COLOR);
                valThorCWI->textsize(14);
                valThorCWI->callback((Fl_Callback*)cb_valThorCWI);
                valThorCWI->align(Fl_Align(FL_ALIGN_TOP));
                valThorCWI->when(FL_WHEN_CHANGED);
                o->value(progdefaults.ThorCWI);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
              } // Fl_Value_Slider2* valThorCWI
              { Fl_Check_Button* o = valTHOR_PREAMBLE = new Fl_Check_Button(55, 254, 200, 20, _("Preamble Detection"));
                valTHOR_PREAMBLE->tooltip(_("Detect the THOR preamble\nClear the Rx pipeline"));
                valTHOR_PREAMBLE->down_box(FL_DOWN_BOX);
                valTHOR_PREAMBLE->callback((Fl_Callback*)cb_valTHOR_PREAMBLE);
                o->value(progdefaults.THOR_PREAMBLE);
              } // Fl_Check_Button* valTHOR_PREAMBLE
              { Fl_Check_Button* o = valTHOR_SOFTSYMBOLS = new Fl_Check_Button(55, 284, 190, 20, _("Soft-symbol decoding"));
                valTHOR_SOFTSYMBOLS->tooltip(_("Use soft-decision decoding for symbol detection\nAssists soft-bit decoding"));
                valTHOR_SOFTSYMBOLS->down_box(FL_DOWN_BOX);
                valTHOR_SOFTSYMBOLS->callback((Fl_Callback*)cb_valTHOR_SOFTSYMBOLS);
                o->value(progdefaults.THOR_SOFTSYMBOLS);
              } // Fl_Check_Button* valTHOR_SOFTSYMBOLS
              { Fl_Check_Button* o = valTHOR_SOFTBITS = new Fl_Check_Button(55, 314, 170, 20, _("Soft-bit decoding"));
                valTHOR_SOFTBITS->tooltip(_("Use soft-bit viterbi decoding for better Forward Error Correction\nWorks best\
 with soft-symbol decoding enabled"));
                valTHOR_SOFTBITS->down_box(FL_DOWN_BOX);
                valTHOR_SOFTBITS->callback((Fl_Callback*)cb_valTHOR_SOFTBITS);
                o->value(progdefaults.THOR_SOFTBITS);
              } // Fl_Check_Button* valTHOR_SOFTBITS
              { Fl_Counter2* o = valTHOR_PATHS = new Fl_Counter2(402, 303, 75, 21, _("Paths (hidden)"));
                valTHOR_PATHS->type(1);
                valTHOR_PATHS->box(FL_UP_BOX);
                valTHOR_PATHS->color(FL_BACKGROUND_COLOR);
                valTHOR_PATHS->selection_color(FL_INACTIVE_COLOR);
                valTHOR_PATHS->labeltype(FL_NORMAL_LABEL);
                valTHOR_PATHS->labelfont(0);
                valTHOR_PATHS->labelsize(14);
                valTHOR_PATHS->labelcolor(FL_FOREGROUND_COLOR);
                valTHOR_PATHS->minimum(4);
                valTHOR_PATHS->maximum(8);
                valTHOR_PATHS->step(1);
                valTHOR_PATHS->value(5);
                valTHOR_PATHS->callback((Fl_Callback*)cb_valTHOR_PATHS);
                valTHOR_PATHS->align(Fl_Align(FL_ALIGN_TOP));
                valTHOR_PATHS->when(FL_WHEN_CHANGED);
                o->value(progdefaults.THOR_PATHS);
                o->labelsize(FL_NORMAL_SIZE);
                o->hide();
              } // Fl_Counter2* valTHOR_PATHS
              o->end();
            } // Fl_Group* o
            tabTHOR->end();
          } // Fl_Group* tabTHOR
          { tabNavtex = new Fl_Group(0, 50, 540, 320, _("Navtex"));
            tabNavtex->hide();
            { Fl_Check_Button* o = btnNvtxAdifLog = new Fl_Check_Button(83, 150, 235, 30, _("Log Navtex messages to Adif file"));
              btnNvtxAdifLog->down_box(FL_DOWN_BOX);
              btnNvtxAdifLog->callback((Fl_Callback*)cb_btnNvtxAdifLog);
              o->value(progdefaults.NVTX_AdifLog);
            } // Fl_Check_Button* btnNvtxAdifLog
            { Fl_Check_Button* o = btnNvtxKmlLog = new Fl_Check_Button(82, 196, 270, 30, _("Log Navtex messages to KML"));
              btnNvtxKmlLog->tooltip(_("Logs messages to Keyhole Markup Language (Google Earth, Marble, Gaia, etc...)"));
              btnNvtxKmlLog->down_box(FL_DOWN_BOX);
              btnNvtxKmlLog->callback((Fl_Callback*)cb_btnNvtxKmlLog);
              o->value(progdefaults.NVTX_KmlLog);
            } // Fl_Check_Button* btnNvtxKmlLog
            tabNavtex->end();
          } // Fl_Group* tabNavtex
          { tabWefax = new Fl_Group(0, 50, 540, 320, _("Wefax"));
            tabWefax->hide();
            { Fl_Group* o = new Fl_Group(2, 63, 534, 300);
              { Fl_Check_Button* o = btnWefaxAdifLog = new Fl_Check_Button(94, 137, 235, 30, _("Log Wefax messages to Adif file"));
                btnWefaxAdifLog->tooltip(_("Sent and received faxes are logged to Adif file."));
                btnWefaxAdifLog->down_box(FL_DOWN_BOX);
                btnWefaxAdifLog->callback((Fl_Callback*)cb_btnWefaxAdifLog);
                o->value(progdefaults.WEFAX_AdifLog);
              } // Fl_Check_Button* btnWefaxAdifLog
              { Fl_Check_Button* o = btnWefaxEmbeddedGui = new Fl_Check_Button(94, 74, 235, 30, _("Embedded Wefax Gui"));
                btnWefaxEmbeddedGui->tooltip(_("Display tx and rx in main fldigi window.\nChange requires restart of fldigi"));
                btnWefaxEmbeddedGui->down_box(FL_DOWN_BOX);
                btnWefaxEmbeddedGui->callback((Fl_Callback*)cb_btnWefaxEmbeddedGui);
                o->value(progdefaults.WEFAX_EmbeddedGui);
              } // Fl_Check_Button* btnWefaxEmbeddedGui
              { Fl_Value_Input2* o = btnWefaxShift = new Fl_Value_Input2(94, 177, 80, 20, _("Frequency shift (800 Hz)"));
                btnWefaxShift->tooltip(_("Default 800 Hz. Deutsche Wetterdienst 850Hz"));
                btnWefaxShift->type(2);
                btnWefaxShift->box(FL_DOWN_BOX);
                btnWefaxShift->color(FL_BACKGROUND2_COLOR);
                btnWefaxShift->selection_color(FL_SELECTION_COLOR);
                btnWefaxShift->labeltype(FL_NORMAL_LABEL);
                btnWefaxShift->labelfont(0);
                btnWefaxShift->labelsize(14);
                btnWefaxShift->labelcolor(FL_FOREGROUND_COLOR);
                btnWefaxShift->callback((Fl_Callback*)cb_btnWefaxShift);
                btnWefaxShift->align(Fl_Align(FL_ALIGN_RIGHT));
                btnWefaxShift->when(FL_WHEN_RELEASE);
                o->value(progdefaults.WEFAX_Shift);
              } // Fl_Value_Input2* btnWefaxShift
              { Fl_Value_Input2* o = btnWefaxMaxRows = new Fl_Value_Input2(94, 217, 85, 20, _("Received fax maximum rows number (5000)"));
                btnWefaxMaxRows->tooltip(_("Maximum row number for a received fax image."));
                btnWefaxMaxRows->type(2);
                btnWefaxMaxRows->box(FL_DOWN_BOX);
                btnWefaxMaxRows->color(FL_BACKGROUND2_COLOR);
                btnWefaxMaxRows->selection_color(FL_SELECTION_COLOR);
                btnWefaxMaxRows->labeltype(FL_NORMAL_LABEL);
                btnWefaxMaxRows->labelfont(0);
                btnWefaxMaxRows->labelsize(14);
                btnWefaxMaxRows->labelcolor(FL_FOREGROUND_COLOR);
                btnWefaxMaxRows->callback((Fl_Callback*)cb_btnWefaxMaxRows);
                btnWefaxMaxRows->align(Fl_Align(FL_ALIGN_RIGHT));
                btnWefaxMaxRows->when(FL_WHEN_RELEASE);
                o->value(progdefaults.WEFAX_MaxRows);
              } // Fl_Value_Input2* btnWefaxMaxRows
              { Fl_Input* o = btnWefaxSaveDir = new Fl_Input(94, 267, 310, 20, _("Fax images destination directory"));
                btnWefaxSaveDir->callback((Fl_Callback*)cb_btnWefaxSaveDir);
                btnWefaxSaveDir->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                o->value(progdefaults.wefax_save_dir.c_str());
              } // Fl_Input* btnWefaxSaveDir
              { btnSelectFaxDestDir = new Fl_Button(424, 267, 80, 20, _("Directory..."));
                btnSelectFaxDestDir->callback((Fl_Callback*)cb_btnSelectFaxDestDir);
              } // Fl_Button* btnSelectFaxDestDir
              { Fl_Check_Button* o = btnWefaxHideTx = new Fl_Check_Button(94, 107, 235, 30, _("Hide Transmission window"));
                btnWefaxHideTx->tooltip(_("Hide transmission window by default."));
                btnWefaxHideTx->down_box(FL_DOWN_BOX);
                btnWefaxHideTx->callback((Fl_Callback*)cb_btnWefaxHideTx);
                o->value(progdefaults.WEFAX_HideTx);
              } // Fl_Check_Button* btnWefaxHideTx
              { Fl_Check_Button* o = btnWefaxSaveMonochrome = new Fl_Check_Button(94, 297, 235, 30, _("Save image as monochrome file"));
                btnWefaxSaveMonochrome->tooltip(_("Save the fax image as a gray-level PNG file."));
                btnWefaxSaveMonochrome->down_box(FL_DOWN_BOX);
                btnWefaxSaveMonochrome->callback((Fl_Callback*)cb_btnWefaxSaveMonochrome);
                o->value(progdefaults.WEFAX_SaveMonochrome);
              } // Fl_Check_Button* btnWefaxSaveMonochrome
              o->end();
            } // Fl_Group* o
            tabWefax->end();
          } // Fl_Group* tabWefax
          tabsModems->end();
        } // Fl_Tabs* tabsModems
        tabModems->end();
      } // Fl_Group* tabModems
      { tabRig = new Fl_Group(0, 23, 540, 345, _("Rig"));
        tabRig->tooltip(_("Transceiver control"));
        tabRig->hide();
        { tabsRig = new Fl_Tabs(0, 23, 540, 345);
          tabsRig->selection_color(FL_LIGHT1);
          { Fl_Group* o = new Fl_Group(0, 48, 540, 320, _("Hardware PTT"));
            o->hide();
            { Fl_Group* o = new Fl_Group(26, 57, 490, 38);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Check_Button* o = btnPTTrightchannel = new Fl_Check_Button(45, 66, 250, 20, _("PTT tone on right audio channel "));
                btnPTTrightchannel->tooltip(_("Can be used in lieu of or in addition to other PTT types"));
                btnPTTrightchannel->down_box(FL_DOWN_BOX);
                btnPTTrightchannel->callback((Fl_Callback*)cb_btnPTTrightchannel);
                o->value(progdefaults.PTTrightchannel);
              } // Fl_Check_Button* btnPTTrightchannel
              o->end();
            } // Fl_Group* o
            { grpHWPTT = new Fl_Group(26, 97, 490, 171, _("h/w ptt device-pin"));
              grpHWPTT->box(FL_ENGRAVED_FRAME);
              grpHWPTT->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { inpTTYdev = new Fl_Input_Choice(99, 151, 160, 22, _("Device:"));
                inpTTYdev->tooltip(_("Select serial port"));
                inpTTYdev->callback((Fl_Callback*)cb_inpTTYdev);
              } // Fl_Input_Choice* inpTTYdev
              { btnRTSptt = new Fl_Round_Button(281, 120, 85, 20, _("Use RTS"));
                btnRTSptt->tooltip(_("RTS is PTT signal line"));
                btnRTSptt->down_box(FL_DOWN_BOX);
                btnRTSptt->callback((Fl_Callback*)cb_btnRTSptt);
              } // Fl_Round_Button* btnRTSptt
              { btnRTSplusV = new Fl_Round_Button(378, 120, 100, 20, _("RTS = +V"));
                btnRTSplusV->tooltip(_("Initial voltage on RTS"));
                btnRTSplusV->down_box(FL_DOWN_BOX);
                btnRTSplusV->callback((Fl_Callback*)cb_btnRTSplusV);
              } // Fl_Round_Button* btnRTSplusV
              { btnDTRptt = new Fl_Round_Button(281, 150, 85, 20, _("Use DTR"));
                btnDTRptt->tooltip(_("DTR is PTT signal line"));
                btnDTRptt->down_box(FL_DOWN_BOX);
                btnDTRptt->callback((Fl_Callback*)cb_btnDTRptt);
              } // Fl_Round_Button* btnDTRptt
              { btnDTRplusV = new Fl_Round_Button(378, 150, 100, 20, _("DTR = +V"));
                btnDTRplusV->tooltip(_("Initial voltage on DTR"));
                btnDTRplusV->down_box(FL_DOWN_BOX);
                btnDTRplusV->callback((Fl_Callback*)cb_btnDTRplusV);
              } // Fl_Round_Button* btnDTRplusV
              { btnInitHWPTT = new Fl_Button(382, 217, 113, 24, _("Initialize"));
                btnInitHWPTT->tooltip(_("Initialize the H/W PTT interface"));
                btnInitHWPTT->callback((Fl_Callback*)cb_btnInitHWPTT);
              } // Fl_Button* btnInitHWPTT
              { btnTTYptt = new Fl_Round_Button(45, 121, 220, 20, _("Use separate serial port PTT"));
                btnTTYptt->down_box(FL_DOWN_BOX);
                btnTTYptt->selection_color((Fl_Color)1);
                btnTTYptt->callback((Fl_Callback*)cb_btnTTYptt);
              } // Fl_Round_Button* btnTTYptt
              { btnUsePPortPTT = new Fl_Round_Button(45, 197, 170, 20, _("Use parallel port PTT"));
                btnUsePPortPTT->down_box(FL_DOWN_BOX);
                btnUsePPortPTT->selection_color((Fl_Color)1);
                btnUsePPortPTT->callback((Fl_Callback*)cb_btnUsePPortPTT);
              } // Fl_Round_Button* btnUsePPortPTT
              { btnUseUHrouterPTT = new Fl_Round_Button(45, 227, 170, 20, _("Use uHRouter PTT"));
                btnUseUHrouterPTT->down_box(FL_DOWN_BOX);
                btnUseUHrouterPTT->selection_color((Fl_Color)1);
                btnUseUHrouterPTT->callback((Fl_Callback*)cb_btnUseUHrouterPTT);
              } // Fl_Round_Button* btnUseUHrouterPTT
              grpHWPTT->end();
            } // Fl_Group* grpHWPTT
            { grpPTTdelays = new Fl_Group(26, 270, 490, 91, _("PTT delays valid for all CAT/PTT types"));
              grpPTTdelays->box(FL_ENGRAVED_FRAME);
              grpPTTdelays->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Counter* o = cntPTT_on_delay = new Fl_Counter(45, 297, 100, 21, _("Start of transmit PTT delay"));
                cntPTT_on_delay->tooltip(_("Delay NN msec before starting audio"));
                cntPTT_on_delay->minimum(0);
                cntPTT_on_delay->maximum(500);
                cntPTT_on_delay->step(1);
                cntPTT_on_delay->callback((Fl_Callback*)cb_cntPTT_on_delay);
                cntPTT_on_delay->align(Fl_Align(FL_ALIGN_RIGHT));
                o->value(progdefaults.PTT_on_delay);
                o->lstep(10);
              } // Fl_Counter* cntPTT_on_delay
              { Fl_Counter* o = cntPTT_off_delay = new Fl_Counter(45, 327, 100, 21, _("PTT end of transmit delay"));
                cntPTT_off_delay->tooltip(_("Delay NN msec before releasing PTT"));
                cntPTT_off_delay->minimum(0);
                cntPTT_off_delay->maximum(500);
                cntPTT_off_delay->step(1);
                cntPTT_off_delay->callback((Fl_Callback*)cb_cntPTT_off_delay);
                cntPTT_off_delay->align(Fl_Align(FL_ALIGN_RIGHT));
                o->value(progdefaults.PTT_off_delay);
                o->lstep(10);
              } // Fl_Counter* cntPTT_off_delay
              grpPTTdelays->end();
            } // Fl_Group* grpPTTdelays
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(0, 48, 540, 320, _("RigCAT"));
            o->tooltip(_("Rig Control using xml spec file"));
            { chkUSERIGCAT = new Fl_Check_Button(215, 60, 110, 20, _("Use RigCAT"));
              chkUSERIGCAT->tooltip(_("RigCAT used for rig control"));
              chkUSERIGCAT->down_box(FL_DOWN_BOX);
              chkUSERIGCAT->callback((Fl_Callback*)cb_chkUSERIGCAT);
            } // Fl_Check_Button* chkUSERIGCAT
            { grpRigCAT = new Fl_Group(25, 83, 490, 279);
              grpRigCAT->box(FL_ENGRAVED_FRAME);
              { Fl_Output* o = txtXmlRigFilename = new Fl_Output(35, 107, 130, 22, _("Rig description file:"));
                txtXmlRigFilename->tooltip(_("Use Open to select descriptor file"));
                txtXmlRigFilename->color(FL_LIGHT2);
                txtXmlRigFilename->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                o->value(fl_filename_name(progdefaults.XmlRigFilename.c_str()));
              } // Fl_Output* txtXmlRigFilename
              { btnSelectRigXmlFile = new Fl_Button(168, 107, 60, 22, _("Open..."));
                btnSelectRigXmlFile->tooltip(_("Select rig descriptor file"));
                btnSelectRigXmlFile->callback((Fl_Callback*)cb_btnSelectRigXmlFile);
              } // Fl_Button* btnSelectRigXmlFile
              { Fl_Input_Choice* o = inpXmlRigDevice = new Fl_Input_Choice(361, 107, 144, 22, _("Device:"));
                inpXmlRigDevice->tooltip(_("Serial device"));
                inpXmlRigDevice->callback((Fl_Callback*)cb_inpXmlRigDevice);
                o->value(progdefaults.XmlRigDevice.c_str());
              } // Fl_Input_Choice* inpXmlRigDevice
              { Fl_Value_Input2* o = cntRigCatRetries = new Fl_Value_Input2(50, 150, 60, 22, _("Retries"));
                cntRigCatRetries->tooltip(_("# retries before giving up"));
                cntRigCatRetries->box(FL_DOWN_BOX);
                cntRigCatRetries->color(FL_BACKGROUND2_COLOR);
                cntRigCatRetries->selection_color(FL_SELECTION_COLOR);
                cntRigCatRetries->labeltype(FL_NORMAL_LABEL);
                cntRigCatRetries->labelfont(0);
                cntRigCatRetries->labelsize(14);
                cntRigCatRetries->labelcolor(FL_FOREGROUND_COLOR);
                cntRigCatRetries->maximum(1000);
                cntRigCatRetries->step(1);
                cntRigCatRetries->callback((Fl_Callback*)cb_cntRigCatRetries);
                cntRigCatRetries->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                cntRigCatRetries->when(FL_WHEN_CHANGED);
                o->value(progdefaults.RigCatRetries);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Value_Input2* cntRigCatRetries
              { Fl_Value_Input2* o = cntRigCatTimeout = new Fl_Value_Input2(168, 150, 60, 22, _("Retry interval (ms)"));
                cntRigCatTimeout->tooltip(_("Time between retires in msec"));
                cntRigCatTimeout->box(FL_DOWN_BOX);
                cntRigCatTimeout->color(FL_BACKGROUND2_COLOR);
                cntRigCatTimeout->selection_color(FL_SELECTION_COLOR);
                cntRigCatTimeout->labeltype(FL_NORMAL_LABEL);
                cntRigCatTimeout->labelfont(0);
                cntRigCatTimeout->labelsize(14);
                cntRigCatTimeout->labelcolor(FL_FOREGROUND_COLOR);
                cntRigCatTimeout->maximum(10000);
                cntRigCatTimeout->step(1);
                cntRigCatTimeout->callback((Fl_Callback*)cb_cntRigCatTimeout);
                cntRigCatTimeout->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                cntRigCatTimeout->when(FL_WHEN_CHANGED);
                o->value(progdefaults.RigCatTimeout);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Value_Input2* cntRigCatTimeout
              { Fl_Value_Input2* o = cntRigCatWait = new Fl_Value_Input2(50, 190, 60, 22, _("Write delay (ms)"));
                cntRigCatWait->box(FL_DOWN_BOX);
                cntRigCatWait->color(FL_BACKGROUND2_COLOR);
                cntRigCatWait->selection_color(FL_SELECTION_COLOR);
                cntRigCatWait->labeltype(FL_NORMAL_LABEL);
                cntRigCatWait->labelfont(0);
                cntRigCatWait->labelsize(14);
                cntRigCatWait->labelcolor(FL_FOREGROUND_COLOR);
                cntRigCatWait->maximum(10000);
                cntRigCatWait->step(1);
                cntRigCatWait->callback((Fl_Callback*)cb_cntRigCatWait);
                cntRigCatWait->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                cntRigCatWait->when(FL_WHEN_CHANGED);
                o->value(progdefaults.RigCatWait);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Value_Input2* cntRigCatWait
              { Fl_Choice* o = mnuXmlRigBaudrate = new Fl_Choice(406, 150, 99, 22, _("Baud rate:"));
                mnuXmlRigBaudrate->tooltip(_("Pick baud rate from list"));
                mnuXmlRigBaudrate->down_box(FL_BORDER_BOX);
                mnuXmlRigBaudrate->callback((Fl_Callback*)cb_mnuXmlRigBaudrate);
                o->add(szBaudRates);
                o->value(progdefaults.XmlRigBaudrate);
              } // Fl_Choice* mnuXmlRigBaudrate
              { Fl_Counter2* o = valRigCatStopbits = new Fl_Counter2(408, 184, 95, 21, _("Stopbits"));
                valRigCatStopbits->type(1);
                valRigCatStopbits->box(FL_UP_BOX);
                valRigCatStopbits->color(FL_BACKGROUND_COLOR);
                valRigCatStopbits->selection_color(FL_INACTIVE_COLOR);
                valRigCatStopbits->labeltype(FL_NORMAL_LABEL);
                valRigCatStopbits->labelfont(0);
                valRigCatStopbits->labelsize(14);
                valRigCatStopbits->labelcolor(FL_FOREGROUND_COLOR);
                valRigCatStopbits->minimum(1);
                valRigCatStopbits->maximum(2);
                valRigCatStopbits->step(1);
                valRigCatStopbits->value(1);
                valRigCatStopbits->callback((Fl_Callback*)cb_valRigCatStopbits);
                valRigCatStopbits->align(Fl_Align(FL_ALIGN_LEFT));
                valRigCatStopbits->when(FL_WHEN_CHANGED);
                o->value(progdefaults.RigCatStopbits);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* valRigCatStopbits
              { btnInitRIGCAT = new Fl_Button(385, 321, 113, 24, _("Initialize"));
                btnInitRIGCAT->tooltip(_("Initialize RigCAT interface"));
                btnInitRIGCAT->callback((Fl_Callback*)cb_btnInitRIGCAT);
              } // Fl_Button* btnInitRIGCAT
              { Fl_Check_Button* o = btnRigCatEcho = new Fl_Check_Button(70, 216, 192, 22, _("Commands are echoed"));
                btnRigCatEcho->tooltip(_("Rig or interface echos serial data"));
                btnRigCatEcho->down_box(FL_DOWN_BOX);
                btnRigCatEcho->callback((Fl_Callback*)cb_btnRigCatEcho);
                o->value(progdefaults.RigCatECHO);
              } // Fl_Check_Button* btnRigCatEcho
              { Fl_Round_Button* o = btnRigCatCMDptt = new Fl_Round_Button(276, 217, 207, 20, _("CAT command for PTT"));
                btnRigCatCMDptt->tooltip(_("PTT is a CAT command (not hardware)"));
                btnRigCatCMDptt->down_box(FL_DOWN_BOX);
                btnRigCatCMDptt->selection_color((Fl_Color)1);
                btnRigCatCMDptt->callback((Fl_Callback*)cb_btnRigCatCMDptt);
                o->value(progdefaults.RigCatCMDptt);
              } // Fl_Round_Button* btnRigCatCMDptt
              { Fl_Round_Button* o = btnRigCatRTSptt = new Fl_Round_Button(70, 246, 160, 20, _("Toggle RTS for PTT"));
                btnRigCatRTSptt->tooltip(_("RTS is ptt line"));
                btnRigCatRTSptt->down_box(FL_DOWN_BOX);
                btnRigCatRTSptt->callback((Fl_Callback*)cb_btnRigCatRTSptt);
                o->value(progdefaults.RigCatRTSptt);
              } // Fl_Round_Button* btnRigCatRTSptt
              { Fl_Round_Button* o = btnRigCatDTRptt = new Fl_Round_Button(276, 244, 160, 20, _("Toggle DTR for PTT"));
                btnRigCatDTRptt->tooltip(_("DTR is ptt line"));
                btnRigCatDTRptt->down_box(FL_DOWN_BOX);
                btnRigCatDTRptt->callback((Fl_Callback*)cb_btnRigCatDTRptt);
                o->value(progdefaults.RigCatDTRptt);
              } // Fl_Round_Button* btnRigCatDTRptt
              { Fl_Check_Button* o = btnRigCatRTSplus = new Fl_Check_Button(70, 275, 100, 20, _("RTS +12 v"));
                btnRigCatRTSplus->tooltip(_("Initial state of RTS"));
                btnRigCatRTSplus->down_box(FL_DOWN_BOX);
                btnRigCatRTSplus->callback((Fl_Callback*)cb_btnRigCatRTSplus);
                o->value(progdefaults.RigCatRTSplus);
              } // Fl_Check_Button* btnRigCatRTSplus
              { Fl_Check_Button* o = btnRigCatDTRplus = new Fl_Check_Button(276, 272, 100, 20, _("DTR +12 v"));
                btnRigCatDTRplus->tooltip(_("Initial state of DTR"));
                btnRigCatDTRplus->down_box(FL_DOWN_BOX);
                btnRigCatDTRplus->callback((Fl_Callback*)cb_btnRigCatDTRplus);
                o->value(progdefaults.RigCatDTRplus);
              } // Fl_Check_Button* btnRigCatDTRplus
              { Fl_Check_Button* o = chkRigCatRTSCTSflow = new Fl_Check_Button(70, 303, 170, 20, _("RTS/CTS flow control"));
                chkRigCatRTSCTSflow->tooltip(_("Rig uses RTS/CTS handshake"));
                chkRigCatRTSCTSflow->down_box(FL_DOWN_BOX);
                chkRigCatRTSCTSflow->callback((Fl_Callback*)cb_chkRigCatRTSCTSflow);
                o->value(progdefaults.RigCatRTSCTSflow);
              } // Fl_Check_Button* chkRigCatRTSCTSflow
              { Fl_Check_Button* o = chk_restore_tio = new Fl_Check_Button(70, 332, 205, 20, _("Restore Settings on Close"));
                chk_restore_tio->tooltip(_("Restore the serial (COM) port settings"));
                chk_restore_tio->down_box(FL_DOWN_BOX);
                chk_restore_tio->callback((Fl_Callback*)cb_chk_restore_tio);
                o->value(progdefaults.RigCatRestoreTIO);
              } // Fl_Check_Button* chk_restore_tio
              { btnRevertRIGCAT = new Fl_Button(385, 289, 113, 24, _("Revert"));
                btnRevertRIGCAT->tooltip(_("Reset rigCAT interface"));
                btnRevertRIGCAT->callback((Fl_Callback*)cb_btnRevertRIGCAT);
                btnRevertRIGCAT->hide();
                btnRevertRIGCAT->deactivate();
              } // Fl_Button* btnRevertRIGCAT
              { Fl_Check_Button* o = chkRigCatVSP = new Fl_Check_Button(276, 300, 100, 25, _("VSP Enable"));
                chkRigCatVSP->tooltip(_("Virtual Serial Port Emulator - suppress WARNINGS"));
                chkRigCatVSP->down_box(FL_DOWN_BOX);
                chkRigCatVSP->callback((Fl_Callback*)cb_chkRigCatVSP);
                o->value(progdefaults.RigCatVSP);
              } // Fl_Check_Button* chkRigCatVSP
              grpRigCAT->end();
            } // Fl_Group* grpRigCAT
            o->end();
          } // Fl_Group* o
          { tabHamlib = new Fl_Group(0, 48, 540, 320, _("Hamlib"));
            tabHamlib->hide();
            { chkUSEHAMLIB = new Fl_Check_Button(207, 55, 100, 20, _("Use Hamlib"));
              chkUSEHAMLIB->tooltip(_("Hamlib used for rig control"));
              chkUSEHAMLIB->down_box(FL_DOWN_BOX);
              chkUSEHAMLIB->callback((Fl_Callback*)cb_chkUSEHAMLIB);
            } // Fl_Check_Button* chkUSEHAMLIB
            { grpHamlib = new Fl_Group(17, 78, 490, 277);
              grpHamlib->box(FL_ENGRAVED_FRAME);
              { Fl_ComboBox* o = cboHamlibRig = new Fl_ComboBox(77, 88, 160, 22, _("Rig:"));
                cboHamlibRig->tooltip(_("Select the rig by name"));
                cboHamlibRig->box(FL_DOWN_BOX);
                cboHamlibRig->color(FL_BACKGROUND2_COLOR);
                cboHamlibRig->selection_color(FL_BACKGROUND_COLOR);
                cboHamlibRig->labeltype(FL_NORMAL_LABEL);
                cboHamlibRig->labelfont(0);
                cboHamlibRig->labelsize(14);
                cboHamlibRig->labelcolor(FL_FOREGROUND_COLOR);
                cboHamlibRig->callback((Fl_Callback*)cb_cboHamlibRig);
                cboHamlibRig->align(Fl_Align(FL_ALIGN_LEFT));
                cboHamlibRig->when(FL_WHEN_RELEASE);
                o->readonly();
                cboHamlibRig->labelsize(FL_NORMAL_SIZE);
              } // Fl_ComboBox* cboHamlibRig
              { Fl_Input_Choice* o = inpRIGdev = new Fl_Input_Choice(352, 88, 144, 22, _("Device:"));
                inpRIGdev->tooltip(_("Serial port"));
                inpRIGdev->callback((Fl_Callback*)cb_inpRIGdev);
                o->value(progdefaults.HamRigDevice.c_str());
              } // Fl_Input_Choice* inpRIGdev
              { Fl_Value_Input2* o = cntHamlibRetries = new Fl_Value_Input2(42, 128, 70, 24, _("Retries"));
                cntHamlibRetries->tooltip(_("# times to resend command before giving up"));
                cntHamlibRetries->box(FL_DOWN_BOX);
                cntHamlibRetries->color(FL_BACKGROUND2_COLOR);
                cntHamlibRetries->selection_color(FL_SELECTION_COLOR);
                cntHamlibRetries->labeltype(FL_NORMAL_LABEL);
                cntHamlibRetries->labelfont(0);
                cntHamlibRetries->labelsize(14);
                cntHamlibRetries->labelcolor(FL_FOREGROUND_COLOR);
                cntHamlibRetries->maximum(1000);
                cntHamlibRetries->step(1);
                cntHamlibRetries->callback((Fl_Callback*)cb_cntHamlibRetries);
                cntHamlibRetries->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                cntHamlibRetries->when(FL_WHEN_CHANGED);
                o->value(progdefaults.HamlibRetries);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Value_Input2* cntHamlibRetries
              { Fl_Value_Input2* o = cntHamlibTimeout = new Fl_Value_Input2(167, 128, 70, 24, _("Retry Interval (ms)"));
                cntHamlibTimeout->tooltip(_("Msec\'s between retries"));
                cntHamlibTimeout->box(FL_DOWN_BOX);
                cntHamlibTimeout->color(FL_BACKGROUND2_COLOR);
                cntHamlibTimeout->selection_color(FL_SELECTION_COLOR);
                cntHamlibTimeout->labeltype(FL_NORMAL_LABEL);
                cntHamlibTimeout->labelfont(0);
                cntHamlibTimeout->labelsize(14);
                cntHamlibTimeout->labelcolor(FL_FOREGROUND_COLOR);
                cntHamlibTimeout->maximum(10000);
                cntHamlibTimeout->step(1);
                cntHamlibTimeout->callback((Fl_Callback*)cb_cntHamlibTimeout);
                cntHamlibTimeout->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                cntHamlibTimeout->when(FL_WHEN_CHANGED);
                o->value(progdefaults.HamlibTimeout);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Value_Input2* cntHamlibTimeout
              { Fl_Value_Input2* o = cntHamlibWriteDelay = new Fl_Value_Input2(42, 171, 70, 24, _("Write delay (ms)"));
                cntHamlibWriteDelay->tooltip(_("Msec\'s between sequential commands"));
                cntHamlibWriteDelay->box(FL_DOWN_BOX);
                cntHamlibWriteDelay->color(FL_BACKGROUND2_COLOR);
                cntHamlibWriteDelay->selection_color(FL_SELECTION_COLOR);
                cntHamlibWriteDelay->labeltype(FL_NORMAL_LABEL);
                cntHamlibWriteDelay->labelfont(0);
                cntHamlibWriteDelay->labelsize(14);
                cntHamlibWriteDelay->labelcolor(FL_FOREGROUND_COLOR);
                cntHamlibWriteDelay->maximum(10000);
                cntHamlibWriteDelay->step(1);
                cntHamlibWriteDelay->callback((Fl_Callback*)cb_cntHamlibWriteDelay);
                cntHamlibWriteDelay->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                cntHamlibWriteDelay->when(FL_WHEN_CHANGED);
                o->value(progdefaults.HamlibWriteDelay);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Value_Input2* cntHamlibWriteDelay
              { Fl_Value_Input2* o = cntHamlibWait = new Fl_Value_Input2(168, 171, 70, 24, _("Post write delay (ms)"));
                cntHamlibWait->tooltip(_("Wait interval (msecs) before reading response"));
                cntHamlibWait->box(FL_DOWN_BOX);
                cntHamlibWait->color(FL_BACKGROUND2_COLOR);
                cntHamlibWait->selection_color(FL_SELECTION_COLOR);
                cntHamlibWait->labeltype(FL_NORMAL_LABEL);
                cntHamlibWait->labelfont(0);
                cntHamlibWait->labelsize(14);
                cntHamlibWait->labelcolor(FL_FOREGROUND_COLOR);
                cntHamlibWait->maximum(10000);
                cntHamlibWait->step(1);
                cntHamlibWait->callback((Fl_Callback*)cb_cntHamlibWait);
                cntHamlibWait->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                cntHamlibWait->when(FL_WHEN_CHANGED);
                o->value(progdefaults.HamlibWait);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Value_Input2* cntHamlibWait
              { Fl_Choice* o = mnuBaudRate = new Fl_Choice(397, 122, 99, 22, _("Baud rate:"));
                mnuBaudRate->tooltip(_("Serial port baud rate"));
                mnuBaudRate->down_box(FL_BORDER_BOX);
                mnuBaudRate->callback((Fl_Callback*)cb_mnuBaudRate);
                o->add(szBaudRates);
                o->value(progdefaults.HamRigBaudrate);
              } // Fl_Choice* mnuBaudRate
              { Fl_Counter2* o = valHamRigStopbits = new Fl_Counter2(401, 158, 95, 21, _("Stopbits"));
                valHamRigStopbits->type(1);
                valHamRigStopbits->box(FL_UP_BOX);
                valHamRigStopbits->color(FL_BACKGROUND_COLOR);
                valHamRigStopbits->selection_color(FL_INACTIVE_COLOR);
                valHamRigStopbits->labeltype(FL_NORMAL_LABEL);
                valHamRigStopbits->labelfont(0);
                valHamRigStopbits->labelsize(14);
                valHamRigStopbits->labelcolor(FL_FOREGROUND_COLOR);
                valHamRigStopbits->minimum(1);
                valHamRigStopbits->maximum(2);
                valHamRigStopbits->step(1);
                valHamRigStopbits->value(1);
                valHamRigStopbits->callback((Fl_Callback*)cb_valHamRigStopbits);
                valHamRigStopbits->align(Fl_Align(FL_ALIGN_LEFT));
                valHamRigStopbits->when(FL_WHEN_CHANGED);
                o->value(progdefaults.HamRigStopbits);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* valHamRigStopbits
              { Fl_Counter2* o = cntHamlibTimeout0 = new Fl_Counter2(162, 135, 100, 20, _("Retry interval (ms)"));
                cntHamlibTimeout0->tooltip(_("Msec\'s between retries"));
                cntHamlibTimeout0->type(1);
                cntHamlibTimeout0->box(FL_UP_BOX);
                cntHamlibTimeout0->color(FL_BACKGROUND_COLOR);
                cntHamlibTimeout0->selection_color(FL_INACTIVE_COLOR);
                cntHamlibTimeout0->labeltype(FL_NORMAL_LABEL);
                cntHamlibTimeout0->labelfont(0);
                cntHamlibTimeout0->labelsize(14);
                cntHamlibTimeout0->labelcolor(FL_FOREGROUND_COLOR);
                cntHamlibTimeout0->minimum(2);
                cntHamlibTimeout0->maximum(20000);
                cntHamlibTimeout0->step(1);
                cntHamlibTimeout0->value(10);
                cntHamlibTimeout0->callback((Fl_Callback*)cb_cntHamlibTimeout0);
                cntHamlibTimeout0->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                cntHamlibTimeout0->when(FL_WHEN_CHANGED);
                cntHamlibTimeout0->hide();
                o->value(progdefaults.HamlibTimeout);
              } // Fl_Counter2* cntHamlibTimeout0
              { inpHamlibConfig = new Fl_Input2(32, 321, 320, 22, _("Advanced configuration:"));
                inpHamlibConfig->tooltip(_("Optional configuration\nin format: param=val ..."));
                inpHamlibConfig->box(FL_DOWN_BOX);
                inpHamlibConfig->color(FL_BACKGROUND2_COLOR);
                inpHamlibConfig->selection_color(FL_SELECTION_COLOR);
                inpHamlibConfig->labeltype(FL_NORMAL_LABEL);
                inpHamlibConfig->labelfont(0);
                inpHamlibConfig->labelsize(14);
                inpHamlibConfig->labelcolor(FL_FOREGROUND_COLOR);
                inpHamlibConfig->callback((Fl_Callback*)cb_inpHamlibConfig);
                inpHamlibConfig->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                inpHamlibConfig->when(FL_WHEN_RELEASE);
                inpHamlibConfig->value(progdefaults.HamConfig.c_str());
                inpHamlibConfig->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* inpHamlibConfig
              { btnInitHAMLIB = new Fl_Button(383, 320, 113, 24, _("Initialize"));
                btnInitHAMLIB->tooltip(_("Initialize hamlib interface"));
                btnInitHAMLIB->callback((Fl_Callback*)cb_btnInitHAMLIB);
              } // Fl_Button* btnInitHAMLIB
              { mnuSideband = new Fl_Choice(352, 212, 144, 22, _("Sideband:"));
                mnuSideband->tooltip(_("Force the rig sideband. Takes\neffect when rig mode changes."));
                mnuSideband->down_box(FL_BORDER_BOX);
                mnuSideband->callback((Fl_Callback*)cb_mnuSideband);
                mnuSideband->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              } // Fl_Choice* mnuSideband
              { Fl_Round_Button* o = btnHamlibCMDptt = new Fl_Round_Button(57, 213, 200, 20, _("PTT via Hamlib command"));
                btnHamlibCMDptt->tooltip(_("PTT is a hamlib command"));
                btnHamlibCMDptt->down_box(FL_DOWN_BOX);
                btnHamlibCMDptt->selection_color((Fl_Color)1);
                btnHamlibCMDptt->callback((Fl_Callback*)cb_btnHamlibCMDptt);
                o->value(progdefaults.HamlibCMDptt);
              } // Fl_Round_Button* btnHamlibCMDptt
              { Fl_Check_Button* o = btnHamlibDTRplus = new Fl_Check_Button(57, 238, 90, 20, _("DTR +12"));
                btnHamlibDTRplus->tooltip(_("Initial state of DTR"));
                btnHamlibDTRplus->down_box(FL_DOWN_BOX);
                btnHamlibDTRplus->callback((Fl_Callback*)cb_btnHamlibDTRplus);
                o->value(progdefaults.HamlibDTRplus);
              } // Fl_Check_Button* btnHamlibDTRplus
              { Fl_Check_Button* o = chkHamlibRTSplus = new Fl_Check_Button(281, 238, 85, 20, _("RTS +12"));
                chkHamlibRTSplus->tooltip(_("Initial state of RTS"));
                chkHamlibRTSplus->down_box(FL_DOWN_BOX);
                chkHamlibRTSplus->callback((Fl_Callback*)cb_chkHamlibRTSplus);
                o->value(progdefaults.HamlibRTSplus);
              } // Fl_Check_Button* chkHamlibRTSplus
              { Fl_Check_Button* o = chkHamlibRTSCTSflow = new Fl_Check_Button(57, 266, 170, 20, _("RTS/CTS flow control"));
                chkHamlibRTSCTSflow->tooltip(_("Rig requires RTS/CTS flow control"));
                chkHamlibRTSCTSflow->down_box(FL_DOWN_BOX);
                chkHamlibRTSCTSflow->callback((Fl_Callback*)cb_chkHamlibRTSCTSflow);
                o->value(progdefaults.HamlibRTSCTSflow);
                if (o->value()) chkHamlibRTSplus->deactivate();
              } // Fl_Check_Button* chkHamlibRTSCTSflow
              { Fl_Check_Button* o = chkHamlibXONXOFFflow = new Fl_Check_Button(281, 266, 185, 20, _("XON/XOFF flow control"));
                chkHamlibXONXOFFflow->tooltip(_("Rig requires Xon/Xoff flow control"));
                chkHamlibXONXOFFflow->down_box(FL_DOWN_BOX);
                chkHamlibXONXOFFflow->callback((Fl_Callback*)cb_chkHamlibXONXOFFflow);
                o->value(progdefaults.HamlibXONXOFFflow);
              } // Fl_Check_Button* chkHamlibXONXOFFflow
              { btnRevertHAMLIB = new Fl_Button(383, 289, 113, 24, _("Revert"));
                btnRevertHAMLIB->tooltip(_("Reset hamlib interface"));
                btnRevertHAMLIB->callback((Fl_Callback*)cb_btnRevertHAMLIB);
                btnRevertHAMLIB->hide();
                btnRevertHAMLIB->deactivate();
              } // Fl_Button* btnRevertHAMLIB
              grpHamlib->end();
            } // Fl_Group* grpHamlib
            tabHamlib->end();
          } // Fl_Group* tabHamlib
          { tabXMLRPC = new Fl_Group(0, 48, 540, 320, _("XML-RPC"));
            tabXMLRPC->hide();
            { grpXMLRPC = new Fl_Group(23, 61, 490, 160);
              grpXMLRPC->box(FL_ENGRAVED_FRAME);
              { Fl_Output* o = new Fl_Output(178, 80, 190, 58);
                o->type(12);
                o->box(FL_BORDER_BOX);
                o->color(FL_LIGHT1);
                o->value(_("Rig control via external\nprogram using xmlrpc\nremote calls."));
              } // Fl_Output* o
              { chkUSEXMLRPC = new Fl_Check_Button(178, 148, 183, 20, _("Use XML-RPC program"));
                chkUSEXMLRPC->tooltip(_("Experimental"));
                chkUSEXMLRPC->down_box(FL_DOWN_BOX);
                chkUSEXMLRPC->callback((Fl_Callback*)cb_chkUSEXMLRPC);
              } // Fl_Check_Button* chkUSEXMLRPC
              { btnInitXMLRPC = new Fl_Button(219, 184, 113, 24, _("Initialize"));
                btnInitXMLRPC->tooltip(_("Initialize XML-RPC rig control"));
                btnInitXMLRPC->callback((Fl_Callback*)cb_btnInitXMLRPC);
              } // Fl_Button* btnInitXMLRPC
              grpXMLRPC->end();
            } // Fl_Group* grpXMLRPC
            tabXMLRPC->end();
          } // Fl_Group* tabXMLRPC
          tabsRig->end();
        } // Fl_Tabs* tabsRig
        tabRig->end();
      } // Fl_Group* tabRig
      { tabSoundCard = new Fl_Group(0, 25, 540, 345, _("Audio"));
        tabSoundCard->tooltip(_("Audio devices"));
        tabSoundCard->hide();
        { tabsSoundCard = new Fl_Tabs(0, 25, 540, 345);
          tabsSoundCard->selection_color(FL_LIGHT1);
          { tabAudio = new Fl_Group(0, 50, 540, 320, _("Devices"));
            { AudioOSS = new Fl_Group(20, 65, 490, 45);
              AudioOSS->box(FL_ENGRAVED_FRAME);
              { btnAudioIO[0] = new Fl_Round_Button(30, 75, 53, 25, _("OSS"));
                btnAudioIO[0]->tooltip(_("Use OSS audio server"));
                btnAudioIO[0]->down_box(FL_DOWN_BOX);
                btnAudioIO[0]->selection_color((Fl_Color)1);
                btnAudioIO[0]->callback((Fl_Callback*)cb_btnAudioIO);
              } // Fl_Round_Button* btnAudioIO[0]
              { Fl_Input_Choice* o = menuOSSDev = new Fl_Input_Choice(390, 75, 110, 25, _("Device:"));
                menuOSSDev->tooltip(_("Select device"));
                menuOSSDev->callback((Fl_Callback*)cb_menuOSSDev);
                o->value(progdefaults.OSSdevice.c_str());
              } // Fl_Input_Choice* menuOSSDev
              AudioOSS->end();
            } // Fl_Group* AudioOSS
            { AudioPort = new Fl_Group(20, 110, 490, 80);
              AudioPort->box(FL_ENGRAVED_FRAME);
              { btnAudioIO[1] = new Fl_Round_Button(30, 138, 95, 25, _("PortAudio"));
                btnAudioIO[1]->tooltip(_("Use Port Audio server"));
                btnAudioIO[1]->down_box(FL_DOWN_BOX);
                btnAudioIO[1]->selection_color((Fl_Color)1);
                btnAudioIO[1]->callback((Fl_Callback*)cb_btnAudioIO1);
              } // Fl_Round_Button* btnAudioIO[1]
              { menuPortInDev = new Fl_Choice(230, 120, 270, 25, _("Capture:"));
                menuPortInDev->tooltip(_("Audio input device"));
                menuPortInDev->down_box(FL_BORDER_BOX);
                menuPortInDev->callback((Fl_Callback*)cb_menuPortInDev);
              } // Fl_Choice* menuPortInDev
              { menuPortOutDev = new Fl_Choice(230, 155, 270, 25, _("Playback:"));
                menuPortOutDev->tooltip(_("Audio output device"));
                menuPortOutDev->down_box(FL_BORDER_BOX);
                menuPortOutDev->callback((Fl_Callback*)cb_menuPortOutDev);
              } // Fl_Choice* menuPortOutDev
              AudioPort->end();
            } // Fl_Group* AudioPort
            { AudioPulse = new Fl_Group(20, 190, 490, 45);
              AudioPulse->box(FL_ENGRAVED_FRAME);
              { btnAudioIO[2] = new Fl_Round_Button(30, 201, 100, 25, _("PulseAudio"));
                btnAudioIO[2]->tooltip(_("Use Pulse Audio server"));
                btnAudioIO[2]->down_box(FL_DOWN_BOX);
                btnAudioIO[2]->selection_color((Fl_Color)1);
                btnAudioIO[2]->callback((Fl_Callback*)cb_btnAudioIO2);
              } // Fl_Round_Button* btnAudioIO[2]
              { Fl_Input2* o = inpPulseServer = new Fl_Input2(275, 201, 225, 25, _("Server string:"));
                inpPulseServer->tooltip(_("Leave this blank or refer to\nhttp://www.pulseaudio.org/wiki/ServerStrings"));
                inpPulseServer->box(FL_DOWN_BOX);
                inpPulseServer->color(FL_BACKGROUND2_COLOR);
                inpPulseServer->selection_color(FL_SELECTION_COLOR);
                inpPulseServer->labeltype(FL_NORMAL_LABEL);
                inpPulseServer->labelfont(0);
                inpPulseServer->labelsize(14);
                inpPulseServer->labelcolor(FL_FOREGROUND_COLOR);
                inpPulseServer->callback((Fl_Callback*)cb_inpPulseServer);
                inpPulseServer->align(Fl_Align(FL_ALIGN_LEFT));
                inpPulseServer->when(FL_WHEN_RELEASE);
                o->value(progdefaults.PulseServer.c_str());
                inpPulseServer->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* inpPulseServer
              AudioPulse->end();
            } // Fl_Group* AudioPulse
            { AudioNull = new Fl_Group(20, 235, 490, 45);
              AudioNull->box(FL_ENGRAVED_FRAME);
              { btnAudioIO[3] = new Fl_Round_Button(31, 245, 100, 25, _("File I/O only"));
                btnAudioIO[3]->tooltip(_("NO AUDIO DEVICE AVAILABLE (or testing)"));
                btnAudioIO[3]->down_box(FL_DOWN_BOX);
                btnAudioIO[3]->selection_color((Fl_Color)1);
                btnAudioIO[3]->callback((Fl_Callback*)cb_btnAudioIO3);
              } // Fl_Round_Button* btnAudioIO[3]
              AudioNull->end();
            } // Fl_Group* AudioNull
            tabAudio->end();
          } // Fl_Group* tabAudio
          { tabAudioOpt = new Fl_Group(0, 50, 540, 320, _("Settings"));
            tabAudioOpt->hide();
            { grpAudioSampleRate = new Fl_Group(23, 65, 490, 90, _("Sample rate"));
              grpAudioSampleRate->box(FL_ENGRAVED_FRAME);
              grpAudioSampleRate->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Choice* o = menuInSampleRate = new Fl_Choice(33, 94, 100, 20, _("Capture"));
                menuInSampleRate->tooltip(_("Force a specific sample rate. Select \"Native\" if \"Auto\"\ndoes not work we\
ll with your audio device."));
                menuInSampleRate->down_box(FL_BORDER_BOX);
                menuInSampleRate->callback((Fl_Callback*)cb_menuInSampleRate);
                menuInSampleRate->align(Fl_Align(FL_ALIGN_RIGHT));
                //extern Fl_Menu_Item sample_rate_menu[];
                //o->menu(sample_rate_menu);
                o->clear_changed();
              } // Fl_Choice* menuInSampleRate
              { Fl_Choice* o = menuOutSampleRate = new Fl_Choice(33, 124, 100, 20, _("Playback"));
                menuOutSampleRate->down_box(FL_BORDER_BOX);
                menuOutSampleRate->callback((Fl_Callback*)cb_menuOutSampleRate);
                menuOutSampleRate->align(Fl_Align(FL_ALIGN_RIGHT));
                //extern Fl_Menu_Item sample_rate_menu[];
                //o->menu(sample_rate_menu);
                o->clear_changed();
                o->tooltip(menuInSampleRate->tooltip());
              } // Fl_Choice* menuOutSampleRate
              { menuSampleConverter = new Fl_Choice(287, 94, 216, 20, _("Converter"));
                menuSampleConverter->tooltip(_("Set the type of resampler used of offset correction"));
                menuSampleConverter->down_box(FL_BORDER_BOX);
                menuSampleConverter->callback((Fl_Callback*)cb_menuSampleConverter);
                menuSampleConverter->align(Fl_Align(FL_ALIGN_TOP));
              } // Fl_Choice* menuSampleConverter
              grpAudioSampleRate->end();
            } // Fl_Group* grpAudioSampleRate
            { Fl_Group* o = new Fl_Group(23, 155, 490, 62, _("Corrections"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Spinner2* o = cntRxRateCorr = new Fl_Spinner2(33, 185, 85, 20, _("RX ppm"));
                cntRxRateCorr->tooltip(_("RX sound card correction"));
                cntRxRateCorr->box(FL_NO_BOX);
                cntRxRateCorr->color(FL_BACKGROUND_COLOR);
                cntRxRateCorr->selection_color(FL_BACKGROUND_COLOR);
                cntRxRateCorr->labeltype(FL_NORMAL_LABEL);
                cntRxRateCorr->labelfont(0);
                cntRxRateCorr->labelsize(14);
                cntRxRateCorr->labelcolor(FL_FOREGROUND_COLOR);
                cntRxRateCorr->callback((Fl_Callback*)cb_cntRxRateCorr);
                cntRxRateCorr->align(Fl_Align(FL_ALIGN_RIGHT));
                cntRxRateCorr->when(FL_WHEN_RELEASE);
                o->step(1);
                o->minimum(-50000);
                o->maximum(50000);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Spinner2* cntRxRateCorr
              { Fl_Spinner2* o = cntTxRateCorr = new Fl_Spinner2(194, 185, 85, 20, _("TX ppm"));
                cntTxRateCorr->tooltip(_("TX sound card correction"));
                cntTxRateCorr->box(FL_NO_BOX);
                cntTxRateCorr->color(FL_BACKGROUND_COLOR);
                cntTxRateCorr->selection_color(FL_BACKGROUND_COLOR);
                cntTxRateCorr->labeltype(FL_NORMAL_LABEL);
                cntTxRateCorr->labelfont(0);
                cntTxRateCorr->labelsize(14);
                cntTxRateCorr->labelcolor(FL_FOREGROUND_COLOR);
                cntTxRateCorr->callback((Fl_Callback*)cb_cntTxRateCorr);
                cntTxRateCorr->align(Fl_Align(FL_ALIGN_RIGHT));
                cntTxRateCorr->when(FL_WHEN_RELEASE);
                o->step(1);
                o->minimum(-50000);
                o->maximum(50000);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Spinner2* cntTxRateCorr
              { Fl_Spinner2* o = cntTxOffset = new Fl_Spinner2(356, 185, 85, 20, _("TX offset"));
                cntTxOffset->tooltip(_("Difference between Rx & Tx freq (rig offset)"));
                cntTxOffset->box(FL_NO_BOX);
                cntTxOffset->color(FL_BACKGROUND_COLOR);
                cntTxOffset->selection_color(FL_BACKGROUND_COLOR);
                cntTxOffset->labeltype(FL_NORMAL_LABEL);
                cntTxOffset->labelfont(0);
                cntTxOffset->labelsize(14);
                cntTxOffset->labelcolor(FL_FOREGROUND_COLOR);
                cntTxOffset->callback((Fl_Callback*)cb_cntTxOffset);
                cntTxOffset->align(Fl_Align(FL_ALIGN_RIGHT));
                cntTxOffset->when(FL_WHEN_RELEASE);
                o->value(progdefaults.TxOffset);
                o->step(1);
                o->minimum(-50); o->maximum(50);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Spinner2* cntTxOffset
              o->end();
            } // Fl_Group* o
            tabAudioOpt->end();
          } // Fl_Group* tabAudioOpt
          { tabMixer = new Fl_Group(0, 50, 540, 320, _("Mixer"));
            tabMixer->hide();
            { Fl_Group* o = new Fl_Group(23, 69, 490, 145, _("OSS Mixer"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btnMixer = new Fl_Check_Button(33, 98, 125, 25, _("Manage mixer"));
                btnMixer->tooltip(_("Add mixer controls to main dialog"));
                btnMixer->down_box(FL_DOWN_BOX);
                btnMixer->callback((Fl_Callback*)cb_btnMixer);
                o->value(progdefaults.EnableMixer);
              } // Fl_Check_Button* btnMixer
              { Fl_Input_Choice* o = menuMix = new Fl_Input_Choice(179, 141, 110, 25, _("Device:"));
                menuMix->tooltip(_("Select Mixer device"));
                menuMix->callback((Fl_Callback*)cb_menuMix);
                o->value(progdefaults.MXdevice.c_str());
              } // Fl_Input_Choice* menuMix
              { btnMicIn = new Fl_Light_Button(299, 102, 74, 25, _("Mic In"));
                btnMicIn->tooltip(_("Use microphone input"));
                btnMicIn->callback((Fl_Callback*)cb_btnMicIn);
              } // Fl_Light_Button* btnMicIn
              { btnLineIn = new Fl_Light_Button(299, 141, 74, 25, _("Line In"));
                btnLineIn->tooltip(_("Use Line-In device"));
                btnLineIn->selection_color((Fl_Color)3);
                btnLineIn->callback((Fl_Callback*)cb_btnLineIn);
              } // Fl_Light_Button* btnLineIn
              { Fl_Value_Slider2* o = valPCMvolume = new Fl_Value_Slider2(33, 176, 340, 20, _("PCM"));
                valPCMvolume->tooltip(_("Set the sound card PCM level"));
                valPCMvolume->type(1);
                valPCMvolume->box(FL_DOWN_BOX);
                valPCMvolume->color(FL_BACKGROUND_COLOR);
                valPCMvolume->selection_color(FL_SELECTION_COLOR);
                valPCMvolume->labeltype(FL_NORMAL_LABEL);
                valPCMvolume->labelfont(0);
                valPCMvolume->labelsize(14);
                valPCMvolume->labelcolor(FL_FOREGROUND_COLOR);
                valPCMvolume->value(0.8);
                valPCMvolume->textsize(14);
                valPCMvolume->callback((Fl_Callback*)cb_valPCMvolume);
                valPCMvolume->align(Fl_Align(FL_ALIGN_RIGHT));
                valPCMvolume->when(FL_WHEN_CHANGED);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
              } // Fl_Value_Slider2* valPCMvolume
              o->end();
            } // Fl_Group* o
            tabMixer->end();
          } // Fl_Group* tabMixer
          { tabAudioRightChannel = new Fl_Group(0, 50, 540, 320, _("Right channel"));
            tabAudioRightChannel->hide();
            { chkForceMono = new Fl_Check_Button(112, 63, 280, 20, _("Mono audio output"));
              chkForceMono->tooltip(_("Force output audio to single channel"));
              chkForceMono->down_box(FL_DOWN_BOX);
              chkForceMono->callback((Fl_Callback*)cb_chkForceMono);
              chkForceMono->value(progdefaults.mono_audio);
            } // Fl_Check_Button* chkForceMono
            { chkAudioStereoOut = new Fl_Check_Button(112, 95, 280, 20, _("Modem signal on left and right channels"));
              chkAudioStereoOut->tooltip(_("Left and right channels both contain modem audio"));
              chkAudioStereoOut->down_box(FL_DOWN_BOX);
              chkAudioStereoOut->callback((Fl_Callback*)cb_chkAudioStereoOut);
              chkAudioStereoOut->value(progdefaults.sig_on_right_channel);
            } // Fl_Check_Button* chkAudioStereoOut
            { Fl_Check_Button* o = chkReverseAudio = new Fl_Check_Button(112, 127, 270, 20, _("Reverse Left/Right channels"));
              chkReverseAudio->tooltip(_("Software reversal of left-right audio channels"));
              chkReverseAudio->down_box(FL_DOWN_BOX);
              chkReverseAudio->callback((Fl_Callback*)cb_chkReverseAudio);
              o->value(progdefaults.ReverseAudio);
            } // Fl_Check_Button* chkReverseAudio
            { Fl_Group* o = new Fl_Group(39, 165, 454, 187, _("...\nThese controls are on other tabs.\nThey are replicated here for convenie\
nce.\nYou may change the state from either location.\n..."));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btnPTTrightchannel2 = new Fl_Check_Button(112, 175, 250, 20, _("PTT tone on right audio channel "));
                btnPTTrightchannel2->tooltip(_("1000 Hz tone when PTT enabled\nCan be used in lieu of or in addition to other\
 PTT types"));
                btnPTTrightchannel2->down_box(FL_DOWN_BOX);
                btnPTTrightchannel2->callback((Fl_Callback*)cb_btnPTTrightchannel2);
                o->value(progdefaults.PTTrightchannel);
              } // Fl_Check_Button* btnPTTrightchannel2
              { Fl_Check_Button* o = btnQSK2 = new Fl_Check_Button(112, 213, 211, 20, _("CW QSK signal on right channel"));
                btnQSK2->tooltip(_("Generate 1000 Hz square wave signal on right channel"));
                btnQSK2->down_box(FL_DOWN_BOX);
                btnQSK2->callback((Fl_Callback*)cb_btnQSK2);
                o->value(progdefaults.QSK);
              } // Fl_Check_Button* btnQSK2
              { Fl_Check_Button* o = chkPseudoFSK2 = new Fl_Check_Button(112, 251, 270, 20, _("Pseudo-FSK on right audio channel"));
                chkPseudoFSK2->tooltip(_("Create 1000 Hz square wave on right channel"));
                chkPseudoFSK2->down_box(FL_DOWN_BOX);
                chkPseudoFSK2->callback((Fl_Callback*)cb_chkPseudoFSK2);
                o->value(progdefaults.PseudoFSK);
              } // Fl_Check_Button* chkPseudoFSK2
              o->end();
            } // Fl_Group* o
            tabAudioRightChannel->end();
          } // Fl_Group* tabAudioRightChannel
          { tabWavFile = new Fl_Group(0, 50, 540, 320, _("Wav"));
            tabWavFile->hide();
            { Fl_Choice* o = mnuWavSampleRate = new Fl_Choice(60, 96, 150, 24, _("Wav write sample rate"));
              mnuWavSampleRate->tooltip(_("Pick baud rate from list"));
              mnuWavSampleRate->down_box(FL_BORDER_BOX);
              mnuWavSampleRate->callback((Fl_Callback*)cb_mnuWavSampleRate);
              mnuWavSampleRate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              o->add("22050|24000|44100|48000");
              o->value(progdefaults.wavSampleRate);
            } // Fl_Choice* mnuWavSampleRate
            tabWavFile->end();
          } // Fl_Group* tabWavFile
          tabsSoundCard->end();
        } // Fl_Tabs* tabsSoundCard
        tabSoundCard->end();
      } // Fl_Group* tabSoundCard
      { tabID = new Fl_Group(0, 23, 540, 350, _("ID"));
        tabID->hide();
        { tabsID = new Fl_Tabs(0, 23, 540, 347);
          { tabRsID = new Fl_Group(0, 50, 540, 320, _("RsID"));
            { Fl_Group* o = new Fl_Group(2, 55, 535, 210, _("Reed-Solomon ID (Rx)"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { chkRSidNotifyOnly = new Fl_Check_Button(10, 112, 168, 20, _("Notify only"));
                chkRSidNotifyOnly->tooltip(_("Check this to be notified when an RSID is received\nwithout changing modem an\
d frequency"));
                chkRSidNotifyOnly->down_box(FL_DOWN_BOX);
                chkRSidNotifyOnly->callback((Fl_Callback*)cb_chkRSidNotifyOnly);
                chkRSidNotifyOnly->value(progdefaults.rsid_notify_only);
              } // Fl_Check_Button* chkRSidNotifyOnly
              { bRSIDRxModes = new Fl_Button(10, 81, 130, 24, _("Receive modes"));
                bRSIDRxModes->callback((Fl_Callback*)cb_bRSIDRxModes);
              } // Fl_Button* bRSIDRxModes
              { Fl_Check_Button* o = chkRSidWideSearch = new Fl_Check_Button(10, 143, 203, 20, _("Searches passband"));
                chkRSidWideSearch->tooltip(_("ON - search over entire waterfall\nOFF - limit search to +/- 200 Hz"));
                chkRSidWideSearch->down_box(FL_DOWN_BOX);
                chkRSidWideSearch->callback((Fl_Callback*)cb_chkRSidWideSearch);
                o->value(progdefaults.rsidWideSearch);
              } // Fl_Check_Button* chkRSidWideSearch
              { chkRSidMark = new Fl_Check_Button(10, 175, 203, 20, _("Mark prev freq/mode"));
                chkRSidMark->tooltip(_("Insert RX text marker before\nchanging frequency and modem"));
                chkRSidMark->down_box(FL_DOWN_BOX);
                chkRSidMark->callback((Fl_Callback*)cb_chkRSidMark);
                chkRSidMark->value(progdefaults.rsid_mark);
              } // Fl_Check_Button* chkRSidMark
              { chkRSidAutoDisable = new Fl_Check_Button(10, 207, 203, 20, _("Disables detector"));
                chkRSidAutoDisable->tooltip(_("Disable further detection when RSID is received"));
                chkRSidAutoDisable->down_box(FL_DOWN_BOX);
                chkRSidAutoDisable->callback((Fl_Callback*)cb_chkRSidAutoDisable);
                if (progdefaults.rsid_notify_only) progdefaults.rsid_auto_disable = false;
                chkRSidAutoDisable->value(progdefaults.rsid_auto_disable);
                if (progdefaults.rsid_notify_only) chkRSidAutoDisable->deactivate();
              } // Fl_Check_Button* chkRSidAutoDisable
              { Fl_Value_Slider2* o = sldrRSIDresolution = new Fl_Value_Slider2(10, 233, 145, 22, _("Errors"));
                sldrRSIDresolution->tooltip(_("Number of errors allowed in RsID comparison"));
                sldrRSIDresolution->type(1);
                sldrRSIDresolution->box(FL_DOWN_BOX);
                sldrRSIDresolution->color(FL_BACKGROUND_COLOR);
                sldrRSIDresolution->selection_color(FL_BACKGROUND_COLOR);
                sldrRSIDresolution->labeltype(FL_NORMAL_LABEL);
                sldrRSIDresolution->labelfont(0);
                sldrRSIDresolution->labelsize(14);
                sldrRSIDresolution->labelcolor(FL_FOREGROUND_COLOR);
                sldrRSIDresolution->maximum(4);
                sldrRSIDresolution->step(1);
                sldrRSIDresolution->textsize(14);
                sldrRSIDresolution->callback((Fl_Callback*)cb_sldrRSIDresolution);
                sldrRSIDresolution->align(Fl_Align(FL_ALIGN_RIGHT));
                sldrRSIDresolution->when(FL_WHEN_CHANGED);
                o->value(progdefaults.rsid_resolution);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
              } // Fl_Value_Slider2* sldrRSIDresolution
              { Fl_Value_Slider2* o = sldrRSIDsquelch = new Fl_Value_Slider2(246, 233, 145, 22, _("Squelch open (sec)"));
                sldrRSIDsquelch->tooltip(_("Open squelch for nn sec if RSID detected"));
                sldrRSIDsquelch->type(1);
                sldrRSIDsquelch->box(FL_DOWN_BOX);
                sldrRSIDsquelch->color(FL_BACKGROUND_COLOR);
                sldrRSIDsquelch->selection_color(FL_BACKGROUND_COLOR);
                sldrRSIDsquelch->labeltype(FL_NORMAL_LABEL);
                sldrRSIDsquelch->labelfont(0);
                sldrRSIDsquelch->labelsize(14);
                sldrRSIDsquelch->labelcolor(FL_FOREGROUND_COLOR);
                sldrRSIDsquelch->maximum(20);
                sldrRSIDsquelch->step(1);
                sldrRSIDsquelch->textsize(14);
                sldrRSIDsquelch->callback((Fl_Callback*)cb_sldrRSIDsquelch);
                sldrRSIDsquelch->align(Fl_Align(FL_ALIGN_RIGHT));
                sldrRSIDsquelch->when(FL_WHEN_CHANGED);
                o->value(progdefaults.rsid_squelch);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
              } // Fl_Value_Slider2* sldrRSIDsquelch
              { Fl_Check_Button* o = chkRSidShowAlert = new Fl_Check_Button(246, 143, 203, 20, _("Disable alert dialog"));
                chkRSidShowAlert->tooltip(_("Do not show RsID alert dialog box"));
                chkRSidShowAlert->down_box(FL_DOWN_BOX);
                chkRSidShowAlert->callback((Fl_Callback*)cb_chkRSidShowAlert);
                o->value(progdefaults.disable_rsid_warning_dialog_box);
              } // Fl_Check_Button* chkRSidShowAlert
              { Fl_Check_Button* o = chkRetainFreqLock = new Fl_Check_Button(246, 175, 203, 20, _("Retain tx freq lock"));
                chkRetainFreqLock->tooltip(_("Retain TX lock frequency (Lk) when changing to RX RsID frequency"));
                chkRetainFreqLock->down_box(FL_DOWN_BOX);
                chkRetainFreqLock->callback((Fl_Callback*)cb_chkRetainFreqLock);
                o->value(progdefaults.retain_freq_lock);
              } // Fl_Check_Button* chkRetainFreqLock
              { Fl_Check_Button* o = chkDisableFreqChange = new Fl_Check_Button(246, 207, 203, 20, _("Disable freq change"));
                chkDisableFreqChange->tooltip(_("Do not automatically change to RX RsID frequency"));
                chkDisableFreqChange->down_box(FL_DOWN_BOX);
                chkDisableFreqChange->callback((Fl_Callback*)cb_chkDisableFreqChange);
                o->value(progdefaults.disable_rsid_freq_change);
              } // Fl_Check_Button* chkDisableFreqChange
              { Fl_Group* o = new Fl_Group(186, 74, 330, 60, _("The RsID notification message contents and \ndisplay characteristics are conf\
igured on the\n\"Notifications\" configure dialog."));
                o->box(FL_BORDER_BOX);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                o->end();
              } // Fl_Group* o
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(3, 267, 265, 97, _("Pre-Signal Tone"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Counter* o = val_pretone = new Fl_Counter(59, 305, 140, 21, _("Seconds"));
                val_pretone->tooltip(_("Use for triggering amplifier carrier detect"));
                val_pretone->minimum(0);
                val_pretone->maximum(10);
                val_pretone->callback((Fl_Callback*)cb_val_pretone);
                o->value(progdefaults.pretone);
              } // Fl_Counter* val_pretone
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(271, 267, 265, 97, _("Reed-Solomon ID (Tx)"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { bRSIDTxModes = new Fl_Button(348, 294, 130, 24, _("Transmit modes"));
                bRSIDTxModes->callback((Fl_Callback*)cb_bRSIDTxModes);
              } // Fl_Button* bRSIDTxModes
              { Fl_Check_Button* o = btn_post_rsid = new Fl_Check_Button(348, 329, 97, 17, _("End of xmt ID"));
                btn_post_rsid->tooltip(_("Add RsID signal to end of transmission"));
                btn_post_rsid->down_box(FL_DOWN_BOX);
                btn_post_rsid->callback((Fl_Callback*)cb_btn_post_rsid);
                o->value(progdefaults.rsid_post);
              } // Fl_Check_Button* btn_post_rsid
              o->end();
            } // Fl_Group* o
            tabRsID->end();
          } // Fl_Group* tabRsID
          { tabVideoID = new Fl_Group(0, 50, 540, 320, _("Video"));
            tabVideoID->hide();
            { Fl_Group* o = new Fl_Group(2, 55, 536, 189, _("Video Preamble ID"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { btnsendid = new Fl_Check_Button(20, 89, 150, 20, _("Transmit mode ID"));
                btnsendid->tooltip(_("Waterfall video ID"));
                btnsendid->down_box(FL_DOWN_BOX);
                btnsendid->callback((Fl_Callback*)cb_btnsendid);
              } // Fl_Check_Button* btnsendid
              { Fl_Check_Button* o = btnsendvideotext = new Fl_Check_Button(20, 121, 155, 20, _("Transmit video text"));
                btnsendvideotext->tooltip(_("Waterfall video text"));
                btnsendvideotext->down_box(FL_DOWN_BOX);
                btnsendvideotext->callback((Fl_Callback*)cb_btnsendvideotext);
                o->value(progdefaults.sendtextid);
              } // Fl_Check_Button* btnsendvideotext
              { Fl_Input2* o = valVideotext = new Fl_Input2(187, 119, 323, 24, _(":"));
                valVideotext->tooltip(_("Limit to a few characters,\nas in CQEM or IOTA etc."));
                valVideotext->box(FL_DOWN_BOX);
                valVideotext->color(FL_BACKGROUND2_COLOR);
                valVideotext->selection_color(FL_SELECTION_COLOR);
                valVideotext->labeltype(FL_NORMAL_LABEL);
                valVideotext->labelfont(0);
                valVideotext->labelsize(14);
                valVideotext->labelcolor(FL_FOREGROUND_COLOR);
                valVideotext->callback((Fl_Callback*)cb_valVideotext);
                valVideotext->align(Fl_Align(FL_ALIGN_LEFT));
                valVideotext->when(FL_WHEN_RELEASE);
                o->value(progdefaults.strTextid.c_str());
                valVideotext->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* valVideotext
              { Fl_Check_Button* o = chkID_SMALL = new Fl_Check_Button(20, 153, 120, 20, _("Use small font"));
                chkID_SMALL->tooltip(_("ON - small font\nOFF - large font"));
                chkID_SMALL->down_box(FL_DOWN_BOX);
                chkID_SMALL->value(1);
                chkID_SMALL->callback((Fl_Callback*)cb_chkID_SMALL);
                o->value(progdefaults.ID_SMALL);
              } // Fl_Check_Button* chkID_SMALL
              { Fl_Value_Slider2* o = sldrVideowidth = new Fl_Value_Slider2(260, 151, 125, 24, _("Chars/Row:"));
                sldrVideowidth->tooltip(_("Set the number of characters per row"));
                sldrVideowidth->type(1);
                sldrVideowidth->box(FL_DOWN_BOX);
                sldrVideowidth->color(FL_BACKGROUND_COLOR);
                sldrVideowidth->selection_color(FL_BACKGROUND_COLOR);
                sldrVideowidth->labeltype(FL_NORMAL_LABEL);
                sldrVideowidth->labelfont(0);
                sldrVideowidth->labelsize(14);
                sldrVideowidth->labelcolor(FL_FOREGROUND_COLOR);
                sldrVideowidth->minimum(1);
                sldrVideowidth->maximum(8);
                sldrVideowidth->step(1);
                sldrVideowidth->value(4);
                sldrVideowidth->textsize(14);
                sldrVideowidth->callback((Fl_Callback*)cb_sldrVideowidth);
                sldrVideowidth->align(Fl_Align(FL_ALIGN_LEFT));
                sldrVideowidth->when(FL_WHEN_CHANGED);
                o->value(progdefaults.videowidth);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
              } // Fl_Value_Slider2* sldrVideowidth
              { Fl_Check_Button* o = btn_vidlimit = new Fl_Check_Button(20, 185, 110, 15, _("500 Hz limit"));
                btn_vidlimit->down_box(FL_DOWN_BOX);
                btn_vidlimit->callback((Fl_Callback*)cb_btn_vidlimit);
                o->value(progdefaults.vidlimit);
              } // Fl_Check_Button* btn_vidlimit
              { Fl_Check_Button* o = btn_vidmodelimit = new Fl_Check_Button(20, 213, 110, 15, _("Mode width limit"));
                btn_vidmodelimit->down_box(FL_DOWN_BOX);
                btn_vidmodelimit->callback((Fl_Callback*)cb_btn_vidmodelimit);
                o->value(progdefaults.vidmodelimit);
              } // Fl_Check_Button* btn_vidmodelimit
              { bVideoIDModes = new Fl_Button(390, 86, 120, 24, _("Video ID modes"));
                bVideoIDModes->callback((Fl_Callback*)cb_bVideoIDModes);
              } // Fl_Button* bVideoIDModes
              o->end();
            } // Fl_Group* o
            tabVideoID->end();
          } // Fl_Group* tabVideoID
          { tabCwID = new Fl_Group(0, 50, 540, 320, _("CW"));
            tabCwID->hide();
            { sld = new Fl_Group(2, 56, 536, 127, _("CW Postamble ID"));
              sld->box(FL_ENGRAVED_FRAME);
              sld->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btnCWID = new Fl_Check_Button(109, 94, 140, 24, _("Transmit callsign"));
                btnCWID->tooltip(_("Send Callsign in CW at end of every transmission"));
                btnCWID->down_box(FL_DOWN_BOX);
                btnCWID->callback((Fl_Callback*)cb_btnCWID);
                o->value(progdefaults.CWid);
              } // Fl_Check_Button* btnCWID
              { Fl_Value_Slider2* o = sldrCWIDwpm = new Fl_Value_Slider2(109, 137, 180, 20, _("Speed (WPM):"));
                sldrCWIDwpm->tooltip(_("Send at this WPM"));
                sldrCWIDwpm->type(1);
                sldrCWIDwpm->box(FL_DOWN_BOX);
                sldrCWIDwpm->color(FL_BACKGROUND_COLOR);
                sldrCWIDwpm->selection_color(FL_BACKGROUND_COLOR);
                sldrCWIDwpm->labeltype(FL_NORMAL_LABEL);
                sldrCWIDwpm->labelfont(0);
                sldrCWIDwpm->labelsize(14);
                sldrCWIDwpm->labelcolor(FL_FOREGROUND_COLOR);
                sldrCWIDwpm->minimum(15);
                sldrCWIDwpm->maximum(40);
                sldrCWIDwpm->step(1);
                sldrCWIDwpm->value(18);
                sldrCWIDwpm->textsize(14);
                sldrCWIDwpm->callback((Fl_Callback*)cb_sldrCWIDwpm);
                sldrCWIDwpm->align(Fl_Align(FL_ALIGN_TOP));
                sldrCWIDwpm->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWIDwpm);
                o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);
              } // Fl_Value_Slider2* sldrCWIDwpm
              { bCWIDModes = new Fl_Button(382, 94, 120, 24, _("CW ID modes"));
                bCWIDModes->callback((Fl_Callback*)cb_bCWIDModes);
              } // Fl_Button* bCWIDModes
              sld->end();
            } // Fl_Group* sld
            tabCwID->end();
          } // Fl_Group* tabCwID
          tabsID->end();
        } // Fl_Tabs* tabsID
        tabID->end();
      } // Fl_Group* tabID
      { tabMisc = new Fl_Group(0, 25, 540, 345, _("Misc"));
        tabMisc->hide();
        { tabsMisc = new Fl_Tabs(0, 25, 540, 345);
          tabsMisc->selection_color(FL_LIGHT1);
          { tabCPUspeed = new Fl_Group(0, 50, 540, 320, _("CPU"));
            { Fl_Group* o = new Fl_Group(25, 75, 490, 51);
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = chkSlowCpu = new Fl_Check_Button(171, 90, 225, 20, _("Slow CPU (less than 700MHz)"));
                chkSlowCpu->tooltip(_("Enable if you\'re computer does not decode properly"));
                chkSlowCpu->down_box(FL_DOWN_BOX);
                chkSlowCpu->callback((Fl_Callback*)cb_chkSlowCpu);
                o->value(progdefaults.slowcpu);
              } // Fl_Check_Button* chkSlowCpu
              o->end();
            } // Fl_Group* o
            tabCPUspeed->end();
          } // Fl_Group* tabCPUspeed
          { tabNBEMS = new Fl_Group(0, 50, 540, 320, _("NBEMS"));
            tabNBEMS->hide();
            { Fl_Group* o = new Fl_Group(20, 65, 500, 75, _("NBEMS data file interface"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = chkAutoExtract = new Fl_Check_Button(74, 96, 75, 20, _("Enable"));
                chkAutoExtract->tooltip(_("Extract files for use with external \"wrap / flmsg\" program"));
                chkAutoExtract->down_box(FL_DOWN_BOX);
                chkAutoExtract->callback((Fl_Callback*)cb_chkAutoExtract);
                o->value(progdefaults.autoextract);
              } // Fl_Check_Button* chkAutoExtract
              { Fl_Check_Button* o = chk_open_wrap_folder = new Fl_Check_Button(280, 96, 146, 20, _("Open message folder"));
                chk_open_wrap_folder->tooltip(_("Opens NBEMS file folder upon successful capture"));
                chk_open_wrap_folder->down_box(FL_DOWN_BOX);
                chk_open_wrap_folder->callback((Fl_Callback*)cb_chk_open_wrap_folder);
                o->value(progdefaults.open_nbems_folder);
              } // Fl_Check_Button* chk_open_wrap_folder
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(20, 141, 500, 130, _("Reception of flmsg files"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = chk_open_flmsg = new Fl_Check_Button(74, 168, 136, 20, _("Open with flmsg"));
                chk_open_flmsg->tooltip(_("Open message with flmsg"));
                chk_open_flmsg->down_box(FL_DOWN_BOX);
                chk_open_flmsg->callback((Fl_Callback*)cb_chk_open_flmsg);
                o->value(progdefaults.open_flmsg);
              } // Fl_Check_Button* chk_open_flmsg
              { Fl_Check_Button* o = chk_open_flmsg_print = new Fl_Check_Button(280, 168, 136, 20, _("Open in browser"));
                chk_open_flmsg_print->tooltip(_("Open file with default browser"));
                chk_open_flmsg_print->down_box(FL_DOWN_BOX);
                chk_open_flmsg_print->callback((Fl_Callback*)cb_chk_open_flmsg_print);
                o->value(progdefaults.open_flmsg_print);
              } // Fl_Check_Button* chk_open_flmsg_print
              { Fl_Input2* o = txt_flmsg_pathname = new Fl_Input2(74, 199, 330, 24, _("flmsg:"));
                txt_flmsg_pathname->tooltip(_("Enter full path-filename for flmsg"));
                txt_flmsg_pathname->box(FL_DOWN_BOX);
                txt_flmsg_pathname->color(FL_BACKGROUND2_COLOR);
                txt_flmsg_pathname->selection_color(FL_SELECTION_COLOR);
                txt_flmsg_pathname->labeltype(FL_NORMAL_LABEL);
                txt_flmsg_pathname->labelfont(0);
                txt_flmsg_pathname->labelsize(14);
                txt_flmsg_pathname->labelcolor(FL_FOREGROUND_COLOR);
                txt_flmsg_pathname->callback((Fl_Callback*)cb_txt_flmsg_pathname);
                txt_flmsg_pathname->align(Fl_Align(FL_ALIGN_LEFT));
                txt_flmsg_pathname->when(FL_WHEN_CHANGED);
                o->value(progdefaults.flmsg_pathname.c_str());
              } // Fl_Input2* txt_flmsg_pathname
              { btn_select_flmsg = new Fl_Button(411, 199, 100, 24, _("Locate flmsg"));
                btn_select_flmsg->tooltip(_("Locate flmsg executable"));
                btn_select_flmsg->callback((Fl_Callback*)cb_btn_select_flmsg);
              } // Fl_Button* btn_select_flmsg
              { Fl_Value_Slider* o = sldr_extract_timeout = new Fl_Value_Slider(40, 237, 364, 21, _("Timeout (secs)"));
                sldr_extract_timeout->tooltip(_("Extract times out after NN seconds of inactivity."));
                sldr_extract_timeout->type(5);
                sldr_extract_timeout->color(FL_LIGHT3);
                sldr_extract_timeout->selection_color(FL_FOREGROUND_COLOR);
                sldr_extract_timeout->minimum(1);
                sldr_extract_timeout->maximum(10);
                sldr_extract_timeout->step(0.5);
                sldr_extract_timeout->value(4);
                sldr_extract_timeout->textsize(14);
                sldr_extract_timeout->callback((Fl_Callback*)cb_sldr_extract_timeout);
                sldr_extract_timeout->align(Fl_Align(FL_ALIGN_RIGHT));
                o->value(progdefaults.extract_timeout);
              } // Fl_Value_Slider* sldr_extract_timeout
              o->end();
            } // Fl_Group* o
            tabNBEMS->end();
          } // Fl_Group* tabNBEMS
          { tabPskmail = new Fl_Group(0, 50, 540, 320, _("Pskmail"));
            tabPskmail->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            tabPskmail->hide();
            { Fl_Group* o = new Fl_Group(26, 58, 490, 174, _("Mail Server Attributes"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Counter2* o = cntServerCarrier = new Fl_Counter2(77, 86, 80, 20, _("Carrier frequency (Hz)"));
                cntServerCarrier->tooltip(_("Default listen / transmit frequency"));
                cntServerCarrier->type(1);
                cntServerCarrier->box(FL_UP_BOX);
                cntServerCarrier->color(FL_BACKGROUND_COLOR);
                cntServerCarrier->selection_color(FL_INACTIVE_COLOR);
                cntServerCarrier->labeltype(FL_NORMAL_LABEL);
                cntServerCarrier->labelfont(0);
                cntServerCarrier->labelsize(14);
                cntServerCarrier->labelcolor(FL_FOREGROUND_COLOR);
                cntServerCarrier->minimum(500);
                cntServerCarrier->maximum(2500);
                cntServerCarrier->step(25);
                cntServerCarrier->value(1500);
                cntServerCarrier->callback((Fl_Callback*)cb_cntServerCarrier);
                cntServerCarrier->align(Fl_Align(FL_ALIGN_RIGHT));
                cntServerCarrier->when(FL_WHEN_CHANGED);
                o->value(progdefaults.ServerCarrier);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* cntServerCarrier
              { Fl_Counter2* o = cntServerOffset = new Fl_Counter2(77, 123, 80, 20, _("Search range (Hz)"));
                cntServerOffset->tooltip(_("Listen for signals within this range"));
                cntServerOffset->type(1);
                cntServerOffset->box(FL_UP_BOX);
                cntServerOffset->color(FL_BACKGROUND_COLOR);
                cntServerOffset->selection_color(FL_INACTIVE_COLOR);
                cntServerOffset->labeltype(FL_NORMAL_LABEL);
                cntServerOffset->labelfont(0);
                cntServerOffset->labelsize(14);
                cntServerOffset->labelcolor(FL_FOREGROUND_COLOR);
                cntServerOffset->minimum(10);
                cntServerOffset->maximum(500);
                cntServerOffset->step(10);
                cntServerOffset->value(100);
                cntServerOffset->callback((Fl_Callback*)cb_cntServerOffset);
                cntServerOffset->align(Fl_Align(FL_ALIGN_RIGHT));
                cntServerOffset->when(FL_WHEN_CHANGED);
                o->value(progdefaults.SearchRange);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* cntServerOffset
              { Fl_Counter2* o = cntServerACQsn = new Fl_Counter2(77, 160, 80, 20, _("Acquisition S/N (dB)"));
                cntServerACQsn->tooltip(_("Capture signals over this threshold"));
                cntServerACQsn->type(1);
                cntServerACQsn->box(FL_UP_BOX);
                cntServerACQsn->color(FL_BACKGROUND_COLOR);
                cntServerACQsn->selection_color(FL_INACTIVE_COLOR);
                cntServerACQsn->labeltype(FL_NORMAL_LABEL);
                cntServerACQsn->labelfont(0);
                cntServerACQsn->labelsize(14);
                cntServerACQsn->labelcolor(FL_FOREGROUND_COLOR);
                cntServerACQsn->minimum(3);
                cntServerACQsn->maximum(20);
                cntServerACQsn->step(1);
                cntServerACQsn->value(6);
                cntServerACQsn->callback((Fl_Callback*)cb_cntServerACQsn);
                cntServerACQsn->align(Fl_Align(FL_ALIGN_RIGHT));
                cntServerACQsn->when(FL_WHEN_CHANGED);
                o->value(progdefaults.ServerACQsn);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* cntServerACQsn
              { Fl_Counter2* o = cntServerAFCrange = new Fl_Counter2(77, 197, 80, 20, _("AFC range (Hz)"));
                cntServerAFCrange->tooltip(_("Limit AFC movement to this range"));
                cntServerAFCrange->type(1);
                cntServerAFCrange->box(FL_UP_BOX);
                cntServerAFCrange->color(FL_BACKGROUND_COLOR);
                cntServerAFCrange->selection_color(FL_INACTIVE_COLOR);
                cntServerAFCrange->labeltype(FL_NORMAL_LABEL);
                cntServerAFCrange->labelfont(0);
                cntServerAFCrange->labelsize(14);
                cntServerAFCrange->labelcolor(FL_FOREGROUND_COLOR);
                cntServerAFCrange->minimum(10);
                cntServerAFCrange->maximum(500);
                cntServerAFCrange->step(10);
                cntServerAFCrange->value(25);
                cntServerAFCrange->callback((Fl_Callback*)cb_cntServerAFCrange);
                cntServerAFCrange->align(Fl_Align(FL_ALIGN_RIGHT));
                cntServerAFCrange->when(FL_WHEN_CHANGED);
                o->value(progdefaults.SearchRange);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Counter2* cntServerAFCrange
              { Fl_Check_Button* o = btnPSKmailSweetSpot = new Fl_Check_Button(332, 86, 142, 20, _("Reset to Carrier"));
                btnPSKmailSweetSpot->tooltip(_("When no signal present"));
                btnPSKmailSweetSpot->down_box(FL_DOWN_BOX);
                btnPSKmailSweetSpot->value(1);
                btnPSKmailSweetSpot->callback((Fl_Callback*)cb_btnPSKmailSweetSpot);
                o->value(progdefaults.PSKmailSweetSpot);
              } // Fl_Check_Button* btnPSKmailSweetSpot
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(26, 234, 490, 131, _("General"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btn_arq_s2n_report = new Fl_Check_Button(51, 259, 250, 20, _("Report ARQ frames average S/N"));
                btn_arq_s2n_report->down_box(FL_DOWN_BOX);
                btn_arq_s2n_report->callback((Fl_Callback*)cb_btn_arq_s2n_report);
                o->value(progdefaults.Pskmails2nreport);
              } // Fl_Check_Button* btn_arq_s2n_report
              o->end();
            } // Fl_Group* o
            tabPskmail->end();
          } // Fl_Group* tabPskmail
          { tabSpot = new Fl_Group(0, 50, 540, 320, _("Spotting"));
            tabSpot->hide();
            { Fl_Group* o = new Fl_Group(30, 72, 490, 254, _("PSK Reporter"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { btnPSKRepAuto = new Fl_Check_Button(40, 103, 324, 20, _("Automatically spot callsigns in decoded text"));
                btnPSKRepAuto->tooltip(_("Parse all incoming text"));
                btnPSKRepAuto->down_box(FL_DOWN_BOX);
                btnPSKRepAuto->callback((Fl_Callback*)cb_btnPSKRepAuto);
                btnPSKRepAuto->value(progdefaults.pskrep_auto);
              } // Fl_Check_Button* btnPSKRepAuto
              { btnPSKRepLog = new Fl_Check_Button(40, 133, 327, 20, _("Send reception report when logging a QSO"));
                btnPSKRepLog->tooltip(_("Send report only when QSO is logged"));
                btnPSKRepLog->down_box(FL_DOWN_BOX);
                btnPSKRepLog->callback((Fl_Callback*)cb_btnPSKRepLog);
                btnPSKRepLog->value(progdefaults.pskrep_log);
              } // Fl_Check_Button* btnPSKRepLog
              { btnPSKRepQRG = new Fl_Check_Button(40, 164, 416, 20, _("Report rig frequency (enable only if you have rig control!)"));
                btnPSKRepQRG->tooltip(_("Include the transmit frequency"));
                btnPSKRepQRG->down_box(FL_DOWN_BOX);
                btnPSKRepQRG->callback((Fl_Callback*)cb_btnPSKRepQRG);
                btnPSKRepQRG->value(progdefaults.pskrep_qrg);
              } // Fl_Check_Button* btnPSKRepQRG
              { Fl_Check_Button* o = btn_report_when_visible = new Fl_Check_Button(40, 195, 416, 20, _("Enable spotting only when signal browser(s) are visible"));
                btn_report_when_visible->tooltip(_("Enable to reduce CPU load"));
                btn_report_when_visible->down_box(FL_DOWN_BOX);
                btn_report_when_visible->callback((Fl_Callback*)cb_btn_report_when_visible);
                o->value(progdefaults.report_when_visible);
              } // Fl_Check_Button* btn_report_when_visible
              { inpPSKRepHost = new Fl_Input2(83, 228, 220, 24, _("Host:"));
                inpPSKRepHost->tooltip(_("To whom the connection is made"));
                inpPSKRepHost->box(FL_DOWN_BOX);
                inpPSKRepHost->color(FL_BACKGROUND2_COLOR);
                inpPSKRepHost->selection_color(FL_SELECTION_COLOR);
                inpPSKRepHost->labeltype(FL_NORMAL_LABEL);
                inpPSKRepHost->labelfont(0);
                inpPSKRepHost->labelsize(14);
                inpPSKRepHost->labelcolor(FL_FOREGROUND_COLOR);
                inpPSKRepHost->callback((Fl_Callback*)cb_inpPSKRepHost);
                inpPSKRepHost->align(Fl_Align(FL_ALIGN_LEFT));
                inpPSKRepHost->when(FL_WHEN_CHANGED);
                inpPSKRepHost->value(progdefaults.pskrep_host.c_str());
                inpPSKRepHost->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* inpPSKRepHost
              { inpPSKRepPort = new Fl_Input2(452, 228, 60, 24, _("Port:"));
                inpPSKRepPort->tooltip(_("Using UDP port #"));
                inpPSKRepPort->box(FL_DOWN_BOX);
                inpPSKRepPort->color(FL_BACKGROUND2_COLOR);
                inpPSKRepPort->selection_color(FL_SELECTION_COLOR);
                inpPSKRepPort->labeltype(FL_NORMAL_LABEL);
                inpPSKRepPort->labelfont(0);
                inpPSKRepPort->labelsize(14);
                inpPSKRepPort->labelcolor(FL_FOREGROUND_COLOR);
                inpPSKRepPort->callback((Fl_Callback*)cb_inpPSKRepPort);
                inpPSKRepPort->align(Fl_Align(FL_ALIGN_LEFT));
                inpPSKRepPort->when(FL_WHEN_CHANGED);
                inpPSKRepPort->value(progdefaults.pskrep_port.c_str());
                inpPSKRepPort->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* inpPSKRepPort
              { btnPSKRepInit = new Fl_Button(432, 273, 80, 24, _("Initialize"));
                btnPSKRepInit->tooltip(_("Initialize the socket client"));
                btnPSKRepInit->callback((Fl_Callback*)cb_btnPSKRepInit);
              } // Fl_Button* btnPSKRepInit
              { boxPSKRepMsg = new Fl_Box(42, 257, 300, 48, _("<PSK Reporter error message>"));
                boxPSKRepMsg->labelfont(2);
                boxPSKRepMsg->label(0);
              } // Fl_Box* boxPSKRepMsg
              o->end();
            } // Fl_Group* o
            tabSpot->end();
          } // Fl_Group* tabSpot
          { tabSweetSpot = new Fl_Group(0, 50, 540, 320, _("Sweet Spot"));
            tabSweetSpot->hide();
            { Fl_Group* o = new Fl_Group(28, 71, 490, 75);
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Value_Input2* o = valCWsweetspot = new Fl_Value_Input2(65, 82, 65, 20, _("CW"));
                valCWsweetspot->tooltip(_("Default CW tracking point"));
                valCWsweetspot->box(FL_DOWN_BOX);
                valCWsweetspot->color(FL_BACKGROUND2_COLOR);
                valCWsweetspot->selection_color(FL_SELECTION_COLOR);
                valCWsweetspot->labeltype(FL_NORMAL_LABEL);
                valCWsweetspot->labelfont(0);
                valCWsweetspot->labelsize(14);
                valCWsweetspot->labelcolor(FL_FOREGROUND_COLOR);
                valCWsweetspot->minimum(200);
                valCWsweetspot->maximum(4000);
                valCWsweetspot->step(1);
                valCWsweetspot->value(1000);
                valCWsweetspot->callback((Fl_Callback*)cb_valCWsweetspot);
                valCWsweetspot->align(Fl_Align(FL_ALIGN_LEFT));
                valCWsweetspot->when(FL_WHEN_CHANGED);
                o->value(progdefaults.CWsweetspot);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Value_Input2* valCWsweetspot
              { Fl_Value_Input2* o = valRTTYsweetspot = new Fl_Value_Input2(243, 82, 65, 20, _("RTTY"));
                valRTTYsweetspot->tooltip(_("Default RTTY tracking point"));
                valRTTYsweetspot->box(FL_DOWN_BOX);
                valRTTYsweetspot->color(FL_BACKGROUND2_COLOR);
                valRTTYsweetspot->selection_color(FL_SELECTION_COLOR);
                valRTTYsweetspot->labeltype(FL_NORMAL_LABEL);
                valRTTYsweetspot->labelfont(0);
                valRTTYsweetspot->labelsize(14);
                valRTTYsweetspot->labelcolor(FL_FOREGROUND_COLOR);
                valRTTYsweetspot->minimum(200);
                valRTTYsweetspot->maximum(4000);
                valRTTYsweetspot->step(1);
                valRTTYsweetspot->value(1000);
                valRTTYsweetspot->callback((Fl_Callback*)cb_valRTTYsweetspot);
                valRTTYsweetspot->align(Fl_Align(FL_ALIGN_LEFT));
                valRTTYsweetspot->when(FL_WHEN_CHANGED);
                o->value(progdefaults.RTTYsweetspot);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Value_Input2* valRTTYsweetspot
              { Fl_Value_Input2* o = valPSKsweetspot = new Fl_Value_Input2(443, 82, 65, 20, _("PSK et al."));
                valPSKsweetspot->tooltip(_("Default for all other modems"));
                valPSKsweetspot->box(FL_DOWN_BOX);
                valPSKsweetspot->color(FL_BACKGROUND2_COLOR);
                valPSKsweetspot->selection_color(FL_SELECTION_COLOR);
                valPSKsweetspot->labeltype(FL_NORMAL_LABEL);
                valPSKsweetspot->labelfont(0);
                valPSKsweetspot->labelsize(14);
                valPSKsweetspot->labelcolor(FL_FOREGROUND_COLOR);
                valPSKsweetspot->minimum(200);
                valPSKsweetspot->maximum(4000);
                valPSKsweetspot->step(1);
                valPSKsweetspot->value(1000);
                valPSKsweetspot->callback((Fl_Callback*)cb_valPSKsweetspot);
                valPSKsweetspot->align(Fl_Align(FL_ALIGN_LEFT));
                valPSKsweetspot->when(FL_WHEN_CHANGED);
                o->value(progdefaults.PSKsweetspot);
                o->labelsize(FL_NORMAL_SIZE);
              } // Fl_Value_Input2* valPSKsweetspot
              { Fl_Check_Button* o = btnStartAtSweetSpot = new Fl_Check_Button(38, 112, 348, 20, _("Always start new modems at these frequencies"));
                btnStartAtSweetSpot->tooltip(_("ON - start at default\nOFF - keep current wf cursor position"));
                btnStartAtSweetSpot->down_box(FL_DOWN_BOX);
                btnStartAtSweetSpot->value(1);
                btnStartAtSweetSpot->callback((Fl_Callback*)cb_btnStartAtSweetSpot);
                o->value(progdefaults.StartAtSweetSpot);
              } // Fl_Check_Button* btnStartAtSweetSpot
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(28, 151, 490, 60, _("K3 A1A configuation"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btnCWIsLSB = new Fl_Check_Button(243, 172, 70, 15, _("CW is LSB"));
                btnCWIsLSB->tooltip(_("Select this for Elecraft K3\nOther radios should not need it."));
                btnCWIsLSB->down_box(FL_DOWN_BOX);
                btnCWIsLSB->callback((Fl_Callback*)cb_btnCWIsLSB);
                o->value(progdefaults.CWIsLSB);
              } // Fl_Check_Button* btnCWIsLSB
              o->end();
            } // Fl_Group* o
            tabSweetSpot->end();
          } // Fl_Group* tabSweetSpot
          { tabText_IO = new Fl_Group(0, 50, 540, 320, _("Text i/o"));
            tabText_IO->hide();
            { grpTalker = new Fl_Group(29, 132, 490, 73, _("Talker Socket (MS only)"));
              grpTalker->box(FL_ENGRAVED_FRAME);
              grpTalker->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { btnConnectTalker = new Fl_Light_Button(55, 152, 74, 20, _("Talker"));
                btnConnectTalker->selection_color(FL_DARK_GREEN);
                btnConnectTalker->callback((Fl_Callback*)cb_btnConnectTalker);
              } // Fl_Light_Button* btnConnectTalker
              { Fl_Box* o = new Fl_Box(134, 152, 345, 20, _("Connect/disconnect to Talker socket server"));
                o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
              } // Fl_Box* o
              { Fl_Check_Button* o = btn_auto_talk = new Fl_Check_Button(55, 180, 391, 15, _("Auto connect when fldigi opens (server must be up)"));
                btn_auto_talk->down_box(FL_DOWN_BOX);
                btn_auto_talk->callback((Fl_Callback*)cb_btn_auto_talk);
                o->value(progdefaults.auto_talk);
              } // Fl_Check_Button* btn_auto_talk
              grpTalker->end();
            } // Fl_Group* grpTalker
            { Fl_Group* o = new Fl_Group(29, 72, 490, 56, _("Capture rx text to external file"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = chkRxStream = new Fl_Check_Button(55, 99, 175, 20, _("Enable rx text stream"));
                chkRxStream->tooltip(_("Send rx text to file: textout.txt"));
                chkRxStream->down_box(FL_DOWN_BOX);
                chkRxStream->callback((Fl_Callback*)cb_chkRxStream);
                o->value(progdefaults.speak);
              } // Fl_Check_Button* chkRxStream
              o->end();
            } // Fl_Group* o
            tabText_IO->end();
          } // Fl_Group* tabText_IO
          { tabDTMF = new Fl_Group(0, 50, 540, 320, _("DTMF"));
            tabDTMF->hide();
            { Fl_Check_Button* o = chkDTMFdecode = new Fl_Check_Button(187, 103, 175, 20, _("Decode DTMF tones"));
              chkDTMFdecode->tooltip(_("Send rx text to file: textout.txt"));
              chkDTMFdecode->down_box(FL_DOWN_BOX);
              chkDTMFdecode->callback((Fl_Callback*)cb_chkDTMFdecode);
              o->value(progdefaults.DTMFdecode);
            } // Fl_Check_Button* chkDTMFdecode
            tabDTMF->end();
          } // Fl_Group* tabDTMF
          { tabWX = new Fl_Group(0, 50, 540, 320, _("WX"));
            tabWX->hide();
            { Fl_Group* o = new Fl_Group(27, 60, 490, 300, _("Weather query specification"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Input* o = inpWXsta = new Fl_Input(66, 92, 43, 24, _("METAR station ID code"));
                inpWXsta->tooltip(_("for example KMDQ for \nHuntsville-Madison Executive Airport, AL"));
                inpWXsta->callback((Fl_Callback*)cb_inpWXsta);
                inpWXsta->align(Fl_Align(FL_ALIGN_RIGHT));
                o->value(progdefaults.wx_sta.c_str());
              } // Fl_Input* inpWXsta
              { Fl_Check_Button* o = btn_wx_full = new Fl_Check_Button(230, 130, 70, 15, _("Full report"));
                btn_wx_full->tooltip(_("Insert full METAR report"));
                btn_wx_full->down_box(FL_DOWN_BOX);
                btn_wx_full->callback((Fl_Callback*)cb_btn_wx_full);
                o->value(progdefaults.wx_full);
              } // Fl_Check_Button* btn_wx_full
              { Fl_Input* o = new Fl_Input(230, 156, 266, 25, _("End of header string:"));
                o->tooltip(_("Text defining end of METAR header\nTypically \'Connection: close\'\nUsed to s\
earch for station name"));
                o->callback((Fl_Callback*)cb_End);
                o->when(FL_WHEN_CHANGED);
                o->value(progdefaults.wx_eoh.c_str());
              } // Fl_Input* o
              { Fl_Check_Button* o = btn_wx_station_name = new Fl_Check_Button(230, 192, 70, 15, _("METAR station location"));
                btn_wx_station_name->tooltip(_("Add geopolitical name of METAR station"));
                btn_wx_station_name->down_box(FL_DOWN_BOX);
                btn_wx_station_name->callback((Fl_Callback*)cb_btn_wx_station_name);
                o->value(progdefaults.wx_station_name);
              } // Fl_Check_Button* btn_wx_station_name
              { Fl_Check_Button* o = btn_wx_condx = new Fl_Check_Button(230, 218, 70, 15, _("Conditions"));
                btn_wx_condx->tooltip(_("current wx conditions"));
                btn_wx_condx->down_box(FL_DOWN_BOX);
                btn_wx_condx->callback((Fl_Callback*)cb_btn_wx_condx);
                o->value(progdefaults.wx_condx);
              } // Fl_Check_Button* btn_wx_condx
              { Fl_Check_Button* o = btn_wx_fahrenheit = new Fl_Check_Button(230, 245, 70, 15, _("Fahrenheit"));
                btn_wx_fahrenheit->tooltip(_("report Fahrenheit"));
                btn_wx_fahrenheit->down_box(FL_DOWN_BOX);
                btn_wx_fahrenheit->callback((Fl_Callback*)cb_btn_wx_fahrenheit);
                o->value(progdefaults.wx_fahrenheit);
              } // Fl_Check_Button* btn_wx_fahrenheit
              { Fl_Check_Button* o = btn_wx_celsius = new Fl_Check_Button(358, 245, 70, 15, _("Celsius"));
                btn_wx_celsius->tooltip(_("report Celsius"));
                btn_wx_celsius->down_box(FL_DOWN_BOX);
                btn_wx_celsius->callback((Fl_Callback*)cb_btn_wx_celsius);
                o->value(progdefaults.wx_celsius);
              } // Fl_Check_Button* btn_wx_celsius
              { Fl_Check_Button* o = btn_wx_mph = new Fl_Check_Button(230, 271, 70, 15, _("Miles / Hour"));
                btn_wx_mph->tooltip(_("report miles per hour"));
                btn_wx_mph->down_box(FL_DOWN_BOX);
                btn_wx_mph->callback((Fl_Callback*)cb_btn_wx_mph);
                o->value(progdefaults.wx_mph);
              } // Fl_Check_Button* btn_wx_mph
              { Fl_Check_Button* o = btn_wx_kph = new Fl_Check_Button(358, 271, 70, 15, _("kilometers / hour"));
                btn_wx_kph->tooltip(_("report kilometers per hour"));
                btn_wx_kph->down_box(FL_DOWN_BOX);
                btn_wx_kph->callback((Fl_Callback*)cb_btn_wx_kph);
                o->value(progdefaults.wx_kph);
              } // Fl_Check_Button* btn_wx_kph
              { Fl_Check_Button* o = btn_wx_inches = new Fl_Check_Button(230, 298, 70, 15, _("Inches Mg."));
                btn_wx_inches->tooltip(_("report inches mercury"));
                btn_wx_inches->down_box(FL_DOWN_BOX);
                btn_wx_inches->callback((Fl_Callback*)cb_btn_wx_inches);
                o->value(progdefaults.wx_inches);
              } // Fl_Check_Button* btn_wx_inches
              { Fl_Check_Button* o = btn_wx_mbars = new Fl_Check_Button(358, 298, 70, 15, _("mbars"));
                btn_wx_mbars->tooltip(_("report millibars"));
                btn_wx_mbars->down_box(FL_DOWN_BOX);
                btn_wx_mbars->callback((Fl_Callback*)cb_btn_wx_mbars);
                o->value(progdefaults.wx_mbars);
              } // Fl_Check_Button* btn_wx_mbars
              { Fl_Box* o = new Fl_Box(65, 245, 156, 19, _("Temperature"));
                o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
              } // Fl_Box* o
              { Fl_Box* o = new Fl_Box(65, 271, 156, 19, _("Wind speed/dir"));
                o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
              } // Fl_Box* o
              { Fl_Box* o = new Fl_Box(65, 298, 156, 19, _("Barometric pressure"));
                o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
              } // Fl_Box* o
              { btn_metar_search = new Fl_Button(308, 92, 130, 24, _("Search on  web"));
                btn_metar_search->callback((Fl_Callback*)cb_btn_metar_search);
              } // Fl_Button* btn_metar_search
              o->end();
            } // Fl_Group* o
            tabWX->end();
          } // Fl_Group* tabWX
          { tabKML = new Fl_Group(0, 50, 540, 320, _("KML"));
            tabKML->hide();
            { Fl_Input* o = btnKmlSaveDir = new Fl_Input(26, 75, 390, 24, _("KML files directory"));
              btnKmlSaveDir->tooltip(_("Where generated KML documents are stored."));
              btnKmlSaveDir->callback((Fl_Callback*)cb_btnKmlSaveDir);
              btnKmlSaveDir->align(Fl_Align(69));
              o->value(progdefaults.kml_save_dir.c_str());
            } // Fl_Input* btnKmlSaveDir
            { Fl_Input* o = inputKmlRootFile = new Fl_Input(25, 119, 300, 24, _("KML root file"));
              inputKmlRootFile->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              o->value("fldigi.kml");
            } // Fl_Input* inputKmlRootFile
            { Fl_Counter* o = cntKmlMergeDistance = new Fl_Counter(26, 155, 100, 24, _("Minimum distance for splitting aliases (Meters)"));
              cntKmlMergeDistance->tooltip(_("Minimum distance for splitting alias nodes (Meters)"));
              cntKmlMergeDistance->minimum(0);
              cntKmlMergeDistance->maximum(100000);
              cntKmlMergeDistance->step(10);
              cntKmlMergeDistance->value(1000);
              cntKmlMergeDistance->callback((Fl_Callback*)cb_cntKmlMergeDistance);
              cntKmlMergeDistance->align(Fl_Align(FL_ALIGN_RIGHT));
              o->value(progdefaults.kml_merge_distance);
              o->lstep(1000);
            } // Fl_Counter* cntKmlMergeDistance
            { Fl_Counter* o = cntKmlRetentionTime = new Fl_Counter(25, 191, 100, 24, _("Data retention time, in hours (0 for no limit)"));
              cntKmlRetentionTime->tooltip(_("Number of hours data is kept for each node. Zero means keeping everything."));
              cntKmlRetentionTime->minimum(0);
              cntKmlRetentionTime->maximum(500);
              cntKmlRetentionTime->step(1);
              cntKmlRetentionTime->callback((Fl_Callback*)cb_cntKmlRetentionTime);
              cntKmlRetentionTime->align(Fl_Align(FL_ALIGN_RIGHT));
              o->value(progdefaults.kml_retention_time);
              o->lstep(24);
            } // Fl_Counter* cntKmlRetentionTime
            { Fl_Spinner2* o = cntKmlRefreshInterval = new Fl_Spinner2(24, 227, 50, 24, _("KML refresh interval (seconds)"));
              cntKmlRefreshInterval->tooltip(_("Refresh time interval written in KML file (Seconds)"));
              cntKmlRefreshInterval->box(FL_NO_BOX);
              cntKmlRefreshInterval->color(FL_BACKGROUND_COLOR);
              cntKmlRefreshInterval->selection_color(FL_BACKGROUND_COLOR);
              cntKmlRefreshInterval->labeltype(FL_NORMAL_LABEL);
              cntKmlRefreshInterval->labelfont(0);
              cntKmlRefreshInterval->labelsize(14);
              cntKmlRefreshInterval->labelcolor(FL_FOREGROUND_COLOR);
              cntKmlRefreshInterval->value(10);
              cntKmlRefreshInterval->callback((Fl_Callback*)cb_cntKmlRefreshInterval);
              cntKmlRefreshInterval->align(Fl_Align(FL_ALIGN_RIGHT));
              cntKmlRefreshInterval->when(FL_WHEN_RELEASE);
              o->minimum(1); o->maximum(3600); o->step(1);
              o->value(progdefaults.kml_refresh_interval);
              o->labelsize(FL_NORMAL_SIZE);
            } // Fl_Spinner2* cntKmlRefreshInterval
            { Fl_Choice* o = selKmlBalloonStyle = new Fl_Choice(24, 263, 201, 24, _("KML balloon display style"));
              selKmlBalloonStyle->tooltip(_("KML balloon in plain text, or HTML, in plain tables or matrices."));
              selKmlBalloonStyle->down_box(FL_BORDER_BOX);
              selKmlBalloonStyle->callback((Fl_Callback*)cb_selKmlBalloonStyle);
              selKmlBalloonStyle->align(Fl_Align(FL_ALIGN_RIGHT));
              selKmlBalloonStyle->when(FL_WHEN_CHANGED);
              o->add("Plain text|HTML tables|Single HTML matrix");o->value(progdefaults.kml_balloon_style);
            } // Fl_Choice* selKmlBalloonStyle
            { Fl_Input* o = btnKmlCommand = new Fl_Input(24, 299, 246, 24, _("Command run on KML creation"));
              btnKmlCommand->tooltip(_("Command started when KML files are generated. Subprocesses are started once, \
and restarted if needed."));
              btnKmlCommand->callback((Fl_Callback*)cb_btnKmlCommand);
              btnKmlCommand->align(Fl_Align(72));
              o->value(progdefaults.kml_command.c_str());
            } // Fl_Input* btnKmlCommand
            { btlTestKmlCommand = new Fl_Button(24, 335, 191, 24, _("Test command"));
              btlTestKmlCommand->tooltip(_("Execute command on KML files."));
              btlTestKmlCommand->callback((Fl_Callback*)cb_btlTestKmlCommand);
            } // Fl_Button* btlTestKmlCommand
            { btnSelectKmlDestDir = new Fl_Button(425, 75, 101, 24, _("Change dir..."));
              btnSelectKmlDestDir->tooltip(_("Choose directory to store KML documents"));
              btnSelectKmlDestDir->callback((Fl_Callback*)cb_btnSelectKmlDestDir);
            } // Fl_Button* btnSelectKmlDestDir
            { btlPurge = new Fl_Button(336, 119, 190, 24, _("Cleanup KML data now !"));
              btlPurge->tooltip(_("Cleanups KML documents, empties Google Earth display."));
              btlPurge->callback((Fl_Callback*)cb_btlPurge);
            } // Fl_Button* btlPurge
            { Fl_Check_Button* o = btnKmlPurgeOnStartup = new Fl_Check_Button(322, 231, 172, 15, _("Cleanup on startup"));
              btnKmlPurgeOnStartup->tooltip(_("Empties KML documents when starting program."));
              btnKmlPurgeOnStartup->down_box(FL_DOWN_BOX);
              btnKmlPurgeOnStartup->callback((Fl_Callback*)cb_btnKmlPurgeOnStartup);
              o->value(progdefaults.kml_purge_on_startup);
            } // Fl_Check_Button* btnKmlPurgeOnStartup
            tabKML->end();
          } // Fl_Group* tabKML
          tabsMisc->end();
        } // Fl_Tabs* tabsMisc
        tabMisc->end();
      } // Fl_Group* tabMisc
      { tabQRZ = new Fl_Group(0, 25, 540, 349, _("Web"));
        tabQRZ->tooltip(_("Callsign database"));
        tabQRZ->hide();
        { tabsQRZ = new Fl_Tabs(0, 25, 540, 349);
          { Fl_Group* o = new Fl_Group(0, 50, 540, 324, _("Call Lookup"));
            { Fl_Group* o = new Fl_Group(27, 52, 490, 122, _("Web Browser lookup"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Round_Button* o = btnQRZWEBnotavailable = new Fl_Round_Button(49, 78, 337, 20, _("None"));
                btnQRZWEBnotavailable->tooltip(_("Do not use callsign lookup via web browser"));
                btnQRZWEBnotavailable->down_box(FL_DOWN_BOX);
                btnQRZWEBnotavailable->value(1);
                btnQRZWEBnotavailable->callback((Fl_Callback*)cb_btnQRZWEBnotavailable);
                o->value(progdefaults.QRZWEB == QRZWEBNONE);
              } // Fl_Round_Button* btnQRZWEBnotavailable
              { Fl_Round_Button* o = btnQRZonline = new Fl_Round_Button(49, 102, 337, 20, _("QRZ online via default Internet Browser"));
                btnQRZonline->tooltip(_("Visit QRZ web site"));
                btnQRZonline->down_box(FL_DOWN_BOX);
                btnQRZonline->callback((Fl_Callback*)cb_btnQRZonline);
                o->value(progdefaults.QRZWEB == QRZHTML);
              } // Fl_Round_Button* btnQRZonline
              { Fl_Round_Button* o = btnHAMCALLonline = new Fl_Round_Button(49, 126, 337, 20, _("HamCall online via default Internet Browser"));
                btnHAMCALLonline->tooltip(_("Visit Hamcall web site"));
                btnHAMCALLonline->down_box(FL_DOWN_BOX);
                btnHAMCALLonline->callback((Fl_Callback*)cb_btnHAMCALLonline);
                o->value(progdefaults.QRZWEB == HAMCALLHTML);
              } // Fl_Round_Button* btnHAMCALLonline
              { Fl_Round_Button* o = btnHamQTHonline = new Fl_Round_Button(49, 150, 337, 20, _("HamQTH via default Internet Browser"));
                btnHamQTHonline->tooltip(_("Visit hamQTH web site"));
                btnHamQTHonline->down_box(FL_DOWN_BOX);
                btnHamQTHonline->callback((Fl_Callback*)cb_btnHamQTHonline);
                o->value(progdefaults.QRZWEB == HAMQTHHTML);
              } // Fl_Round_Button* btnHamQTHonline
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(27, 176, 490, 190, _("Data base lookup"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Round_Button* o = btnQRZXMLnotavailable = new Fl_Round_Button(49, 199, 337, 20, _("None"));
                btnQRZXMLnotavailable->tooltip(_("Do not use callsign database"));
                btnQRZXMLnotavailable->down_box(FL_DOWN_BOX);
                btnQRZXMLnotavailable->value(1);
                btnQRZXMLnotavailable->callback((Fl_Callback*)cb_btnQRZXMLnotavailable);
                o->value(progdefaults.QRZXML == QRZXMLNONE);
              } // Fl_Round_Button* btnQRZXMLnotavailable
              { Fl_Round_Button* o = btnQRZcdrom = new Fl_Round_Button(49, 227, 70, 20, _("QRZ cdrom"));
                btnQRZcdrom->tooltip(_("Use CD or hard drive CD image"));
                btnQRZcdrom->down_box(FL_DOWN_BOX);
                btnQRZcdrom->callback((Fl_Callback*)cb_btnQRZcdrom);
                o->value(progdefaults.QRZXML == QRZCD);
              } // Fl_Round_Button* btnQRZcdrom
              { Fl_Round_Button* o = btnQRZsub = new Fl_Round_Button(49, 255, 125, 20, _("QRZ.com"));
                btnQRZsub->tooltip(_("You need a paid QRZ online\nsubscription to access"));
                btnQRZsub->down_box(FL_DOWN_BOX);
                btnQRZsub->callback((Fl_Callback*)cb_btnQRZsub);
                o->value(progdefaults.QRZXML == QRZNET);
              } // Fl_Round_Button* btnQRZsub
              { Fl_Round_Button* o = btnHamcall = new Fl_Round_Button(49, 281, 125, 20, _("Hamcall.net"));
                btnHamcall->tooltip(_("You need a paid Hamcall online\nsubscription to access"));
                btnHamcall->down_box(FL_DOWN_BOX);
                btnHamcall->callback((Fl_Callback*)cb_btnHamcall);
                o->value(progdefaults.QRZXML == HAMCALLNET);
              } // Fl_Round_Button* btnHamcall
              { Fl_Round_Button* o = btnHamQTH = new Fl_Round_Button(49, 307, 125, 20, _("HamQTH.com (free service http://www.hamqth.com)"));
                btnHamQTH->tooltip(_("Free service courtesy of OK"));
                btnHamQTH->down_box(FL_DOWN_BOX);
                btnHamQTH->callback((Fl_Callback*)cb_btnHamQTH);
                o->value(progdefaults.QRZXML == HAMQTH);
              } // Fl_Round_Button* btnHamQTH
              { Fl_Round_Button* o = btnCALLOOK = new Fl_Round_Button(49, 334, 125, 20, _("Callook.info lookup (free service US callsigns only)"));
                btnCALLOOK->tooltip(_("Visit Hamcall web site"));
                btnCALLOOK->down_box(FL_DOWN_BOX);
                btnCALLOOK->callback((Fl_Callback*)cb_btnCALLOOK);
                o->value(progdefaults.QRZXML == CALLOOK);
              } // Fl_Round_Button* btnCALLOOK
              { Fl_Input2* o = txtQRZpathname = new Fl_Input2(174, 227, 300, 20, _("at:"));
                txtQRZpathname->tooltip(_("ie: /home/dave/CALLBK/ or C:/CALLBK/\nLeave blank to search for database"));
                txtQRZpathname->box(FL_DOWN_BOX);
                txtQRZpathname->color(FL_BACKGROUND2_COLOR);
                txtQRZpathname->selection_color(FL_SELECTION_COLOR);
                txtQRZpathname->labeltype(FL_NORMAL_LABEL);
                txtQRZpathname->labelfont(0);
                txtQRZpathname->labelsize(14);
                txtQRZpathname->labelcolor(FL_FOREGROUND_COLOR);
                txtQRZpathname->callback((Fl_Callback*)cb_txtQRZpathname);
                txtQRZpathname->align(Fl_Align(FL_ALIGN_LEFT));
                txtQRZpathname->when(FL_WHEN_RELEASE);
                o->value(progdefaults.QRZpathname.c_str());
                txtQRZpathname->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* txtQRZpathname
              { Fl_Input2* o = inpQRZusername = new Fl_Input2(257, 255, 150, 20, _("User name"));
                inpQRZusername->tooltip(_("Your login name"));
                inpQRZusername->box(FL_DOWN_BOX);
                inpQRZusername->color(FL_BACKGROUND2_COLOR);
                inpQRZusername->selection_color(FL_SELECTION_COLOR);
                inpQRZusername->labeltype(FL_NORMAL_LABEL);
                inpQRZusername->labelfont(0);
                inpQRZusername->labelsize(14);
                inpQRZusername->labelcolor(FL_FOREGROUND_COLOR);
                inpQRZusername->callback((Fl_Callback*)cb_inpQRZusername);
                inpQRZusername->align(Fl_Align(FL_ALIGN_LEFT));
                inpQRZusername->when(FL_WHEN_RELEASE);
                o->value(progdefaults.QRZusername.c_str());
                inpQRZusername->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* inpQRZusername
              { Fl_Input2* o = inpQRZuserpassword = new Fl_Input2(257, 281, 150, 20, _("Password"));
                inpQRZuserpassword->tooltip(_("Your login password"));
                inpQRZuserpassword->box(FL_DOWN_BOX);
                inpQRZuserpassword->color(FL_BACKGROUND2_COLOR);
                inpQRZuserpassword->selection_color(FL_SELECTION_COLOR);
                inpQRZuserpassword->labeltype(FL_NORMAL_LABEL);
                inpQRZuserpassword->labelfont(0);
                inpQRZuserpassword->labelsize(14);
                inpQRZuserpassword->labelcolor(FL_FOREGROUND_COLOR);
                inpQRZuserpassword->callback((Fl_Callback*)cb_inpQRZuserpassword);
                inpQRZuserpassword->align(Fl_Align(FL_ALIGN_LEFT));
                inpQRZuserpassword->when(FL_WHEN_RELEASE);
                o->value(progdefaults.QRZuserpassword.c_str());
                o->type(FL_SECRET_INPUT);
                inpQRZuserpassword->labelsize(FL_NORMAL_SIZE);
              } // Fl_Input2* inpQRZuserpassword
              { btnQRZpasswordShow = new Fl_Button(417, 281, 70, 20, _("Show"));
                btnQRZpasswordShow->tooltip(_("Show password in plain text"));
                btnQRZpasswordShow->callback((Fl_Callback*)cb_btnQRZpasswordShow);
              } // Fl_Button* btnQRZpasswordShow
              o->end();
            } // Fl_Group* o
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(0, 50, 540, 320, _("eQSL"));
            o->hide();
            { Fl_Input2* o = inpEQSL_id = new Fl_Input2(194, 58, 150, 20, _("User ID"));
              inpEQSL_id->tooltip(_("Your login name"));
              inpEQSL_id->box(FL_DOWN_BOX);
              inpEQSL_id->color(FL_BACKGROUND2_COLOR);
              inpEQSL_id->selection_color(FL_SELECTION_COLOR);
              inpEQSL_id->labeltype(FL_NORMAL_LABEL);
              inpEQSL_id->labelfont(0);
              inpEQSL_id->labelsize(14);
              inpEQSL_id->labelcolor(FL_FOREGROUND_COLOR);
              inpEQSL_id->callback((Fl_Callback*)cb_inpEQSL_id);
              inpEQSL_id->align(Fl_Align(FL_ALIGN_LEFT));
              inpEQSL_id->when(FL_WHEN_RELEASE);
              o->value(progdefaults.eqsl_id.c_str());
              inpEQSL_id->labelsize(FL_NORMAL_SIZE);
            } // Fl_Input2* inpEQSL_id
            { Fl_Input2* o = inpEQSL_pwd = new Fl_Input2(194, 85, 150, 20, _("Password"));
              inpEQSL_pwd->tooltip(_("Your login password"));
              inpEQSL_pwd->box(FL_DOWN_BOX);
              inpEQSL_pwd->color(FL_BACKGROUND2_COLOR);
              inpEQSL_pwd->selection_color(FL_SELECTION_COLOR);
              inpEQSL_pwd->labeltype(FL_NORMAL_LABEL);
              inpEQSL_pwd->labelfont(0);
              inpEQSL_pwd->labelsize(14);
              inpEQSL_pwd->labelcolor(FL_FOREGROUND_COLOR);
              inpEQSL_pwd->callback((Fl_Callback*)cb_inpEQSL_pwd);
              inpEQSL_pwd->align(Fl_Align(FL_ALIGN_LEFT));
              inpEQSL_pwd->when(FL_WHEN_RELEASE);
              o->value(progdefaults.eqsl_pwd.c_str());
              o->type(FL_SECRET_INPUT);
              inpEQSL_pwd->labelsize(FL_NORMAL_SIZE);
            } // Fl_Input2* inpEQSL_pwd
            { btnEQSL_pwd_show = new Fl_Button(362, 85, 70, 20, _("Show"));
              btnEQSL_pwd_show->tooltip(_("Show password in plain text"));
              btnEQSL_pwd_show->callback((Fl_Callback*)cb_btnEQSL_pwd_show);
            } // Fl_Button* btnEQSL_pwd_show
            { Fl_Input2* o = inpEQSL_nick = new Fl_Input2(194, 114, 150, 20, _("QTH Nickname"));
              inpEQSL_nick->tooltip(_("Your login name"));
              inpEQSL_nick->box(FL_DOWN_BOX);
              inpEQSL_nick->color(FL_BACKGROUND2_COLOR);
              inpEQSL_nick->selection_color(FL_SELECTION_COLOR);
              inpEQSL_nick->labeltype(FL_NORMAL_LABEL);
              inpEQSL_nick->labelfont(0);
              inpEQSL_nick->labelsize(14);
              inpEQSL_nick->labelcolor(FL_FOREGROUND_COLOR);
              inpEQSL_nick->callback((Fl_Callback*)cb_inpEQSL_nick);
              inpEQSL_nick->align(Fl_Align(FL_ALIGN_LEFT));
              inpEQSL_nick->when(FL_WHEN_RELEASE);
              o->value(progdefaults.eqsl_nick.c_str());
              inpEQSL_nick->labelsize(FL_NORMAL_SIZE);
            } // Fl_Input2* inpEQSL_nick
            { Fl_Group* o = new Fl_Group(22, 141, 492, 223, _("Options"));
              o->box(FL_ENGRAVED_FRAME);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
              { Fl_Check_Button* o = btn_send_when_logged = new Fl_Check_Button(47, 166, 70, 15, _("send when logged (log button, <LOG>, <LNW>)"));
                btn_send_when_logged->tooltip(_("automatic data upload"));
                btn_send_when_logged->down_box(FL_DOWN_BOX);
                btn_send_when_logged->callback((Fl_Callback*)cb_btn_send_when_logged);
                o->value(progdefaults.eqsl_when_logged);
              } // Fl_Check_Button* btn_send_when_logged
              { Fl_Input2* o = txt_eqsl_default_message = new Fl_Input2(51, 226, 451, 40, _("Default message"));
                txt_eqsl_default_message->tooltip(_("default text to send with <LOG> etc"));
                txt_eqsl_default_message->type(4);
                txt_eqsl_default_message->box(FL_DOWN_BOX);
                txt_eqsl_default_message->color(FL_BACKGROUND2_COLOR);
                txt_eqsl_default_message->selection_color(FL_SELECTION_COLOR);
                txt_eqsl_default_message->labeltype(FL_NORMAL_LABEL);
                txt_eqsl_default_message->labelfont(0);
                txt_eqsl_default_message->labelsize(14);
                txt_eqsl_default_message->labelcolor(FL_FOREGROUND_COLOR);
                txt_eqsl_default_message->callback((Fl_Callback*)cb_txt_eqsl_default_message);
                txt_eqsl_default_message->align(Fl_Align(FL_ALIGN_TOP_LEFT));
                txt_eqsl_default_message->when(FL_WHEN_CHANGED);
                o->value(progdefaults.eqsl_default_message.c_str());
              } // Fl_Input2* txt_eqsl_default_message
              { Fl_Group* o = new Fl_Group(26, 270, 484, 90, _("Text Tags (tags use {} delimiters)"));
                o->box(FL_THIN_DOWN_BOX);
                o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
                { eqsl_txt1 = new Fl_Box(32, 317, 220, 17, _("{CALL} other ops call sign"));
                eqsl_txt1->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
                } // Fl_Box* eqsl_txt1
                { eqsl_txt2 = new Fl_Box(30, 336, 220, 17, _("{MODE} full mode / submode"));
                eqsl_txt2->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
                } // Fl_Box* eqsl_txt2
                { eqsl_txt3 = new Fl_Box(278, 317, 220, 17, _("{NAME} other ops name"));
                eqsl_txt3->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
                } // Fl_Box* eqsl_txt3
                { new Fl_Box(46, 293, 440, 17, _("These tags can also be used in <EQSL:[message]>"));
                } // Fl_Box* o
                o->end();
              } // Fl_Group* o
              { Fl_Check_Button* o = btn_send_datetime_off = new Fl_Check_Button(48, 188, 70, 15, _("Use date/time off for log entry"));
                btn_send_datetime_off->tooltip(_("default uses date/time on"));
                btn_send_datetime_off->down_box(FL_DOWN_BOX);
                btn_send_datetime_off->callback((Fl_Callback*)cb_btn_send_datetime_off);
                o->value(progdefaults.eqsl_datetime_off);
              } // Fl_Check_Button* btn_send_datetime_off
              o->end();
            } // Fl_Group* o
            o->end();
          } // Fl_Group* o
          tabsQRZ->end();
        } // Fl_Tabs* tabsQRZ
        tabQRZ->end();
      } // Fl_Group* tabQRZ
      tabsConfigure->end();
    } // Fl_Tabs* tabsConfigure
    { btnSaveConfig = new Fl_Button(251, 375, 130, 22, _("Save"));
      btnSaveConfig->callback((Fl_Callback*)cb_btnSaveConfig);
    } // Fl_Button* btnSaveConfig
    { btnCloseConfig = new Fl_Return_Button(383, 375, 130, 22, _("Close"));
      btnCloseConfig->callback((Fl_Callback*)cb_btnCloseConfig);
    } // Fl_Return_Button* btnCloseConfig
    { btnResetConfig = new Fl_Button(20, 375, 130, 22, _("Restore defaults"));
      btnResetConfig->callback((Fl_Callback*)cb_btnResetConfig);
    } // Fl_Button* btnResetConfig
    o->set_non_modal();
    o->end();
  } // Fl_Double_Window* o
  return w;
}

void openConfig() {
  if (!dlgConfig) createConfig();
  progdefaults.loadDefaults();
}

void closeDialog() {
  if (dlgConfig) dlgConfig->hide();
}

void createConfig() {
  if (!dlgConfig) {
      dlgConfig = ConfigureDialog();
      dlgConfig->xclass(PACKAGE_NAME);
    }
}

void WefaxDestDirSet(Fl_File_Chooser *w, void *userdata) {
  /* http://www.fltk.org/documentation.php/doc-1.1/Fl_File_Chooser.html */
  if( ( w->value() != NULL ) && ( ! w->shown() ) ) {
  	btnWefaxSaveDir->value( w->value() );
  	btnWefaxSaveDir->redraw();
  	cb_btnWefaxSaveDir( btnWefaxSaveDir, NULL );
  }
}

void KmlDestDirSet(Fl_File_Chooser *w, void *userdata) {
  /* http://www.fltk.org/documentation.php/doc-1.1/Fl_File_Chooser.html */
  if( ( w->value() != NULL ) && ( ! w->shown() ) ) {
  	btnKmlSaveDir->value( w->value() );
  	btnKmlSaveDir->redraw();
  	cb_btnKmlSaveDir( btnKmlSaveDir, NULL );
  }
}
